
lab3_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08009120  08009120  00019120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800958c  0800958c  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800958c  0800958c  0001958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009594  08009594  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009594  08009594  00019594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009598  08009598  00019598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800959c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ee1c  20000240  080097dc  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f05c  080097dc  0002f05c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191b8  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e9  00000000  00000000  00039428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  0003daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b05e  00000000  00000000  0003ec88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018062  00000000  00000000  00059ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd9d  00000000  00000000  00071d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010dae5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e80  00000000  00000000  0010db38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009108 	.word	0x08009108

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	08009108 	.word	0x08009108

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  Error_Handler();
 8000eb4:	f000 fa3c 	bl	8001330 <Error_Handler>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{ 
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  BufferCtl.offset = BUFFER_OFFSET_FULL;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	601a      	str	r2, [r3, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	2000069c 	.word	0x2000069c

08000ed4 <BSP_AUDIO_IN_Error_Callback>:
  * @brief  Audio IN Error callback function
  * @param  pData
  * @retval None
  */
void BSP_AUDIO_IN_Error_Callback(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  Error_Handler();
 8000ed8:	f000 fa2a 	bl	8001330 <Error_Handler>
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ee8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d013      	beq.n	8000f20 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ef8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000efc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f00:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00b      	beq.n	8000f20 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f08:	e000      	b.n	8000f0c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f0a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f9      	beq.n	8000f0a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f16:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8000f34:	f000 fdee 	bl	8001b14 <HAL_Init>

  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f004 ff65 	bl	8005e08 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f004 ff62 	bl	8005e08 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000f44:	2002      	movs	r0, #2
 8000f46:	f004 ff5f 	bl	8005e08 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	f004 ff5c 	bl	8005e08 <BSP_LED_Init>

  /* Configure the system clock to 100 MHz */
  SystemClock_Config();
 8000f50:	f000 f916 	bl	8001180 <SystemClock_Config>

  /* Configure GPIO so that we can probe PB2 with an Oscilloscope */
  GPIOA_Init();
 8000f54:	f000 f9f2 	bl	800133c <GPIOA_Init>

  /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f004 ffe6 	bl	8005f2c <BSP_PB_Init>

  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8000f60:	4b75      	ldr	r3, [pc, #468]	; (8001138 <main+0x208>)
 8000f62:	4a76      	ldr	r2, [pc, #472]	; (800113c <main+0x20c>)
 8000f64:	601a      	str	r2, [r3, #0]


  /* Initialize the Audio driver */
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 60, 8000) != 0) {
 8000f66:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f6a:	213c      	movs	r1, #60	; 0x3c
 8000f6c:	2004      	movs	r0, #4
 8000f6e:	f005 f999 	bl	80062a4 <BSP_AUDIO_OUT_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <main+0x4c>
	  Error_Handler();
 8000f78:	f000 f9da 	bl	8001330 <Error_Handler>

  /* Initialize TIM3 peripheral to toggle with a frequency of ~ 8 kHz
   * System clock is 100 MHz and TIM3 is counting at the rate of the system clock
   * so 100 M / 8 k is 12500
   */
  TimHandle.Init.Period = 12499;
 8000f7c:	4b6e      	ldr	r3, [pc, #440]	; (8001138 <main+0x208>)
 8000f7e:	f243 02d3 	movw	r2, #12499	; 0x30d3
 8000f82:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = 0;
 8000f84:	4b6c      	ldr	r3, [pc, #432]	; (8001138 <main+0x208>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 8000f8a:	4b6b      	ldr	r3, [pc, #428]	; (8001138 <main+0x208>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b69      	ldr	r3, [pc, #420]	; (8001138 <main+0x208>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b68      	ldr	r3, [pc, #416]	; (8001138 <main+0x208>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000f9c:	4866      	ldr	r0, [pc, #408]	; (8001138 <main+0x208>)
 8000f9e:	f004 f98f 	bl	80052c0 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <main+0x7c>
  {
	  /* Initialization Error */
	  Error_Handler();
 8000fa8:	f000 f9c2 	bl	8001330 <Error_Handler>
  }

  ITM_Port32(30) = 0;
 8000fac:	4b64      	ldr	r3, [pc, #400]	; (8001140 <main+0x210>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8000fb2:	4861      	ldr	r0, [pc, #388]	; (8001138 <main+0x208>)
 8000fb4:	f004 f9d4 	bl	8005360 <HAL_TIM_Base_Start_IT>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <main+0x92>
  {
	  /* Starting Error */
	  Error_Handler();
 8000fbe:	f000 f9b7 	bl	8001330 <Error_Handler>
  static int k = 0;
  static int start = 0;

  while (1) {

	if (new_sample_flag == 1) {
 8000fc2:	4b60      	ldr	r3, [pc, #384]	; (8001144 <main+0x214>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d156      	bne.n	8001078 <main+0x148>
//		for (int j = 0; j < 10; j++)
//		{
//			int16_t testSample = test_inputs[j];
//		#endif

			ITM_Port32(31) = 1;
 8000fca:	4b5f      	ldr	r3, [pc, #380]	; (8001148 <main+0x218>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
			//filteredSampleL = newSampleL;
			//filteredSampleL = ProcessSample(newSampleL,input_history_l, output_history_l); // "L"
			filteredSampleL = ProcessSampleMAC(newSampleL,input_history_l, output_history_l);
 8000fd0:	4b5e      	ldr	r3, [pc, #376]	; (800114c <main+0x21c>)
 8000fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd6:	4a5e      	ldr	r2, [pc, #376]	; (8001150 <main+0x220>)
 8000fd8:	495e      	ldr	r1, [pc, #376]	; (8001154 <main+0x224>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f9dc 	bl	8001398 <ProcessSampleMAC>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <main+0x228>)
 8000fe6:	801a      	strh	r2, [r3, #0]
			//filteredSampleL = ProcessSampleForm2(newSampleL);
			ITM_Port32(31) = 2;
 8000fe8:	4b57      	ldr	r3, [pc, #348]	; (8001148 <main+0x218>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	601a      	str	r2, [r3, #0]
			//filteredSampleL = CreateEcho(filteredSampleL, (int16_t)24491);
			filteredSampleL = CreateReverb(filteredSampleL, (int16_t)16384);
 8000fee:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <main+0x228>)
 8000ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fa41 	bl	8001480 <CreateReverb>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	4b55      	ldr	r3, [pc, #340]	; (8001158 <main+0x228>)
 8001004:	801a      	strh	r2, [r3, #0]
			ITM_Port32(31) = 3;
 8001006:	4b50      	ldr	r3, [pc, #320]	; (8001148 <main+0x218>)
 8001008:	2203      	movs	r2, #3
 800100a:	601a      	str	r2, [r3, #0]

			new_sample_flag = 0;
 800100c:	4b4d      	ldr	r3, [pc, #308]	; (8001144 <main+0x214>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
			if (i < NUMBER_OF_TAPS-1) {
 8001012:	4b52      	ldr	r3, [pc, #328]	; (800115c <main+0x22c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	dc08      	bgt.n	800102c <main+0xfc>
				filteredSampleL = 0;
 800101a:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <main+0x228>)
 800101c:	2200      	movs	r2, #0
 800101e:	801a      	strh	r2, [r3, #0]
				i++;
 8001020:	4b4e      	ldr	r3, [pc, #312]	; (800115c <main+0x22c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	4a4d      	ldr	r2, [pc, #308]	; (800115c <main+0x22c>)
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e025      	b.n	8001078 <main+0x148>
			} else {

				/* Attempt at double buffering here: note that we are duplicating the sample for L and R, but this could be changed*/
				if (bufchoice == 0) {
 800102c:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <main+0x230>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10e      	bne.n	8001052 <main+0x122>
					filteredOutBufferA[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL; // copy the filtered output to both channels
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <main+0x228>)
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	041a      	lsls	r2, r3, #16
 800103c:	4b46      	ldr	r3, [pc, #280]	; (8001158 <main+0x228>)
 800103e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001042:	4619      	mov	r1, r3
 8001044:	4b47      	ldr	r3, [pc, #284]	; (8001164 <main+0x234>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	440a      	add	r2, r1
 800104a:	4947      	ldr	r1, [pc, #284]	; (8001168 <main+0x238>)
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001050:	e00d      	b.n	800106e <main+0x13e>
				} else {
					filteredOutBufferB[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL;
 8001052:	4b41      	ldr	r3, [pc, #260]	; (8001158 <main+0x228>)
 8001054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <main+0x228>)
 800105c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001060:	4619      	mov	r1, r3
 8001062:	4b40      	ldr	r3, [pc, #256]	; (8001164 <main+0x234>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	440a      	add	r2, r1
 8001068:	4940      	ldr	r1, [pc, #256]	; (800116c <main+0x23c>)
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}

				k++;
 800106e:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <main+0x234>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a3b      	ldr	r2, [pc, #236]	; (8001164 <main+0x234>)
 8001076:	6013      	str	r3, [r2, #0]
//		}
//		#endif
	}

	// once a buffer is full, we can swap to fill up the other buffer
	if (k == BUFFER_SIZE) {
 8001078:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <main+0x234>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b64      	cmp	r3, #100	; 0x64
 800107e:	d113      	bne.n	80010a8 <main+0x178>
		k = 0;
 8001080:	4b38      	ldr	r3, [pc, #224]	; (8001164 <main+0x234>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
		if (bufchoice == 0) {
 8001086:	4b36      	ldr	r3, [pc, #216]	; (8001160 <main+0x230>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d106      	bne.n	800109c <main+0x16c>
			bufchoice = 1;
 800108e:	4b34      	ldr	r3, [pc, #208]	; (8001160 <main+0x230>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
			bufArdy = 1;
 8001094:	4b36      	ldr	r3, [pc, #216]	; (8001170 <main+0x240>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	e005      	b.n	80010a8 <main+0x178>
		} else {
			bufchoice = 0;
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <main+0x230>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
			bufBrdy = 1;
 80010a2:	4b34      	ldr	r3, [pc, #208]	; (8001174 <main+0x244>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
		}
	}

	/* We'll use double buffering here, so that once one buffer is ready to go, we use
	 * BSP_AUDIO_OUT_ChangeBuffer to tell the DMA to send the audio to the DAC*/
	if(bufBrdy == 1 && ready == 1 && start == 1) {
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <main+0x244>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d112      	bne.n	80010d6 <main+0x1a6>
 80010b0:	4b31      	ldr	r3, [pc, #196]	; (8001178 <main+0x248>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10e      	bne.n	80010d6 <main+0x1a6>
 80010b8:	4b30      	ldr	r3, [pc, #192]	; (800117c <main+0x24c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10a      	bne.n	80010d6 <main+0x1a6>
		bufBrdy = 0;
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <main+0x244>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
		BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)(filteredOutBufferB), BUFFER_SIZE*2);
 80010c6:	21c8      	movs	r1, #200	; 0xc8
 80010c8:	4828      	ldr	r0, [pc, #160]	; (800116c <main+0x23c>)
 80010ca:	f005 f963 	bl	8006394 <BSP_AUDIO_OUT_ChangeBuffer>
		ready = 0;
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <main+0x248>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e015      	b.n	8001102 <main+0x1d2>
	}

	else if(bufArdy == 1 && ready == 1 && start == 1) {
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <main+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d111      	bne.n	8001102 <main+0x1d2>
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <main+0x248>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10d      	bne.n	8001102 <main+0x1d2>
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <main+0x24c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d109      	bne.n	8001102 <main+0x1d2>
		bufArdy = 0;
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <main+0x240>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
		BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)(filteredOutBufferA), BUFFER_SIZE*2);
 80010f4:	21c8      	movs	r1, #200	; 0xc8
 80010f6:	481c      	ldr	r0, [pc, #112]	; (8001168 <main+0x238>)
 80010f8:	f005 f94c 	bl	8006394 <BSP_AUDIO_OUT_ChangeBuffer>
		ready = 0;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <main+0x248>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
	}

	/* AUDIO_OUT_PLAY is the BSP function essentially tells the audio chip to start working
	 * so every time the audio DAC receives some new data via DMA /I2S, it will play sound*/
	if (bufArdy == 1 && bufBrdy == 1 && start == 0) {
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <main+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	f47f af5b 	bne.w	8000fc2 <main+0x92>
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <main+0x244>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	f47f af56 	bne.w	8000fc2 <main+0x92>
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <main+0x24c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f47f af51 	bne.w	8000fc2 <main+0x92>
		BSP_AUDIO_OUT_Play((uint16_t*)(filteredOutBufferA), BUFFER_SIZE*2);
 8001120:	21c8      	movs	r1, #200	; 0xc8
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <main+0x238>)
 8001124:	f005 f90c 	bl	8006340 <BSP_AUDIO_OUT_Play>
		start = 1;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <main+0x24c>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]
		bufArdy = 0;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <main+0x240>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
	if (new_sample_flag == 1) {
 8001134:	e745      	b.n	8000fc2 <main+0x92>
 8001136:	bf00      	nop
 8001138:	2000eec8 	.word	0x2000eec8
 800113c:	40000400 	.word	0x40000400
 8001140:	e0000078 	.word	0xe0000078
 8001144:	20000260 	.word	0x20000260
 8001148:	e000007c 	.word	0xe000007c
 800114c:	20000268 	.word	0x20000268
 8001150:	2000e6a4 	.word	0x2000e6a4
 8001154:	2000eec0 	.word	0x2000eec0
 8001158:	2000eec6 	.word	0x2000eec6
 800115c:	2000059c 	.word	0x2000059c
 8001160:	2000058c 	.word	0x2000058c
 8001164:	200005a0 	.word	0x200005a0
 8001168:	2000026c 	.word	0x2000026c
 800116c:	200003fc 	.word	0x200003fc
 8001170:	20000590 	.word	0x20000590
 8001174:	20000594 	.word	0x20000594
 8001178:	20000598 	.word	0x20000598
 800117c:	200005a4 	.word	0x200005a4

08001180 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	; 0x50
 8001184:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <SystemClock_Config+0xac>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a27      	ldr	r2, [pc, #156]	; (800122c <SystemClock_Config+0xac>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <SystemClock_Config+0xac>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <SystemClock_Config+0xb0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a21      	ldr	r2, [pc, #132]	; (8001230 <SystemClock_Config+0xb0>)
 80011ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <SystemClock_Config+0xb0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011be:	2302      	movs	r3, #2
 80011c0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80011c6:	2310      	movs	r3, #16
 80011c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ca:	2302      	movs	r3, #2
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011d2:	2310      	movs	r3, #16
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80011d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011dc:	2304      	movs	r3, #4
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011e0:	2307      	movs	r3, #7
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fa77 	bl	80046dc <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80011f4:	f000 f89c 	bl	8001330 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80011f8:	230f      	movs	r3, #15
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2302      	movs	r3, #2
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001208:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800120e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001212:	2103      	movs	r1, #3
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fcd9 	bl	8004bcc <HAL_RCC_ClockConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001220:	f000 f886 	bl	8001330 <Error_Handler>
  }
}
 8001224:	bf00      	nop
 8001226:	3750      	adds	r7, #80	; 0x50
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
  if (KEY_BUTTON_PIN == GPIO_Pin)
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d109      	bne.n	8001258 <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 8001244:	bf00      	nop
 8001246:	2000      	movs	r0, #0
 8001248:	f004 fec6 	bl	8005fd8 <BSP_PB_GetState>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f9      	bne.n	8001246 <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 8001252:	4b03      	ldr	r3, [pc, #12]	; (8001260 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
  }
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000025c 	.word	0x2000025c

08001264 <HAL_TIM_PeriodElapsedCallback>:
}

// This timer callback should trigger every 1/8000 Hz, and it emulates
// the idea of receiving a new sample peridiocally
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
//  BSP_LED_Toggle(LED4);
//  HAL_GPIO_TogglePin(SCOPE_CHECK_GPIO_Port, SCOPE_CHECK_Pin);

	// If we "miss" processing a sample, the new_sample_flag will still be
	// high on the trigger of the interrupt
	if (new_sample_flag == 1) {
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <HAL_TIM_PeriodElapsedCallback+0x16>
		ITM_Port32(30) = 10;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001276:	220a      	movs	r2, #10
 8001278:	601a      	str	r2, [r3, #0]
	}

	// Otherwise, go to the raw audio in memory and "retrieve" a new sample every timer period
	// set the new_sample_flag high
	if (sample_count < AUDIO_SIZE) {
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f24a 62aa 	movw	r2, #42666	; 0xa6aa
 8001282:	4293      	cmp	r3, r2
 8001284:	dc25      	bgt.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0x6e>
		newSampleL = (int16_t)raw_audio[sample_count];
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b21a      	sxth	r2, r3
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001298:	801a      	strh	r2, [r3, #0]
		newSampleR = (int16_t)(raw_audio[sample_count] >> 16);
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x88>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	141b      	asrs	r3, r3, #16
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80012ae:	801a      	strh	r2, [r3, #0]
		sample_count++;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80012b8:	6013      	str	r3, [r2, #0]

		if (sample_count >= AUDIO_SIZE) sample_count = 0;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f24a 62aa 	movw	r2, #42666	; 0xa6aa
 80012c2:	4293      	cmp	r3, r2
 80012c4:	dd02      	ble.n	80012cc <HAL_TIM_PeriodElapsedCallback+0x68>
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
		new_sample_flag = 1;
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
	}
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000260 	.word	0x20000260
 80012e4:	e0000078 	.word	0xe0000078
 80012e8:	20000264 	.word	0x20000264
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000268 	.word	0x20000268
 80012f4:	2000026a 	.word	0x2000026a

080012f8 <_write>:

int _write(int file, char* ptr, int len) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e009      	b.n	800131e <_write+0x26>
		ITM_SendChar(*ptr++);
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	60ba      	str	r2, [r7, #8]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fde4 	bl	8000ee0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	dbf1      	blt.n	800130a <_write+0x12>
	}
	return len;
 8001326:	687b      	ldr	r3, [r7, #4]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 8001334:	2002      	movs	r0, #2
 8001336:	f004 fddf 	bl	8005ef8 <BSP_LED_On>
  while(1)
 800133a:	e7fe      	b.n	800133a <Error_Handler+0xa>

0800133c <GPIOA_Init>:
  {
  }
}

static void GPIOA_Init(void){
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <GPIOA_Init+0x54>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <GPIOA_Init+0x54>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <GPIOA_Init+0x54>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin : SCOPE_CHECK_Pin */
	  GPIO_InitStruct.Pin = SCOPE_CHECK_Pin;
 800136c:	2302      	movs	r3, #2
 800136e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(SCOPE_CHECK_GPIO_Port, &GPIO_InitStruct);
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4619      	mov	r1, r3
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <GPIOA_Init+0x58>)
 8001382:	f001 f96f 	bl	8002664 <HAL_GPIO_Init>

}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400

08001398 <ProcessSampleMAC>:
		yZero = temp;

		return temp;
}

static int16_t ProcessSampleMAC(int16_t newsample, int16_t* input_history, int16_t* output_history) {
 8001398:	b480      	push	{r7}
 800139a:	b08f      	sub	sp, #60	; 0x3c
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	81fb      	strh	r3, [r7, #14]
		// set the new sample as the head
		input_history[0] = newsample;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	89fa      	ldrh	r2, [r7, #14]
 80013aa:	801a      	strh	r2, [r3, #0]

		// set up and do our convolution
		int32_t accumulator = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34

		__asm volatile ("SMLABB %[result], %[op1], %[op2], %[acc]"
					    : [result] "=r" (accumulator)
					    : [op1] "r" (2399), [op2] "r" (input_history[2]), [acc] "r" (accumulator)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3304      	adds	r3, #4
 80013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
		__asm volatile ("SMLABB %[result], %[op1], %[op2], %[acc]"
 80013b8:	f640 115f 	movw	r1, #2399	; 0x95f
 80013bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013be:	fb11 2303 	smlabb	r3, r1, r3, r2
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
					  );
		accumulator = __SMLAD(*((int32_t *)(filter_coeffs_input)), *((int32_t *)(input_history)), accumulator);
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <ProcessSampleMAC+0xe0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d2:	61f9      	str	r1, [r7, #28]
 80013d4:	61ba      	str	r2, [r7, #24]
 80013d6:	617b      	str	r3, [r7, #20]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	6979      	ldr	r1, [r7, #20]
 80013de:	fb23 1302 	smlad	r3, r3, r2, r1
 80013e2:	613b      	str	r3, [r7, #16]
  return(result);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
		accumulator = __SMLAD(*((int32_t *)(filter_coeffs_output)), *((int32_t *)(output_history)), accumulator);
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <ProcessSampleMAC+0xe4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80013fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001402:	fb23 1302 	smlad	r3, r3, r2, r1
 8001406:	623b      	str	r3, [r7, #32]
  return(result);
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	637b      	str	r3, [r7, #52]	; 0x34

		// Accumulation
		if (accumulator > 0x3FFFFFFF) {
 800140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001412:	db03      	blt.n	800141c <ProcessSampleMAC+0x84>
			accumulator = 0x3FFFFFFF;
 8001414:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
 800141a:	e006      	b.n	800142a <ProcessSampleMAC+0x92>
		} else if (accumulator < -0x40000000) {
 800141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001422:	da02      	bge.n	800142a <ProcessSampleMAC+0x92>
			accumulator = -0x40000000;
 8001424:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
		}

		int16_t temp = (int16_t)(accumulator >> 15);
 800142a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142c:	13db      	asrs	r3, r3, #15
 800142e:	867b      	strh	r3, [r7, #50]	; 0x32

		// shuffle things along for the next one?
		input_history[2] = input_history[1];
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3304      	adds	r3, #4
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800143a:	801a      	strh	r2, [r3, #0]
		input_history[1] = input_history[0];
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3302      	adds	r3, #2
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001446:	801a      	strh	r2, [r3, #0]
		output_history[2] = output_history[1];
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3304      	adds	r3, #4
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001452:	801a      	strh	r2, [r3, #0]
		output_history[1] = output_history[0];
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3302      	adds	r3, #2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800145e:	801a      	strh	r2, [r3, #0]
		output_history[0] = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001464:	801a      	strh	r2, [r3, #0]

		return temp;
 8001466:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
}
 800146a:	4618      	mov	r0, r3
 800146c:	373c      	adds	r7, #60	; 0x3c
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008
 800147c:	20000010 	.word	0x20000010

08001480 <CreateReverb>:
	int16_t temp = (int16_t)(sum >> 15);
	return temp;
}

static int16_t CreateReverb(int16_t newsample, int16_t alpha)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	460a      	mov	r2, r1
 800148a:	80fb      	strh	r3, [r7, #6]
 800148c:	4613      	mov	r3, r2
 800148e:	80bb      	strh	r3, [r7, #4]
	int32_t sum = (int32_t) newsample << 16;
 8001490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001494:	041b      	lsls	r3, r3, #16
 8001496:	617b      	str	r3, [r7, #20]
	int32_t oldval = (int32_t)(*pointer);
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <CreateReverb+0x88>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a0:	613b      	str	r3, [r7, #16]
	sum += oldval*((int32_t)alpha);
 80014a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4413      	add	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]

	if (sum > 0x3FFFFFFF) {
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b8:	db03      	blt.n	80014c2 <CreateReverb+0x42>
		sum = 0x3FFFFFFF;
 80014ba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e006      	b.n	80014d0 <CreateReverb+0x50>
	} else if (sum < -0x40000000) {
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80014c8:	da02      	bge.n	80014d0 <CreateReverb+0x50>
		sum = -0x40000000;
 80014ca:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80014ce:	617b      	str	r3, [r7, #20]
	}

	int16_t temp = (int16_t)(sum >> 15);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	13db      	asrs	r3, r3, #15
 80014d4:	81fb      	strh	r3, [r7, #14]
	*pointer = temp;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <CreateReverb+0x88>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	89fa      	ldrh	r2, [r7, #14]
 80014dc:	801a      	strh	r2, [r3, #0]
	pointer++;
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <CreateReverb+0x88>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3302      	adds	r3, #2
 80014e4:	4a08      	ldr	r2, [pc, #32]	; (8001508 <CreateReverb+0x88>)
 80014e6:	6013      	str	r3, [r2, #0]
	if (pointer == echoBuffer + DELAY)
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <CreateReverb+0x88>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <CreateReverb+0x8c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d102      	bne.n	80014f8 <CreateReverb+0x78>
		pointer = echoBuffer;
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <CreateReverb+0x88>)
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <CreateReverb+0x90>)
 80014f6:	601a      	str	r2, [r3, #0]

	return temp;
 80014f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	371c      	adds	r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	20000004 	.word	0x20000004
 800150c:	2000ee80 	.word	0x2000ee80
 8001510:	2000e6b0 	.word	0x2000e6b0

08001514 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

void BSP_AUDIO_OUT_TransferComplete_CallBack() {
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	ready = 1;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	20000598 	.word	0x20000598

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <HAL_MspInit+0x4c>)
 800153c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_MspInit+0x4c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800156a:	2007      	movs	r0, #7
 800156c:	f000 fc5c 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <HAL_I2C_MspInit+0x94>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d134      	bne.n	8001608 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_I2C_MspInit+0x98>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <HAL_I2C_MspInit+0x98>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_I2C_MspInit+0x98>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c0:	2312      	movs	r3, #18
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015cc:	2304      	movs	r3, #4
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	4810      	ldr	r0, [pc, #64]	; (8001618 <HAL_I2C_MspInit+0x9c>)
 80015d8:	f001 f844 	bl	8002664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_I2C_MspInit+0x98>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <HAL_I2C_MspInit+0x98>)
 80015e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_I2C_MspInit+0x98>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	201f      	movs	r0, #31
 80015fe:	f000 fc1e 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001602:	201f      	movs	r0, #31
 8001604:	f000 fc37 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40005400 	.word	0x40005400
 8001614:	40023800 	.word	0x40023800
 8001618:	40020400 	.word	0x40020400

0800161c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0c      	ldr	r2, [pc, #48]	; (800165c <HAL_I2C_MspDeInit+0x40>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d111      	bne.n	8001652 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_I2C_MspDeInit+0x44>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_I2C_MspDeInit+0x44>)
 8001634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 800163a:	2140      	movs	r1, #64	; 0x40
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <HAL_I2C_MspDeInit+0x48>)
 800163e:	f001 f995 	bl	800296c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8001642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <HAL_I2C_MspDeInit+0x48>)
 8001648:	f001 f990 	bl	800296c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800164c:	201f      	movs	r0, #31
 800164e:	f000 fc20 	bl	8001e92 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40005400 	.word	0x40005400
 8001660:	40023800 	.word	0x40023800
 8001664:	40020400 	.word	0x40020400

08001668 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08e      	sub	sp, #56	; 0x38
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a59      	ldr	r2, [pc, #356]	; (80017ec <HAL_I2S_MspInit+0x184>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d15b      	bne.n	8001742 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
 800168e:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a57      	ldr	r2, [pc, #348]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	623b      	str	r3, [r7, #32]
 80016a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b4e      	ldr	r3, [pc, #312]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016de:	2304      	movs	r3, #4
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80016ee:	2306      	movs	r3, #6
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	4619      	mov	r1, r3
 80016f8:	483e      	ldr	r0, [pc, #248]	; (80017f4 <HAL_I2S_MspInit+0x18c>)
 80016fa:	f000 ffb3 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80016fe:	2308      	movs	r3, #8
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800170e:	2305      	movs	r3, #5
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	4836      	ldr	r0, [pc, #216]	; (80017f4 <HAL_I2S_MspInit+0x18c>)
 800171a:	f000 ffa3 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800171e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001730:	2305      	movs	r3, #5
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	482f      	ldr	r0, [pc, #188]	; (80017f8 <HAL_I2S_MspInit+0x190>)
 800173c:	f000 ff92 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001740:	e04f      	b.n	80017e2 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a2d      	ldr	r2, [pc, #180]	; (80017fc <HAL_I2S_MspInit+0x194>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d14a      	bne.n	80017e2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	4a26      	ldr	r2, [pc, #152]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 8001756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6313      	str	r3, [r2, #48]	; 0x30
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6313      	str	r3, [r2, #48]	; 0x30
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_I2S_MspInit+0x188>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017a0:	2310      	movs	r3, #16
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017b0:	2306      	movs	r3, #6
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b8:	4619      	mov	r1, r3
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <HAL_I2S_MspInit+0x198>)
 80017bc:	f000 ff52 	bl	8002664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80017c0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d2:	2306      	movs	r3, #6
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <HAL_I2S_MspInit+0x18c>)
 80017de:	f000 ff41 	bl	8002664 <HAL_GPIO_Init>
}
 80017e2:	bf00      	nop
 80017e4:	3738      	adds	r7, #56	; 0x38
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40003800 	.word	0x40003800
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40003c00 	.word	0x40003c00
 8001800:	40020000 	.word	0x40020000

08001804 <HAL_TIM_Base_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_TIM_Base_MspInit+0x3c>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_TIM_Base_MspInit+0x3c>)
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_TIM_Base_MspInit+0x3c>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 4, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2104      	movs	r1, #4
 800182c:	201d      	movs	r0, #29
 800182e:	f000 fb06 	bl	8001e3e <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8001832:	201d      	movs	r0, #29
 8001834:	f000 fb1f 	bl	8001e76 <HAL_NVIC_EnableIRQ>
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800

08001844 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler+0x4>

0800185e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler+0x4>

0800186a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001898:	f000 f98e 	bl	8001bb8 <HAL_IncTick>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f001 f977 	bl	8002b98 <HAL_GPIO_EXTI_IRQHandler>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}

080018ae <EXTI4_IRQHandler>:
  * @brief  This function handles EXTI4_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT1_PIN);
 80018b2:	2010      	movs	r0, #16
 80018b4:	f001 f970 	bl	8002b98 <HAL_GPIO_EXTI_IRQHandler>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <DMA1_Stream7_IRQHandler+0x14>)
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fc63 	bl	8002190 <HAL_DMA_IRQHandler>
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000efbc 	.word	0x2000efbc

080018d4 <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles I2S IT Stream interrupt request.
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <DMA1_Stream3_IRQHandler+0x14>)
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fc57 	bl	8002190 <HAL_DMA_IRQHandler>
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000f004 	.word	0x2000f004

080018ec <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <TIM3_IRQHandler+0x10>)
 80018f2:	f003 fd97 	bl	8005424 <HAL_TIM_IRQHandler>
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000eec8 	.word	0x2000eec8

08001900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
	return 1;
 8001904:	2301      	movs	r3, #1
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_kill>:

int _kill(int pid, int sig)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800191a:	f004 fef3 	bl	8006704 <__errno>
 800191e:	4603      	mov	r3, r0
 8001920:	2216      	movs	r2, #22
 8001922:	601a      	str	r2, [r3, #0]
	return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_exit>:

void _exit (int status)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ffe7 	bl	8001910 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001942:	e7fe      	b.n	8001942 <_exit+0x12>

08001944 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e00a      	b.n	800196c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001956:	f3af 8000 	nop.w
 800195a:	4601      	mov	r1, r0
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	60ba      	str	r2, [r7, #8]
 8001962:	b2ca      	uxtb	r2, r1
 8001964:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf0      	blt.n	8001956 <_read+0x12>
	}

return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_close>:
	}
	return len;
}

int _close(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	return -1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a6:	605a      	str	r2, [r3, #4]
	return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
	return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f004 fe74 	bl	8006704 <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20020000 	.word	0x20020000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	200005a8 	.word	0x200005a8
 8001a50:	2000f060 	.word	0x2000f060

08001a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <SystemInit+0x60>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <SystemInit+0x60>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <SystemInit+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <SystemInit+0x64>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <SystemInit+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <SystemInit+0x64>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <SystemInit+0x64>)
 8001a80:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <SystemInit+0x64>)
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <SystemInit+0x68>)
 8001a8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <SystemInit+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <SystemInit+0x64>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <SystemInit+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <SystemInit+0x60>)
 8001aa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa8:	609a      	str	r2, [r3, #8]
#endif
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	24003010 	.word	0x24003010

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ac6:	490e      	ldr	r1, [pc, #56]	; (8001b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001adc:	4c0b      	ldr	r4, [pc, #44]	; (8001b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aea:	f7ff ffb3 	bl	8001a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f004 fe0f 	bl	8006710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7ff fa1d 	bl	8000f30 <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b00:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001b04:	0800959c 	.word	0x0800959c
  ldr r2, =_sbss
 8001b08:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001b0c:	2000f05c 	.word	0x2000f05c

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f973 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fcf0 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f999 	bl	8001eae <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f953 	bl	8001e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000018 	.word	0x20000018
 8001bb0:	20000020 	.word	0x20000020
 8001bb4:	2000001c 	.word	0x2000001c

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000020 	.word	0x20000020
 8001bdc:	2000ef14 	.word	0x2000ef14

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	2000ef14 	.word	0x2000ef14

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000020 	.word	0x20000020

08001c40 <__NVIC_SetPriorityGrouping>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	; (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_DisableIRQ>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db12      	blt.n	8001d18 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	490a      	ldr	r1, [pc, #40]	; (8001d24 <__NVIC_DisableIRQ+0x44>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	3320      	adds	r3, #32
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d0c:	f3bf 8f4f 	dsb	sy
}
 8001d10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d12:	f3bf 8f6f 	isb	sy
}
 8001d16:	bf00      	nop
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <SysTick_Config>:
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff8e 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff05 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff1a 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff8e 	bl	8001d7c <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5d 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff0d 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff1d 	bl	8001ce0 <__NVIC_DisableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff94 	bl	8001de4 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff fe84 	bl	8001be0 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e099      	b.n	8002018 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f04:	e00f      	b.n	8001f26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f06:	f7ff fe6b 	bl	8001be0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d908      	bls.n	8001f26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2220      	movs	r2, #32
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e078      	b.n	8002018 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e8      	bne.n	8001f06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <HAL_DMA_Init+0x158>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d107      	bne.n	8001f90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f023 0307 	bic.w	r3, r3, #7
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d117      	bne.n	8001fea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00e      	beq.n	8001fea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 facd 	bl	800256c <DMA_CheckFifoParam>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e016      	b.n	8002018 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fa84 	bl	8002500 <DMA_CalcBaseAndBitshift>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	223f      	movs	r2, #63	; 0x3f
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	f010803f 	.word	0xf010803f

08002024 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e050      	b.n	80020d8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d101      	bne.n	8002046 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002042:	2302      	movs	r3, #2
 8002044:	e048      	b.n	80020d8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0201 	bic.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2200      	movs	r2, #0
 8002064:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2221      	movs	r2, #33	; 0x21
 8002084:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fa3a 	bl	8002500 <DMA_CalcBaseAndBitshift>
 800208c:	4603      	mov	r3, r0
 800208e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	223f      	movs	r2, #63	; 0x3f
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_DMA_Start_IT+0x26>
 8002102:	2302      	movs	r3, #2
 8002104:	e040      	b.n	8002188 <HAL_DMA_Start_IT+0xa8>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d12f      	bne.n	800217a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f9b8 	bl	80024a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	223f      	movs	r2, #63	; 0x3f
 800213a:	409a      	lsls	r2, r3
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0216 	orr.w	r2, r2, #22
 800214e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0208 	orr.w	r2, r2, #8
 8002166:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e005      	b.n	8002186 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002182:	2302      	movs	r3, #2
 8002184:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002186:	7dfb      	ldrb	r3, [r7, #23]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800219c:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_DMA_IRQHandler+0x258>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a92      	ldr	r2, [pc, #584]	; (80023ec <HAL_DMA_IRQHandler+0x25c>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0a9b      	lsrs	r3, r3, #10
 80021a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	2208      	movs	r2, #8
 80021bc:	409a      	lsls	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01a      	beq.n	80021fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0204 	bic.w	r2, r2, #4
 80021e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	2208      	movs	r2, #8
 80021ea:	409a      	lsls	r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f043 0201 	orr.w	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	2201      	movs	r2, #1
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2201      	movs	r2, #1
 8002220:	409a      	lsls	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f043 0202 	orr.w	r2, r3, #2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	2204      	movs	r2, #4
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d012      	beq.n	8002268 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00b      	beq.n	8002268 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	2204      	movs	r2, #4
 8002256:	409a      	lsls	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f043 0204 	orr.w	r2, r3, #4
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	2210      	movs	r2, #16
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d043      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d03c      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	2210      	movs	r2, #16
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d018      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d108      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d024      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	4798      	blx	r3
 80022be:	e01f      	b.n	8002300 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01b      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
 80022d0:	e016      	b.n	8002300 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0208 	bic.w	r2, r2, #8
 80022ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	2220      	movs	r2, #32
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 808e 	beq.w	800242e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8086 	beq.w	800242e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2220      	movs	r2, #32
 8002328:	409a      	lsls	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b05      	cmp	r3, #5
 8002338:	d136      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0216 	bic.w	r2, r2, #22
 8002348:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002358:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <HAL_DMA_IRQHandler+0x1da>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0208 	bic.w	r2, r2, #8
 8002378:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	223f      	movs	r2, #63	; 0x3f
 8002380:	409a      	lsls	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	2b00      	cmp	r3, #0
 800239c:	d07d      	beq.n	800249a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
        }
        return;
 80023a6:	e078      	b.n	800249a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01c      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d030      	beq.n	800242e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
 80023d4:	e02b      	b.n	800242e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d027      	beq.n	800242e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
 80023e6:	e022      	b.n	800242e <HAL_DMA_IRQHandler+0x29e>
 80023e8:	20000018 	.word	0x20000018
 80023ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0210 	bic.w	r2, r2, #16
 800240c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	2b00      	cmp	r3, #0
 8002434:	d032      	beq.n	800249c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d022      	beq.n	8002488 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2205      	movs	r2, #5
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0201 	bic.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3301      	adds	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	429a      	cmp	r2, r3
 8002464:	d307      	bcc.n	8002476 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f2      	bne.n	800245a <HAL_DMA_IRQHandler+0x2ca>
 8002474:	e000      	b.n	8002478 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002476:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
 8002498:	e000      	b.n	800249c <HAL_DMA_IRQHandler+0x30c>
        return;
 800249a:	bf00      	nop
    }
  }
}
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop

080024a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b40      	cmp	r3, #64	; 0x40
 80024d0:	d108      	bne.n	80024e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024e2:	e007      	b.n	80024f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	60da      	str	r2, [r3, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3b10      	subs	r3, #16
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <DMA_CalcBaseAndBitshift+0x64>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <DMA_CalcBaseAndBitshift+0x68>)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d909      	bls.n	8002542 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002536:	f023 0303 	bic.w	r3, r3, #3
 800253a:	1d1a      	adds	r2, r3, #4
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	659a      	str	r2, [r3, #88]	; 0x58
 8002540:	e007      	b.n	8002552 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	aaaaaaab 	.word	0xaaaaaaab
 8002568:	08009138 	.word	0x08009138

0800256c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d11f      	bne.n	80025c6 <DMA_CheckFifoParam+0x5a>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d856      	bhi.n	800263a <DMA_CheckFifoParam+0xce>
 800258c:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <DMA_CheckFifoParam+0x28>)
 800258e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002592:	bf00      	nop
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025b7 	.word	0x080025b7
 800259c:	080025a5 	.word	0x080025a5
 80025a0:	0800263b 	.word	0x0800263b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d046      	beq.n	800263e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b4:	e043      	b.n	800263e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025be:	d140      	bne.n	8002642 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c4:	e03d      	b.n	8002642 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ce:	d121      	bne.n	8002614 <DMA_CheckFifoParam+0xa8>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d837      	bhi.n	8002646 <DMA_CheckFifoParam+0xda>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <DMA_CheckFifoParam+0x70>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	080025ed 	.word	0x080025ed
 80025e0:	080025f3 	.word	0x080025f3
 80025e4:	080025ed 	.word	0x080025ed
 80025e8:	08002605 	.word	0x08002605
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	e030      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d025      	beq.n	800264a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002602:	e022      	b.n	800264a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800260c:	d11f      	bne.n	800264e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002612:	e01c      	b.n	800264e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d903      	bls.n	8002622 <DMA_CheckFifoParam+0xb6>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d003      	beq.n	8002628 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002620:	e018      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
      break;
 8002626:	e015      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00e      	beq.n	8002652 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      break;
 8002638:	e00b      	b.n	8002652 <DMA_CheckFifoParam+0xe6>
      break;
 800263a:	bf00      	nop
 800263c:	e00a      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 800263e:	bf00      	nop
 8002640:	e008      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
 8002644:	e006      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e004      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
 800264c:	e002      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;   
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
    }
  } 
  
  return status; 
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e159      	b.n	8002934 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 8148 	bne.w	800292e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d005      	beq.n	80026b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d130      	bne.n	8002718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0201 	and.w	r2, r3, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b03      	cmp	r3, #3
 8002722:	d017      	beq.n	8002754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a2 	beq.w	800292e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b57      	ldr	r3, [pc, #348]	; (800294c <HAL_GPIO_Init+0x2e8>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	4a56      	ldr	r2, [pc, #344]	; (800294c <HAL_GPIO_Init+0x2e8>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f8:	6453      	str	r3, [r2, #68]	; 0x44
 80027fa:	4b54      	ldr	r3, [pc, #336]	; (800294c <HAL_GPIO_Init+0x2e8>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002806:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_GPIO_Init+0x2ec>)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a49      	ldr	r2, [pc, #292]	; (8002954 <HAL_GPIO_Init+0x2f0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d019      	beq.n	8002866 <HAL_GPIO_Init+0x202>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a48      	ldr	r2, [pc, #288]	; (8002958 <HAL_GPIO_Init+0x2f4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_GPIO_Init+0x1fe>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a47      	ldr	r2, [pc, #284]	; (800295c <HAL_GPIO_Init+0x2f8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00d      	beq.n	800285e <HAL_GPIO_Init+0x1fa>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a46      	ldr	r2, [pc, #280]	; (8002960 <HAL_GPIO_Init+0x2fc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <HAL_GPIO_Init+0x1f6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a45      	ldr	r2, [pc, #276]	; (8002964 <HAL_GPIO_Init+0x300>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_GPIO_Init+0x1f2>
 8002852:	2304      	movs	r3, #4
 8002854:	e008      	b.n	8002868 <HAL_GPIO_Init+0x204>
 8002856:	2307      	movs	r3, #7
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x204>
 800285a:	2303      	movs	r3, #3
 800285c:	e004      	b.n	8002868 <HAL_GPIO_Init+0x204>
 800285e:	2302      	movs	r3, #2
 8002860:	e002      	b.n	8002868 <HAL_GPIO_Init+0x204>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_GPIO_Init+0x204>
 8002866:	2300      	movs	r3, #0
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	f002 0203 	and.w	r2, r2, #3
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	4093      	lsls	r3, r2
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002878:	4935      	ldr	r1, [pc, #212]	; (8002950 <HAL_GPIO_Init+0x2ec>)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	3302      	adds	r3, #2
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002886:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028aa:	4a2f      	ldr	r2, [pc, #188]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028b0:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d4:	4a24      	ldr	r2, [pc, #144]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028da:	4b23      	ldr	r3, [pc, #140]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fe:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002928:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <HAL_GPIO_Init+0x304>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3301      	adds	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	f67f aea2 	bls.w	8002680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	40013800 	.word	0x40013800
 8002954:	40020000 	.word	0x40020000
 8002958:	40020400 	.word	0x40020400
 800295c:	40020800 	.word	0x40020800
 8002960:	40020c00 	.word	0x40020c00
 8002964:	40021000 	.word	0x40021000
 8002968:	40013c00 	.word	0x40013c00

0800296c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	e0bb      	b.n	8002b00 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002988:	2201      	movs	r2, #1
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	429a      	cmp	r2, r3
 80029a0:	f040 80ab 	bne.w	8002afa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80029a4:	4a5c      	ldr	r2, [pc, #368]	; (8002b18 <HAL_GPIO_DeInit+0x1ac>)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a54      	ldr	r2, [pc, #336]	; (8002b1c <HAL_GPIO_DeInit+0x1b0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d019      	beq.n	8002a02 <HAL_GPIO_DeInit+0x96>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a53      	ldr	r2, [pc, #332]	; (8002b20 <HAL_GPIO_DeInit+0x1b4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_GPIO_DeInit+0x92>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a52      	ldr	r2, [pc, #328]	; (8002b24 <HAL_GPIO_DeInit+0x1b8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00d      	beq.n	80029fa <HAL_GPIO_DeInit+0x8e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a51      	ldr	r2, [pc, #324]	; (8002b28 <HAL_GPIO_DeInit+0x1bc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <HAL_GPIO_DeInit+0x8a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a50      	ldr	r2, [pc, #320]	; (8002b2c <HAL_GPIO_DeInit+0x1c0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_GPIO_DeInit+0x86>
 80029ee:	2304      	movs	r3, #4
 80029f0:	e008      	b.n	8002a04 <HAL_GPIO_DeInit+0x98>
 80029f2:	2307      	movs	r3, #7
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_DeInit+0x98>
 80029f6:	2303      	movs	r3, #3
 80029f8:	e004      	b.n	8002a04 <HAL_GPIO_DeInit+0x98>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e002      	b.n	8002a04 <HAL_GPIO_DeInit+0x98>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_GPIO_DeInit+0x98>
 8002a02:	2300      	movs	r3, #0
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	f002 0203 	and.w	r2, r2, #3
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	4093      	lsls	r3, r2
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d132      	bne.n	8002a7a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a14:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <HAL_GPIO_DeInit+0x1c4>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	4944      	ldr	r1, [pc, #272]	; (8002b30 <HAL_GPIO_DeInit+0x1c4>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002a22:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <HAL_GPIO_DeInit+0x1c4>)
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	4941      	ldr	r1, [pc, #260]	; (8002b30 <HAL_GPIO_DeInit+0x1c4>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002a30:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <HAL_GPIO_DeInit+0x1c4>)
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	493d      	ldr	r1, [pc, #244]	; (8002b30 <HAL_GPIO_DeInit+0x1c4>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002a3e:	4b3c      	ldr	r3, [pc, #240]	; (8002b30 <HAL_GPIO_DeInit+0x1c4>)
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	493a      	ldr	r1, [pc, #232]	; (8002b30 <HAL_GPIO_DeInit+0x1c4>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002a5c:	4a2e      	ldr	r2, [pc, #184]	; (8002b18 <HAL_GPIO_DeInit+0x1ac>)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	482a      	ldr	r0, [pc, #168]	; (8002b18 <HAL_GPIO_DeInit+0x1ac>)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	400a      	ands	r2, r1
 8002a74:	3302      	adds	r3, #2
 8002a76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2103      	movs	r1, #3
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	08d2      	lsrs	r2, r2, #3
 8002ab0:	4019      	ands	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3208      	adds	r2, #8
 8002ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2103      	movs	r1, #3
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	401a      	ands	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	401a      	ands	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2103      	movs	r1, #3
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	401a      	ands	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b0f      	cmp	r3, #15
 8002b04:	f67f af40 	bls.w	8002988 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e001      	b.n	8002b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fb3c 	bl	8001234 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40013c00 	.word	0x40013c00

08002bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e12b      	b.n	8002e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe fcc4 	bl	800157c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c2c:	f002 f9a2 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
 8002c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4a81      	ldr	r2, [pc, #516]	; (8002e3c <HAL_I2C_Init+0x274>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d807      	bhi.n	8002c4c <HAL_I2C_Init+0x84>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a80      	ldr	r2, [pc, #512]	; (8002e40 <HAL_I2C_Init+0x278>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	bf94      	ite	ls
 8002c44:	2301      	movls	r3, #1
 8002c46:	2300      	movhi	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e006      	b.n	8002c5a <HAL_I2C_Init+0x92>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a7d      	ldr	r2, [pc, #500]	; (8002e44 <HAL_I2C_Init+0x27c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	bf94      	ite	ls
 8002c54:	2301      	movls	r3, #1
 8002c56:	2300      	movhi	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0e7      	b.n	8002e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4a78      	ldr	r2, [pc, #480]	; (8002e48 <HAL_I2C_Init+0x280>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0c9b      	lsrs	r3, r3, #18
 8002c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4a6a      	ldr	r2, [pc, #424]	; (8002e3c <HAL_I2C_Init+0x274>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d802      	bhi.n	8002c9c <HAL_I2C_Init+0xd4>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	e009      	b.n	8002cb0 <HAL_I2C_Init+0xe8>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	4a69      	ldr	r2, [pc, #420]	; (8002e4c <HAL_I2C_Init+0x284>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	3301      	adds	r3, #1
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	495c      	ldr	r1, [pc, #368]	; (8002e3c <HAL_I2C_Init+0x274>)
 8002ccc:	428b      	cmp	r3, r1
 8002cce:	d819      	bhi.n	8002d04 <HAL_I2C_Init+0x13c>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1e59      	subs	r1, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cde:	1c59      	adds	r1, r3, #1
 8002ce0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ce4:	400b      	ands	r3, r1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_I2C_Init+0x138>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1e59      	subs	r1, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfe:	e051      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d00:	2304      	movs	r3, #4
 8002d02:	e04f      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d111      	bne.n	8002d30 <HAL_I2C_Init+0x168>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1e58      	subs	r0, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	440b      	add	r3, r1
 8002d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e012      	b.n	8002d56 <HAL_I2C_Init+0x18e>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1e58      	subs	r0, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	0099      	lsls	r1, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Init+0x196>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e022      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10e      	bne.n	8002d84 <HAL_I2C_Init+0x1bc>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1e58      	subs	r0, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6859      	ldr	r1, [r3, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	440b      	add	r3, r1
 8002d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d82:	e00f      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1e58      	subs	r0, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	0099      	lsls	r1, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	6809      	ldr	r1, [r1, #0]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6911      	ldr	r1, [r2, #16]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68d2      	ldr	r2, [r2, #12]
 8002dde:	4311      	orrs	r1, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	000186a0 	.word	0x000186a0
 8002e40:	001e847f 	.word	0x001e847f
 8002e44:	003d08ff 	.word	0x003d08ff
 8002e48:	431bde83 	.word	0x431bde83
 8002e4c:	10624dd3 	.word	0x10624dd3

08002e50 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e021      	b.n	8002ea6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2224      	movs	r2, #36	; 0x24
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe fbce 	bl	800161c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	4608      	mov	r0, r1
 8002eba:	4611      	mov	r1, r2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	817b      	strh	r3, [r7, #10]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	813b      	strh	r3, [r7, #8]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eca:	f7fe fe89 	bl	8001be0 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	f040 80d9 	bne.w	8003090 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	2319      	movs	r3, #25
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	496d      	ldr	r1, [pc, #436]	; (800309c <HAL_I2C_Mem_Write+0x1ec>)
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fc8d 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0cc      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_I2C_Mem_Write+0x56>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e0c5      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d007      	beq.n	8002f2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2221      	movs	r2, #33	; 0x21
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2240      	movs	r2, #64	; 0x40
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a4d      	ldr	r2, [pc, #308]	; (80030a0 <HAL_I2C_Mem_Write+0x1f0>)
 8002f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f6e:	88f8      	ldrh	r0, [r7, #6]
 8002f70:	893a      	ldrh	r2, [r7, #8]
 8002f72:	8979      	ldrh	r1, [r7, #10]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fac4 	bl	800350c <I2C_RequestMemoryWrite>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d052      	beq.n	8003030 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e081      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fd0e 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00d      	beq.n	8002fba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d107      	bne.n	8002fb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e06b      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d11b      	bne.n	8003030 <HAL_I2C_Mem_Write+0x180>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d017      	beq.n	8003030 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1aa      	bne.n	8002f8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fcfa 	bl	8003a36 <I2C_WaitOnBTFFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00d      	beq.n	8003064 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	2b04      	cmp	r3, #4
 800304e:	d107      	bne.n	8003060 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e016      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	00100002 	.word	0x00100002
 80030a0:	ffff0000 	.word	0xffff0000

080030a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08c      	sub	sp, #48	; 0x30
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	460b      	mov	r3, r1
 80030b8:	813b      	strh	r3, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030be:	f7fe fd8f 	bl	8001be0 <HAL_GetTick>
 80030c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	f040 8208 	bne.w	80034e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2319      	movs	r3, #25
 80030d8:	2201      	movs	r2, #1
 80030da:	497b      	ldr	r1, [pc, #492]	; (80032c8 <HAL_I2C_Mem_Read+0x224>)
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fb93 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
 80030ea:	e1fb      	b.n	80034e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_Mem_Read+0x56>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e1f4      	b.n	80034e4 <HAL_I2C_Mem_Read+0x440>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d007      	beq.n	8003120 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800312e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2222      	movs	r2, #34	; 0x22
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2240      	movs	r2, #64	; 0x40
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003150:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a5b      	ldr	r2, [pc, #364]	; (80032cc <HAL_I2C_Mem_Read+0x228>)
 8003160:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003162:	88f8      	ldrh	r0, [r7, #6]
 8003164:	893a      	ldrh	r2, [r7, #8]
 8003166:	8979      	ldrh	r1, [r7, #10]
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	4603      	mov	r3, r0
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fa60 	bl	8003638 <I2C_RequestMemoryRead>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e1b0      	b.n	80034e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	d113      	bne.n	80031b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e184      	b.n	80034bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d11b      	bne.n	80031f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e164      	b.n	80034bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d11b      	bne.n	8003232 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003208:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003218:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	e144      	b.n	80034bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003248:	e138      	b.n	80034bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	2b03      	cmp	r3, #3
 8003250:	f200 80f1 	bhi.w	8003436 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	2b01      	cmp	r3, #1
 800325a:	d123      	bne.n	80032a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800325c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fc29 	bl	8003ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e139      	b.n	80034e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032a2:	e10b      	b.n	80034bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d14e      	bne.n	800334a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b2:	2200      	movs	r2, #0
 80032b4:	4906      	ldr	r1, [pc, #24]	; (80032d0 <HAL_I2C_Mem_Read+0x22c>)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 faa6 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e10e      	b.n	80034e4 <HAL_I2C_Mem_Read+0x440>
 80032c6:	bf00      	nop
 80032c8:	00100002 	.word	0x00100002
 80032cc:	ffff0000 	.word	0xffff0000
 80032d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003348:	e0b8      	b.n	80034bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	2200      	movs	r2, #0
 8003352:	4966      	ldr	r1, [pc, #408]	; (80034ec <HAL_I2C_Mem_Read+0x448>)
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fa57 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0bf      	b.n	80034e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	2200      	movs	r2, #0
 80033ae:	494f      	ldr	r1, [pc, #316]	; (80034ec <HAL_I2C_Mem_Read+0x448>)
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fa29 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e091      	b.n	80034e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003434:	e042      	b.n	80034bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003438:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fb3c 	bl	8003ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e04c      	b.n	80034e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d118      	bne.n	80034bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f47f aec2 	bne.w	800324a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e000      	b.n	80034e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3728      	adds	r7, #40	; 0x28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	00010004 	.word	0x00010004

080034f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fe:	b2db      	uxtb	r3, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	4608      	mov	r0, r1
 8003516:	4611      	mov	r1, r2
 8003518:	461a      	mov	r2, r3
 800351a:	4603      	mov	r3, r0
 800351c:	817b      	strh	r3, [r7, #10]
 800351e:	460b      	mov	r3, r1
 8003520:	813b      	strh	r3, [r7, #8]
 8003522:	4613      	mov	r3, r2
 8003524:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	2200      	movs	r2, #0
 800353e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f960 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355c:	d103      	bne.n	8003566 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e05f      	b.n	800362a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800356a:	897b      	ldrh	r3, [r7, #10]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	6a3a      	ldr	r2, [r7, #32]
 800357e:	492d      	ldr	r1, [pc, #180]	; (8003634 <I2C_RequestMemoryWrite+0x128>)
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f998 	bl	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e04c      	b.n	800362a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a8:	6a39      	ldr	r1, [r7, #32]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fa02 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d107      	bne.n	80035ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e02b      	b.n	800362a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035d8:	893b      	ldrh	r3, [r7, #8]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	611a      	str	r2, [r3, #16]
 80035e2:	e021      	b.n	8003628 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035e4:	893b      	ldrh	r3, [r7, #8]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f4:	6a39      	ldr	r1, [r7, #32]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f9dc 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2b04      	cmp	r3, #4
 8003608:	d107      	bne.n	800361a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e005      	b.n	800362a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800361e:	893b      	ldrh	r3, [r7, #8]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	00010002 	.word	0x00010002

08003638 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	4608      	mov	r0, r1
 8003642:	4611      	mov	r1, r2
 8003644:	461a      	mov	r2, r3
 8003646:	4603      	mov	r3, r0
 8003648:	817b      	strh	r3, [r7, #10]
 800364a:	460b      	mov	r3, r1
 800364c:	813b      	strh	r3, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003660:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003670:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	2200      	movs	r2, #0
 800367a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f8c2 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003698:	d103      	bne.n	80036a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e0aa      	b.n	80037fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036a6:	897b      	ldrh	r3, [r7, #10]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	6a3a      	ldr	r2, [r7, #32]
 80036ba:	4952      	ldr	r1, [pc, #328]	; (8003804 <I2C_RequestMemoryRead+0x1cc>)
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f8fa 	bl	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e097      	b.n	80037fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f964 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d107      	bne.n	800370a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003708:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e076      	b.n	80037fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003714:	893b      	ldrh	r3, [r7, #8]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	611a      	str	r2, [r3, #16]
 800371e:	e021      	b.n	8003764 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003720:	893b      	ldrh	r3, [r7, #8]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	b29b      	uxth	r3, r3
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	6a39      	ldr	r1, [r7, #32]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f93e 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	2b04      	cmp	r3, #4
 8003744:	d107      	bne.n	8003756 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003754:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e050      	b.n	80037fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800375a:	893b      	ldrh	r3, [r7, #8]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003766:	6a39      	ldr	r1, [r7, #32]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f923 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b04      	cmp	r3, #4
 800377a:	d107      	bne.n	800378c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e035      	b.n	80037fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800379e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f82b 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c6:	d103      	bne.n	80037d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e013      	b.n	80037fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037d4:	897b      	ldrh	r3, [r7, #10]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	6a3a      	ldr	r2, [r7, #32]
 80037e8:	4906      	ldr	r1, [pc, #24]	; (8003804 <I2C_RequestMemoryRead+0x1cc>)
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f863 	bl	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	00010002 	.word	0x00010002

08003808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003818:	e025      	b.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d021      	beq.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fe f9dd 	bl	8001be0 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d116      	bne.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f043 0220 	orr.w	r2, r3, #32
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e023      	b.n	80038ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10d      	bne.n	800388c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	43da      	mvns	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4013      	ands	r3, r2
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	bf0c      	ite	eq
 8003882:	2301      	moveq	r3, #1
 8003884:	2300      	movne	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	e00c      	b.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	43da      	mvns	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4013      	ands	r3, r2
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d0b6      	beq.n	800381a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c4:	e051      	b.n	800396a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d4:	d123      	bne.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f043 0204 	orr.w	r2, r3, #4
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e046      	b.n	80039ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d021      	beq.n	800396a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fe f95b 	bl	8001be0 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d116      	bne.n	800396a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e020      	b.n	80039ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	0c1b      	lsrs	r3, r3, #16
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d10c      	bne.n	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	43da      	mvns	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4013      	ands	r3, r2
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	bf14      	ite	ne
 8003986:	2301      	movne	r3, #1
 8003988:	2300      	moveq	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	e00b      	b.n	80039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	43da      	mvns	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d18d      	bne.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c0:	e02d      	b.n	8003a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f8ce 	bl	8003b64 <I2C_IsAcknowledgeFailed>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e02d      	b.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d021      	beq.n	8003a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039da:	f7fe f901 	bl	8001be0 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d302      	bcc.n	80039f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d116      	bne.n	8003a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f043 0220 	orr.w	r2, r3, #32
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e007      	b.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	2b80      	cmp	r3, #128	; 0x80
 8003a2a:	d1ca      	bne.n	80039c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a42:	e02d      	b.n	8003aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f88d 	bl	8003b64 <I2C_IsAcknowledgeFailed>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e02d      	b.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d021      	beq.n	8003aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5c:	f7fe f8c0 	bl	8001be0 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d116      	bne.n	8003aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f043 0220 	orr.w	r2, r3, #32
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e007      	b.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d1ca      	bne.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ac4:	e042      	b.n	8003b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d119      	bne.n	8003b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0210 	mvn.w	r2, #16
 8003adc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e029      	b.n	8003b5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b08:	f7fe f86a 	bl	8001be0 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d116      	bne.n	8003b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e007      	b.n	8003b5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d1b5      	bne.n	8003ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7a:	d11b      	bne.n	8003bb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f043 0204 	orr.w	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e128      	b.n	8003e28 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a90      	ldr	r2, [pc, #576]	; (8003e30 <HAL_I2S_Init+0x26c>)
 8003bee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fd fd39 	bl	8001668 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c0c:	f023 030f 	bic.w	r3, r3, #15
 8003c10:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2202      	movs	r2, #2
 8003c18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d060      	beq.n	8003ce4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d102      	bne.n	8003c30 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	e001      	b.n	8003c34 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c30:	2320      	movs	r3, #32
 8003c32:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d802      	bhi.n	8003c42 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c42:	2001      	movs	r0, #1
 8003c44:	f001 fadc 	bl	8005200 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c48:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c52:	d125      	bne.n	8003ca0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d010      	beq.n	8003c7e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	461a      	mov	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	3305      	adds	r3, #5
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	e01f      	b.n	8003cbe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	461a      	mov	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	3305      	adds	r3, #5
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	e00e      	b.n	8003cbe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cba:	3305      	adds	r3, #5
 8003cbc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4a5c      	ldr	r2, [pc, #368]	; (8003e34 <HAL_I2S_Init+0x270>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	08db      	lsrs	r3, r3, #3
 8003cc8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	e003      	b.n	8003cec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d902      	bls.n	8003cf8 <HAL_I2S_Init+0x134>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2bff      	cmp	r3, #255	; 0xff
 8003cf6:	d907      	bls.n	8003d08 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	f043 0210 	orr.w	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e08f      	b.n	8003e28 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	ea42 0103 	orr.w	r1, r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d26:	f023 030f 	bic.w	r3, r3, #15
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6851      	ldr	r1, [r2, #4]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6892      	ldr	r2, [r2, #8]
 8003d32:	4311      	orrs	r1, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68d2      	ldr	r2, [r2, #12]
 8003d38:	4311      	orrs	r1, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6992      	ldr	r2, [r2, #24]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d161      	bne.n	8003e18 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a38      	ldr	r2, [pc, #224]	; (8003e38 <HAL_I2S_Init+0x274>)
 8003d58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a37      	ldr	r2, [pc, #220]	; (8003e3c <HAL_I2S_Init+0x278>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_I2S_Init+0x1a4>
 8003d64:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_I2S_Init+0x27c>)
 8003d66:	e001      	b.n	8003d6c <HAL_I2S_Init+0x1a8>
 8003d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	4932      	ldr	r1, [pc, #200]	; (8003e3c <HAL_I2S_Init+0x278>)
 8003d74:	428a      	cmp	r2, r1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2S_Init+0x1b8>
 8003d78:	4a31      	ldr	r2, [pc, #196]	; (8003e40 <HAL_I2S_Init+0x27c>)
 8003d7a:	e001      	b.n	8003d80 <HAL_I2S_Init+0x1bc>
 8003d7c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d80:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d84:	f023 030f 	bic.w	r3, r3, #15
 8003d88:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2b      	ldr	r2, [pc, #172]	; (8003e3c <HAL_I2S_Init+0x278>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_I2S_Init+0x1d4>
 8003d94:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_I2S_Init+0x27c>)
 8003d96:	e001      	b.n	8003d9c <HAL_I2S_Init+0x1d8>
 8003d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a25      	ldr	r2, [pc, #148]	; (8003e3c <HAL_I2S_Init+0x278>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_I2S_Init+0x1ea>
 8003daa:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <HAL_I2S_Init+0x27c>)
 8003dac:	e001      	b.n	8003db2 <HAL_I2S_Init+0x1ee>
 8003dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbe:	d003      	beq.n	8003dc8 <HAL_I2S_Init+0x204>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	e001      	b.n	8003dd4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dde:	4313      	orrs	r3, r2
 8003de0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003de8:	4313      	orrs	r3, r2
 8003dea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003df2:	4313      	orrs	r3, r2
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	897b      	ldrh	r3, [r7, #10]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e00:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <HAL_I2S_Init+0x278>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_I2S_Init+0x24c>
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <HAL_I2S_Init+0x27c>)
 8003e0e:	e001      	b.n	8003e14 <HAL_I2S_Init+0x250>
 8003e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e14:	897a      	ldrh	r2, [r7, #10]
 8003e16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	08004115 	.word	0x08004115
 8003e34:	cccccccd 	.word	0xcccccccd
 8003e38:	08004229 	.word	0x08004229
 8003e3c:	40003800 	.word	0x40003800
 8003e40:	40003400 	.word	0x40003400

08003e44 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_I2S_Transmit_DMA+0x1a>
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e08e      	b.n	8003f80 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2S_Transmit_DMA+0x2e>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e086      	b.n	8003f80 <HAL_I2S_Transmit_DMA+0x13c>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d005      	beq.n	8003e92 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e076      	b.n	8003f80 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2203      	movs	r2, #3
 8003e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d002      	beq.n	8003ebe <HAL_I2S_Transmit_DMA+0x7a>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ed2:	e005      	b.n	8003ee0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	88fa      	ldrh	r2, [r7, #6]
 8003ede:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	4a28      	ldr	r2, [pc, #160]	; (8003f88 <HAL_I2S_Transmit_DMA+0x144>)
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <HAL_I2S_Transmit_DMA+0x148>)
 8003eee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <HAL_I2S_Transmit_DMA+0x14c>)
 8003ef6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f00:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f08:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f10:	f7fe f8e6 	bl	80020e0 <HAL_DMA_Start_IT>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00f      	beq.n	8003f3a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	f043 0208 	orr.w	r2, r3, #8
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e022      	b.n	8003f80 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d107      	bne.n	8003f58 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f56:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d107      	bne.n	8003f76 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0202 	orr.w	r2, r2, #2
 8003f74:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	08003ff3 	.word	0x08003ff3
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	0800400f 	.word	0x0800400f

08003f94 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa2:	b2db      	uxtb	r3, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10e      	bne.n	8003fe4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0202 	bic.w	r2, r2, #2
 8003fd4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f002 f9e7 	bl	80063b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f002 f9eb 	bl	80063dc <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0203 	bic.w	r2, r2, #3
 800402a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	f043 0208 	orr.w	r2, r3, #8
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f002 fb3f 	bl	80066d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	881a      	ldrh	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	1c9a      	adds	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10e      	bne.n	80040ae <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800409e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f002 f985 	bl	80063b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	b292      	uxth	r2, r2
 80040ca:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	1c9a      	adds	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10e      	bne.n	800410c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f002 fad8 	bl	80066bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b04      	cmp	r3, #4
 800412e:	d13a      	bne.n	80041a6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b01      	cmp	r3, #1
 8004138:	d109      	bne.n	800414e <I2S_IRQHandler+0x3a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d102      	bne.n	800414e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ffb4 	bl	80040b6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d126      	bne.n	80041a6 <I2S_IRQHandler+0x92>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b20      	cmp	r3, #32
 8004164:	d11f      	bne.n	80041a6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004174:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004198:	f043 0202 	orr.w	r2, r3, #2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f002 fa95 	bl	80066d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d136      	bne.n	8004220 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d109      	bne.n	80041d0 <I2S_IRQHandler+0xbc>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b80      	cmp	r3, #128	; 0x80
 80041c8:	d102      	bne.n	80041d0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ff45 	bl	800405a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d122      	bne.n	8004220 <I2S_IRQHandler+0x10c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d11b      	bne.n	8004220 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041f6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	f043 0204 	orr.w	r2, r3, #4
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f002 fa58 	bl	80066d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4aa2      	ldr	r2, [pc, #648]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d101      	bne.n	8004246 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004242:	4ba2      	ldr	r3, [pc, #648]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004244:	e001      	b.n	800424a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a9b      	ldr	r2, [pc, #620]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004260:	4b9a      	ldr	r3, [pc, #616]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004262:	e001      	b.n	8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004274:	d004      	beq.n	8004280 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 8099 	bne.w	80043b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d107      	bne.n	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f925 	bl	80044e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d107      	bne.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f9c8 	bl	8004644 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	d13a      	bne.n	8004334 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d035      	beq.n	8004334 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a7e      	ldr	r2, [pc, #504]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80042d2:	4b7e      	ldr	r3, [pc, #504]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042d4:	e001      	b.n	80042da <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4979      	ldr	r1, [pc, #484]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042e2:	428b      	cmp	r3, r1
 80042e4:	d101      	bne.n	80042ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042e6:	4b79      	ldr	r3, [pc, #484]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042e8:	e001      	b.n	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042f2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004302:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f043 0202 	orr.w	r2, r3, #2
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f002 f9ce 	bl	80066d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b08      	cmp	r3, #8
 800433c:	f040 80be 	bne.w	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80b8 	beq.w	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800435a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a59      	ldr	r2, [pc, #356]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004366:	4b59      	ldr	r3, [pc, #356]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004368:	e001      	b.n	800436e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800436a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4954      	ldr	r1, [pc, #336]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004376:	428b      	cmp	r3, r1
 8004378:	d101      	bne.n	800437e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800437a:	4b54      	ldr	r3, [pc, #336]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800437c:	e001      	b.n	8004382 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800437e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004382:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004386:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	f043 0204 	orr.w	r2, r3, #4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f002 f990 	bl	80066d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043b0:	e084      	b.n	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d107      	bne.n	80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f8be 	bl	8004548 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d107      	bne.n	80043e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8fd 	bl	80045e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d12f      	bne.n	8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d02a      	beq.n	8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004408:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2e      	ldr	r2, [pc, #184]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d101      	bne.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004414:	4b2d      	ldr	r3, [pc, #180]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004416:	e001      	b.n	800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4929      	ldr	r1, [pc, #164]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004424:	428b      	cmp	r3, r1
 8004426:	d101      	bne.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004428:	4b28      	ldr	r3, [pc, #160]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800442a:	e001      	b.n	8004430 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800442c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004430:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004434:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f043 0202 	orr.w	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f002 f940 	bl	80066d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b08      	cmp	r3, #8
 8004458:	d131      	bne.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02c      	beq.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004470:	e001      	b.n	8004476 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004472:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4912      	ldr	r1, [pc, #72]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800447e:	428b      	cmp	r3, r1
 8004480:	d101      	bne.n	8004486 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004484:	e001      	b.n	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800448a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800448e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800449e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	f043 0204 	orr.w	r2, r3, #4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f002 f90b 	bl	80066d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ba:	e000      	b.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044bc:	bf00      	nop
}
 80044be:	bf00      	nop
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40003800 	.word	0x40003800
 80044cc:	40003400 	.word	0x40003400

080044d0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	1c99      	adds	r1, r3, #2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6251      	str	r1, [r2, #36]	; 0x24
 80044f6:	881a      	ldrh	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d113      	bne.n	800453e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004524:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d106      	bne.n	800453e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ffc9 	bl	80044d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c99      	adds	r1, r3, #2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6251      	str	r1, [r2, #36]	; 0x24
 800455a:	8819      	ldrh	r1, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <I2SEx_TxISR_I2SExt+0x90>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <I2SEx_TxISR_I2SExt+0x22>
 8004566:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <I2SEx_TxISR_I2SExt+0x94>)
 8004568:	e001      	b.n	800456e <I2SEx_TxISR_I2SExt+0x26>
 800456a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800456e:	460a      	mov	r2, r1
 8004570:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d121      	bne.n	80045ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a12      	ldr	r2, [pc, #72]	; (80045d8 <I2SEx_TxISR_I2SExt+0x90>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <I2SEx_TxISR_I2SExt+0x50>
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <I2SEx_TxISR_I2SExt+0x94>)
 8004596:	e001      	b.n	800459c <I2SEx_TxISR_I2SExt+0x54>
 8004598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	490d      	ldr	r1, [pc, #52]	; (80045d8 <I2SEx_TxISR_I2SExt+0x90>)
 80045a4:	428b      	cmp	r3, r1
 80045a6:	d101      	bne.n	80045ac <I2SEx_TxISR_I2SExt+0x64>
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <I2SEx_TxISR_I2SExt+0x94>)
 80045aa:	e001      	b.n	80045b0 <I2SEx_TxISR_I2SExt+0x68>
 80045ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ff81 	bl	80044d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40003800 	.word	0x40003800
 80045dc:	40003400 	.word	0x40003400

080045e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68d8      	ldr	r0, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	1c99      	adds	r1, r3, #2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045f8:	b282      	uxth	r2, r0
 80045fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d113      	bne.n	800463c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004622:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff ff4a 	bl	80044d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a20      	ldr	r2, [pc, #128]	; (80046d4 <I2SEx_RxISR_I2SExt+0x90>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <I2SEx_RxISR_I2SExt+0x16>
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004658:	e001      	b.n	800465e <I2SEx_RxISR_I2SExt+0x1a>
 800465a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800465e:	68d8      	ldr	r0, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	1c99      	adds	r1, r3, #2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	62d1      	str	r1, [r2, #44]	; 0x2c
 800466a:	b282      	uxth	r2, r0
 800466c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d121      	bne.n	80046ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <I2SEx_RxISR_I2SExt+0x90>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d101      	bne.n	8004694 <I2SEx_RxISR_I2SExt+0x50>
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004692:	e001      	b.n	8004698 <I2SEx_RxISR_I2SExt+0x54>
 8004694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	490d      	ldr	r1, [pc, #52]	; (80046d4 <I2SEx_RxISR_I2SExt+0x90>)
 80046a0:	428b      	cmp	r3, r1
 80046a2:	d101      	bne.n	80046a8 <I2SEx_RxISR_I2SExt+0x64>
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <I2SEx_RxISR_I2SExt+0x94>)
 80046a6:	e001      	b.n	80046ac <I2SEx_RxISR_I2SExt+0x68>
 80046a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ff03 	bl	80044d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40003800 	.word	0x40003800
 80046d8:	40003400 	.word	0x40003400

080046dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e264      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d075      	beq.n	80047e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046fa:	4ba3      	ldr	r3, [pc, #652]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b04      	cmp	r3, #4
 8004704:	d00c      	beq.n	8004720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4ba0      	ldr	r3, [pc, #640]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470e:	2b08      	cmp	r3, #8
 8004710:	d112      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b9d      	ldr	r3, [pc, #628]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471e:	d10b      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	4b99      	ldr	r3, [pc, #612]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x108>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d157      	bne.n	80047e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e23f      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x74>
 8004742:	4b91      	ldr	r3, [pc, #580]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a90      	ldr	r2, [pc, #576]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x98>
 800475a:	4b8b      	ldr	r3, [pc, #556]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a8a      	ldr	r2, [pc, #552]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b88      	ldr	r3, [pc, #544]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a87      	ldr	r2, [pc, #540]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004774:	4b84      	ldr	r3, [pc, #528]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a83      	ldr	r2, [pc, #524]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b81      	ldr	r3, [pc, #516]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a80      	ldr	r2, [pc, #512]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fd fa24 	bl	8001be0 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479c:	f7fd fa20 	bl	8001be0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e204      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b76      	ldr	r3, [pc, #472]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xc0>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fd fa10 	bl	8001be0 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fd fa0c 	bl	8001be0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e1f0      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b6c      	ldr	r3, [pc, #432]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0xe8>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d063      	beq.n	80048ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047f2:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fe:	4b62      	ldr	r3, [pc, #392]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004806:	2b08      	cmp	r3, #8
 8004808:	d11c      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480a:	4b5f      	ldr	r3, [pc, #380]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d116      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004816:	4b5c      	ldr	r3, [pc, #368]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d001      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e1c4      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482e:	4b56      	ldr	r3, [pc, #344]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4952      	ldr	r1, [pc, #328]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	e03a      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484c:	4b4f      	ldr	r3, [pc, #316]	; (800498c <HAL_RCC_OscConfig+0x2b0>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fd f9c5 	bl	8001be0 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800485a:	f7fd f9c1 	bl	8001be0 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e1a5      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	4b46      	ldr	r3, [pc, #280]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004878:	4b43      	ldr	r3, [pc, #268]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4940      	ldr	r1, [pc, #256]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]
 800488c:	e015      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488e:	4b3f      	ldr	r3, [pc, #252]	; (800498c <HAL_RCC_OscConfig+0x2b0>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd f9a4 	bl	8001be0 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489c:	f7fd f9a0 	bl	8001be0 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e184      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	4b36      	ldr	r3, [pc, #216]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d030      	beq.n	8004928 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d016      	beq.n	80048fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ce:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_RCC_OscConfig+0x2b4>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fd f984 	bl	8001be0 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048dc:	f7fd f980 	bl	8001be0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e164      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	4b26      	ldr	r3, [pc, #152]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x200>
 80048fa:	e015      	b.n	8004928 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fc:	4b24      	ldr	r3, [pc, #144]	; (8004990 <HAL_RCC_OscConfig+0x2b4>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004902:	f7fd f96d 	bl	8001be0 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800490a:	f7fd f969 	bl	8001be0 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e14d      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491c:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800491e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a0 	beq.w	8004a76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	6413      	str	r3, [r2, #64]	; 0x40
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_OscConfig+0x2b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d121      	bne.n	80049b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <HAL_RCC_OscConfig+0x2b8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a07      	ldr	r2, [pc, #28]	; (8004994 <HAL_RCC_OscConfig+0x2b8>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497e:	f7fd f92f 	bl	8001be0 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	e011      	b.n	80049aa <HAL_RCC_OscConfig+0x2ce>
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	42470000 	.word	0x42470000
 8004990:	42470e80 	.word	0x42470e80
 8004994:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004998:	f7fd f922 	bl	8001be0 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e106      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049aa:	4b85      	ldr	r3, [pc, #532]	; (8004bc0 <HAL_RCC_OscConfig+0x4e4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d106      	bne.n	80049cc <HAL_RCC_OscConfig+0x2f0>
 80049be:	4b81      	ldr	r3, [pc, #516]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a80      	ldr	r2, [pc, #512]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ca:	e01c      	b.n	8004a06 <HAL_RCC_OscConfig+0x32a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d10c      	bne.n	80049ee <HAL_RCC_OscConfig+0x312>
 80049d4:	4b7b      	ldr	r3, [pc, #492]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	4a7a      	ldr	r2, [pc, #488]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 80049da:	f043 0304 	orr.w	r3, r3, #4
 80049de:	6713      	str	r3, [r2, #112]	; 0x70
 80049e0:	4b78      	ldr	r3, [pc, #480]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	4a77      	ldr	r2, [pc, #476]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	6713      	str	r3, [r2, #112]	; 0x70
 80049ec:	e00b      	b.n	8004a06 <HAL_RCC_OscConfig+0x32a>
 80049ee:	4b75      	ldr	r3, [pc, #468]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a74      	ldr	r2, [pc, #464]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
 80049fa:	4b72      	ldr	r3, [pc, #456]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	4a71      	ldr	r2, [pc, #452]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d015      	beq.n	8004a3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0e:	f7fd f8e7 	bl	8001be0 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	e00a      	b.n	8004a2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fd f8e3 	bl	8001be0 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e0c5      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2c:	4b65      	ldr	r3, [pc, #404]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ee      	beq.n	8004a16 <HAL_RCC_OscConfig+0x33a>
 8004a38:	e014      	b.n	8004a64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a3a:	f7fd f8d1 	bl	8001be0 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fd f8cd 	bl	8001be0 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e0af      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a58:	4b5a      	ldr	r3, [pc, #360]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ee      	bne.n	8004a42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6a:	4b56      	ldr	r3, [pc, #344]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a55      	ldr	r2, [pc, #340]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 8004a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 809b 	beq.w	8004bb6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a80:	4b50      	ldr	r3, [pc, #320]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d05c      	beq.n	8004b46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d141      	bne.n	8004b18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a94:	4b4c      	ldr	r3, [pc, #304]	; (8004bc8 <HAL_RCC_OscConfig+0x4ec>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9a:	f7fd f8a1 	bl	8001be0 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa2:	f7fd f89d 	bl	8001be0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e081      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab4:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	019b      	lsls	r3, r3, #6
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	061b      	lsls	r3, r3, #24
 8004ae4:	4937      	ldr	r1, [pc, #220]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aea:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <HAL_RCC_OscConfig+0x4ec>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fd f876 	bl	8001be0 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fd f872 	bl	8001be0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e056      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0a:	4b2e      	ldr	r3, [pc, #184]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x41c>
 8004b16:	e04e      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b18:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <HAL_RCC_OscConfig+0x4ec>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1e:	f7fd f85f 	bl	8001be0 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b26:	f7fd f85b 	bl	8001be0 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e03f      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b38:	4b22      	ldr	r3, [pc, #136]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f0      	bne.n	8004b26 <HAL_RCC_OscConfig+0x44a>
 8004b44:	e037      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e032      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b52:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <HAL_RCC_OscConfig+0x4e8>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d028      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d121      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d11a      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b82:	4013      	ands	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d111      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d001      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	42470060 	.word	0x42470060

08004bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0cc      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b68      	ldr	r3, [pc, #416]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d90c      	bls.n	8004c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b65      	ldr	r3, [pc, #404]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b63      	ldr	r3, [pc, #396]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0b8      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d020      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c20:	4b59      	ldr	r3, [pc, #356]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a58      	ldr	r2, [pc, #352]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c38:	4b53      	ldr	r3, [pc, #332]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4a52      	ldr	r2, [pc, #328]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c44:	4b50      	ldr	r3, [pc, #320]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	494d      	ldr	r1, [pc, #308]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d044      	beq.n	8004cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d107      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	4b47      	ldr	r3, [pc, #284]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d119      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e07f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d003      	beq.n	8004c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8a:	4b3f      	ldr	r3, [pc, #252]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e06f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9a:	4b3b      	ldr	r3, [pc, #236]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e067      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004caa:	4b37      	ldr	r3, [pc, #220]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 0203 	bic.w	r2, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4934      	ldr	r1, [pc, #208]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cbc:	f7fc ff90 	bl	8001be0 <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fc ff8c 	bl	8001be0 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e04f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	4b2b      	ldr	r3, [pc, #172]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 020c 	and.w	r2, r3, #12
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1eb      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cec:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d20c      	bcs.n	8004d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e032      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4916      	ldr	r1, [pc, #88]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3e:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	490e      	ldr	r1, [pc, #56]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d52:	f000 f821 	bl	8004d98 <HAL_RCC_GetSysClockFreq>
 8004d56:	4602      	mov	r2, r0
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	490a      	ldr	r1, [pc, #40]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	5ccb      	ldrb	r3, [r1, r3]
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d6e:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fc fef0 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023c00 	.word	0x40023c00
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	08009120 	.word	0x08009120
 8004d90:	20000018 	.word	0x20000018
 8004d94:	2000001c 	.word	0x2000001c

08004d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	2300      	movs	r3, #0
 8004daa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004db0:	4b67      	ldr	r3, [pc, #412]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 030c 	and.w	r3, r3, #12
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d00d      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	f200 80bd 	bhi.w	8004f3c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0x34>
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dca:	e0b7      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dcc:	4b61      	ldr	r3, [pc, #388]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004dce:	60bb      	str	r3, [r7, #8]
       break;
 8004dd0:	e0b7      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dd2:	4b61      	ldr	r3, [pc, #388]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004dd4:	60bb      	str	r3, [r7, #8]
      break;
 8004dd6:	e0b4      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dd8:	4b5d      	ldr	r3, [pc, #372]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004de2:	4b5b      	ldr	r3, [pc, #364]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d04d      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dee:	4b58      	ldr	r3, [pc, #352]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	099b      	lsrs	r3, r3, #6
 8004df4:	461a      	mov	r2, r3
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dfe:	f04f 0100 	mov.w	r1, #0
 8004e02:	ea02 0800 	and.w	r8, r2, r0
 8004e06:	ea03 0901 	and.w	r9, r3, r1
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	014b      	lsls	r3, r1, #5
 8004e18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e1c:	0142      	lsls	r2, r0, #5
 8004e1e:	4610      	mov	r0, r2
 8004e20:	4619      	mov	r1, r3
 8004e22:	ebb0 0008 	subs.w	r0, r0, r8
 8004e26:	eb61 0109 	sbc.w	r1, r1, r9
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	018b      	lsls	r3, r1, #6
 8004e34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e38:	0182      	lsls	r2, r0, #6
 8004e3a:	1a12      	subs	r2, r2, r0
 8004e3c:	eb63 0301 	sbc.w	r3, r3, r1
 8004e40:	f04f 0000 	mov.w	r0, #0
 8004e44:	f04f 0100 	mov.w	r1, #0
 8004e48:	00d9      	lsls	r1, r3, #3
 8004e4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e4e:	00d0      	lsls	r0, r2, #3
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	eb12 0208 	adds.w	r2, r2, r8
 8004e58:	eb43 0309 	adc.w	r3, r3, r9
 8004e5c:	f04f 0000 	mov.w	r0, #0
 8004e60:	f04f 0100 	mov.w	r1, #0
 8004e64:	0259      	lsls	r1, r3, #9
 8004e66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e6a:	0250      	lsls	r0, r2, #9
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4610      	mov	r0, r2
 8004e72:	4619      	mov	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	f7fb fe9c 	bl	8000bb8 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4613      	mov	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e04a      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8a:	4b31      	ldr	r3, [pc, #196]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	461a      	mov	r2, r3
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e9a:	f04f 0100 	mov.w	r1, #0
 8004e9e:	ea02 0400 	and.w	r4, r2, r0
 8004ea2:	ea03 0501 	and.w	r5, r3, r1
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	014b      	lsls	r3, r1, #5
 8004eb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004eb8:	0142      	lsls	r2, r0, #5
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	1b00      	subs	r0, r0, r4
 8004ec0:	eb61 0105 	sbc.w	r1, r1, r5
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	018b      	lsls	r3, r1, #6
 8004ece:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ed2:	0182      	lsls	r2, r0, #6
 8004ed4:	1a12      	subs	r2, r2, r0
 8004ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eda:	f04f 0000 	mov.w	r0, #0
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	00d9      	lsls	r1, r3, #3
 8004ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ee8:	00d0      	lsls	r0, r2, #3
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	1912      	adds	r2, r2, r4
 8004ef0:	eb45 0303 	adc.w	r3, r5, r3
 8004ef4:	f04f 0000 	mov.w	r0, #0
 8004ef8:	f04f 0100 	mov.w	r1, #0
 8004efc:	0299      	lsls	r1, r3, #10
 8004efe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f02:	0290      	lsls	r0, r2, #10
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	f7fb fe50 	bl	8000bb8 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	60bb      	str	r3, [r7, #8]
      break;
 8004f3a:	e002      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f3e:	60bb      	str	r3, [r7, #8]
      break;
 8004f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f42:	68bb      	ldr	r3, [r7, #8]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800
 8004f54:	00f42400 	.word	0x00f42400
 8004f58:	007a1200 	.word	0x007a1200

08004f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f60:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	20000018 	.word	0x20000018

08004f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f78:	f7ff fff0 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	0a9b      	lsrs	r3, r3, #10
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	4903      	ldr	r1, [pc, #12]	; (8004f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40023800 	.word	0x40023800
 8004f98:	08009130 	.word	0x08009130

08004f9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d038      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fc4:	4b68      	ldr	r3, [pc, #416]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fca:	f7fc fe09 	bl	8001be0 <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fd2:	f7fc fe05 	bl	8001be0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e0bd      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe4:	4b61      	ldr	r3, [pc, #388]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f0      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	019b      	lsls	r3, r3, #6
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	071b      	lsls	r3, r3, #28
 8005002:	495a      	ldr	r1, [pc, #360]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800500a:	4b57      	ldr	r3, [pc, #348]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005010:	f7fc fde6 	bl	8001be0 <HAL_GetTick>
 8005014:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005016:	e008      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005018:	f7fc fde2 	bl	8001be0 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e09a      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800502a:	4b50      	ldr	r3, [pc, #320]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8083 	beq.w	800514a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	4b48      	ldr	r3, [pc, #288]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	4a47      	ldr	r2, [pc, #284]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005052:	6413      	str	r3, [r2, #64]	; 0x40
 8005054:	4b45      	ldr	r3, [pc, #276]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005060:	4b43      	ldr	r3, [pc, #268]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a42      	ldr	r2, [pc, #264]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800506c:	f7fc fdb8 	bl	8001be0 <HAL_GetTick>
 8005070:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005074:	f7fc fdb4 	bl	8001be0 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e06c      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005086:	4b3a      	ldr	r3, [pc, #232]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005092:	4b36      	ldr	r3, [pc, #216]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d02f      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d028      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b0:	4b2e      	ldr	r3, [pc, #184]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ba:	4b2e      	ldr	r3, [pc, #184]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050bc:	2201      	movs	r2, #1
 80050be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050c0:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050c6:	4a29      	ldr	r2, [pc, #164]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050cc:	4b27      	ldr	r3, [pc, #156]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d114      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050d8:	f7fc fd82 	bl	8001be0 <HAL_GetTick>
 80050dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050de:	e00a      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e0:	f7fc fd7e 	bl	8001be0 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e034      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f6:	4b1d      	ldr	r3, [pc, #116]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0ee      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510e:	d10d      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005110:	4b16      	ldr	r3, [pc, #88]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005124:	4911      	ldr	r1, [pc, #68]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
 800512a:	e005      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4a0e      	ldr	r2, [pc, #56]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005132:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005136:	6093      	str	r3, [r2, #8]
 8005138:	4b0c      	ldr	r3, [pc, #48]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005144:	4909      	ldr	r1, [pc, #36]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005146:	4313      	orrs	r3, r2
 8005148:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	7d1a      	ldrb	r2, [r3, #20]
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800515c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	42470068 	.word	0x42470068
 800516c:	40023800 	.word	0x40023800
 8005170:	40007000 	.word	0x40007000
 8005174:	42470e40 	.word	0x42470e40
 8005178:	424711e0 	.word	0x424711e0

0800517c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2203      	movs	r2, #3
 8005188:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800518a:	4b1c      	ldr	r3, [pc, #112]	; (80051fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800518c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005190:	099b      	lsrs	r3, r3, #6
 8005192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800519a:	4b18      	ldr	r3, [pc, #96]	; (80051fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800519c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a0:	0f1b      	lsrs	r3, r3, #28
 80051a2:	f003 0207 	and.w	r2, r3, #7
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 80051aa:	4b14      	ldr	r3, [pc, #80]	; (80051fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80051ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80051b8:	4b10      	ldr	r3, [pc, #64]	; (80051fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80051c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80051c2:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80051d2:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80051d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d103      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80051e6:	e002      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	751a      	strb	r2, [r3, #20]
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800

08005200 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d140      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800521e:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d131      	bne.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005234:	4b1f      	ldr	r3, [pc, #124]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005236:	617b      	str	r3, [r7, #20]
          break;
 8005238:	e031      	b.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800523a:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005246:	d109      	bne.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005252:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	e008      	b.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800525c:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800525e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005266:	4a15      	ldr	r2, [pc, #84]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800526e:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005274:	099b      	lsrs	r3, r3, #6
 8005276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	fb02 f303 	mul.w	r3, r2, r3
 8005280:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005288:	0f1b      	lsrs	r3, r3, #28
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]
          break;
 8005296:	e002      	b.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
          break;
 800529c:	bf00      	nop
        }
      }
      break;
 800529e:	bf00      	nop
    }
  }
  return frequency;
 80052a0:	697b      	ldr	r3, [r7, #20]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40023800 	.word	0x40023800
 80052b4:	00bb8000 	.word	0x00bb8000
 80052b8:	007a1200 	.word	0x007a1200
 80052bc:	00f42400 	.word	0x00f42400

080052c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e041      	b.n	8005356 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc fa8c 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 f9c0 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d001      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e044      	b.n	8005402 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <HAL_TIM_Base_Start_IT+0xb0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d018      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x6c>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a2:	d013      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x6c>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1a      	ldr	r2, [pc, #104]	; (8005414 <HAL_TIM_Base_Start_IT+0xb4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00e      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x6c>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a19      	ldr	r2, [pc, #100]	; (8005418 <HAL_TIM_Base_Start_IT+0xb8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x6c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a17      	ldr	r2, [pc, #92]	; (800541c <HAL_TIM_Base_Start_IT+0xbc>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x6c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a16      	ldr	r2, [pc, #88]	; (8005420 <HAL_TIM_Base_Start_IT+0xc0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d111      	bne.n	80053f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b06      	cmp	r3, #6
 80053dc:	d010      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ee:	e007      	b.n	8005400 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40014000 	.word	0x40014000

08005424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b02      	cmp	r3, #2
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0202 	mvn.w	r2, #2
 8005450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8ee 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f8e0 	bl	8005634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f8f1 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b04      	cmp	r3, #4
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0204 	mvn.w	r2, #4
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f8c4 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f8b6 	bl	8005634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f8c7 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0208 	mvn.w	r2, #8
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2204      	movs	r2, #4
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f89a 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f88c 	bl	8005634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f89d 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b10      	cmp	r3, #16
 8005534:	d122      	bne.n	800557c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b10      	cmp	r3, #16
 8005542:	d11b      	bne.n	800557c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0210 	mvn.w	r2, #16
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2208      	movs	r2, #8
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f870 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f862 	bl	8005634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f873 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d10e      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b01      	cmp	r3, #1
 8005596:	d107      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0201 	mvn.w	r2, #1
 80055a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fb fe5e 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b80      	cmp	r3, #128	; 0x80
 80055b4:	d10e      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b80      	cmp	r3, #128	; 0x80
 80055c2:	d107      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f8e2 	bl	8005798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d10e      	bne.n	8005600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	d107      	bne.n	8005600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f838 	bl	8005670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b20      	cmp	r3, #32
 800560c:	d10e      	bne.n	800562c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b20      	cmp	r3, #32
 800561a:	d107      	bne.n	800562c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0220 	mvn.w	r2, #32
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8ac 	bl	8005784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800562c:	bf00      	nop
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a34      	ldr	r2, [pc, #208]	; (8005768 <TIM_Base_SetConfig+0xe4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a31      	ldr	r2, [pc, #196]	; (800576c <TIM_Base_SetConfig+0xe8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a30      	ldr	r2, [pc, #192]	; (8005770 <TIM_Base_SetConfig+0xec>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a2f      	ldr	r2, [pc, #188]	; (8005774 <TIM_Base_SetConfig+0xf0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a25      	ldr	r2, [pc, #148]	; (8005768 <TIM_Base_SetConfig+0xe4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01b      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056dc:	d017      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a22      	ldr	r2, [pc, #136]	; (800576c <TIM_Base_SetConfig+0xe8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a21      	ldr	r2, [pc, #132]	; (8005770 <TIM_Base_SetConfig+0xec>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00f      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a20      	ldr	r2, [pc, #128]	; (8005774 <TIM_Base_SetConfig+0xf0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1f      	ldr	r2, [pc, #124]	; (8005778 <TIM_Base_SetConfig+0xf4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1e      	ldr	r2, [pc, #120]	; (800577c <TIM_Base_SetConfig+0xf8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <TIM_Base_SetConfig+0xfc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a08      	ldr	r2, [pc, #32]	; (8005768 <TIM_Base_SetConfig+0xe4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800

08005784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	607b      	str	r3, [r7, #4]
 80057b4:	4603      	mov	r3, r0
 80057b6:	81fb      	strh	r3, [r7, #14]
 80057b8:	460b      	mov	r3, r1
 80057ba:	81bb      	strh	r3, [r7, #12]
 80057bc:	4613      	mov	r3, r2
 80057be:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80057c4:	f000 fd06 	bl	80061d4 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80057c8:	89fb      	ldrh	r3, [r7, #14]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2201      	movs	r2, #1
 80057ce:	2102      	movs	r1, #2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fb01 	bl	8005dd8 <CODEC_IO_Write>
 80057d6:	4603      	mov	r3, r0
 80057d8:	461a      	mov	r2, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4413      	add	r3, r2
 80057de:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80057e0:	89bb      	ldrh	r3, [r7, #12]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d81b      	bhi.n	8005820 <cs43l22_Init+0x74>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <cs43l22_Init+0x44>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005801 	.word	0x08005801
 80057f4:	08005809 	.word	0x08005809
 80057f8:	08005811 	.word	0x08005811
 80057fc:	08005819 	.word	0x08005819
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8005800:	4b5b      	ldr	r3, [pc, #364]	; (8005970 <cs43l22_Init+0x1c4>)
 8005802:	22fa      	movs	r2, #250	; 0xfa
 8005804:	701a      	strb	r2, [r3, #0]
    break;
 8005806:	e00f      	b.n	8005828 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8005808:	4b59      	ldr	r3, [pc, #356]	; (8005970 <cs43l22_Init+0x1c4>)
 800580a:	22af      	movs	r2, #175	; 0xaf
 800580c:	701a      	strb	r2, [r3, #0]
    break;
 800580e:	e00b      	b.n	8005828 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8005810:	4b57      	ldr	r3, [pc, #348]	; (8005970 <cs43l22_Init+0x1c4>)
 8005812:	22aa      	movs	r2, #170	; 0xaa
 8005814:	701a      	strb	r2, [r3, #0]
    break;
 8005816:	e007      	b.n	8005828 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8005818:	4b55      	ldr	r3, [pc, #340]	; (8005970 <cs43l22_Init+0x1c4>)
 800581a:	2205      	movs	r2, #5
 800581c:	701a      	strb	r2, [r3, #0]
    break;    
 800581e:	e003      	b.n	8005828 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8005820:	4b53      	ldr	r3, [pc, #332]	; (8005970 <cs43l22_Init+0x1c4>)
 8005822:	2205      	movs	r2, #5
 8005824:	701a      	strb	r2, [r3, #0]
    break;    
 8005826:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8005828:	89fb      	ldrh	r3, [r7, #14]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4a50      	ldr	r2, [pc, #320]	; (8005970 <cs43l22_Init+0x1c4>)
 800582e:	7812      	ldrb	r2, [r2, #0]
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	2104      	movs	r1, #4
 8005834:	4618      	mov	r0, r3
 8005836:	f000 facf 	bl	8005dd8 <CODEC_IO_Write>
 800583a:	4603      	mov	r3, r0
 800583c:	461a      	mov	r2, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8005844:	89fb      	ldrh	r3, [r7, #14]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2281      	movs	r2, #129	; 0x81
 800584a:	2105      	movs	r1, #5
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fac3 	bl	8005dd8 <CODEC_IO_Write>
 8005852:	4603      	mov	r3, r0
 8005854:	461a      	mov	r2, r3
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	4413      	add	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 800585c:	89fb      	ldrh	r3, [r7, #14]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2204      	movs	r2, #4
 8005862:	2106      	movs	r1, #6
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fab7 	bl	8005dd8 <CODEC_IO_Write>
 800586a:	4603      	mov	r3, r0
 800586c:	461a      	mov	r2, r3
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	4413      	add	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8005874:	7afa      	ldrb	r2, [r7, #11]
 8005876:	89fb      	ldrh	r3, [r7, #14]
 8005878:	4611      	mov	r1, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f000 f964 	bl	8005b48 <cs43l22_SetVolume>
 8005880:	4602      	mov	r2, r0
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	4413      	add	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8005888:	89bb      	ldrh	r3, [r7, #12]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d023      	beq.n	80058d6 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 800588e:	89fb      	ldrh	r3, [r7, #14]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2206      	movs	r2, #6
 8005894:	210f      	movs	r1, #15
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fa9e 	bl	8005dd8 <CODEC_IO_Write>
 800589c:	4603      	mov	r3, r0
 800589e:	461a      	mov	r2, r3
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80058a6:	89fb      	ldrh	r3, [r7, #14]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2200      	movs	r2, #0
 80058ac:	2124      	movs	r1, #36	; 0x24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fa92 	bl	8005dd8 <CODEC_IO_Write>
 80058b4:	4603      	mov	r3, r0
 80058b6:	461a      	mov	r2, r3
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	4413      	add	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80058be:	89fb      	ldrh	r3, [r7, #14]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2200      	movs	r2, #0
 80058c4:	2125      	movs	r1, #37	; 0x25
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fa86 	bl	8005dd8 <CODEC_IO_Write>
 80058cc:	4603      	mov	r3, r0
 80058ce:	461a      	mov	r2, r3
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	4413      	add	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80058d6:	89fb      	ldrh	r3, [r7, #14]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2200      	movs	r2, #0
 80058dc:	210a      	movs	r1, #10
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fa7a 	bl	8005dd8 <CODEC_IO_Write>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	4413      	add	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80058ee:	89fb      	ldrh	r3, [r7, #14]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2204      	movs	r2, #4
 80058f4:	210e      	movs	r1, #14
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fa6e 	bl	8005dd8 <CODEC_IO_Write>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	4413      	add	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8005906:	89fb      	ldrh	r3, [r7, #14]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2200      	movs	r2, #0
 800590c:	2127      	movs	r1, #39	; 0x27
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fa62 	bl	8005dd8 <CODEC_IO_Write>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4413      	add	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800591e:	89fb      	ldrh	r3, [r7, #14]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	220f      	movs	r2, #15
 8005924:	211f      	movs	r1, #31
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fa56 	bl	8005dd8 <CODEC_IO_Write>
 800592c:	4603      	mov	r3, r0
 800592e:	461a      	mov	r2, r3
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	4413      	add	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8005936:	89fb      	ldrh	r3, [r7, #14]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	220a      	movs	r2, #10
 800593c:	211a      	movs	r1, #26
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fa4a 	bl	8005dd8 <CODEC_IO_Write>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	4413      	add	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800594e:	89fb      	ldrh	r3, [r7, #14]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	220a      	movs	r2, #10
 8005954:	211b      	movs	r1, #27
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fa3e 	bl	8005dd8 <CODEC_IO_Write>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	4413      	add	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8005966:	697b      	ldr	r3, [r7, #20]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	200005ac 	.word	0x200005ac

08005974 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8005978:	f000 fc64 	bl	8006244 <AUDIO_IO_DeInit>
}
 800597c:	bf00      	nop
 800597e:	bd80      	pop	{r7, pc}

08005980 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 800598a:	f000 fc23 	bl	80061d4 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2101      	movs	r1, #1
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fc70 	bl	800627a <AUDIO_IO_Read>
 800599a:	4603      	mov	r3, r0
 800599c:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	f023 0307 	bic.w	r3, r3, #7
 80059a4:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	6039      	str	r1, [r7, #0]
 80059ba:	80fb      	strh	r3, [r7, #6]
 80059bc:	4613      	mov	r3, r2
 80059be:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80059c4:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <cs43l22_Play+0x70>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d123      	bne.n	8005a14 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2206      	movs	r2, #6
 80059d2:	210e      	movs	r1, #14
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 f9ff 	bl	8005dd8 <CODEC_IO_Write>
 80059da:	4603      	mov	r3, r0
 80059dc:	461a      	mov	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 f919 	bl	8005c20 <cs43l22_SetMute>
 80059ee:	4602      	mov	r2, r0
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	229e      	movs	r2, #158	; 0x9e
 80059fc:	2102      	movs	r1, #2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 f9ea 	bl	8005dd8 <CODEC_IO_Write>
 8005a04:	4603      	mov	r3, r0
 8005a06:	461a      	mov	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <cs43l22_Play+0x70>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8005a14:	68fb      	ldr	r3, [r7, #12]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000054 	.word	0x20000054

08005a24 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	2101      	movs	r1, #1
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f8f2 	bl	8005c20 <cs43l22_SetMute>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2201      	movs	r2, #1
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 f9c3 	bl	8005dd8 <CODEC_IO_Write>
 8005a52:	4603      	mov	r3, r0
 8005a54:	461a      	mov	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f8ce 	bl	8005c20 <cs43l22_SetMute>
 8005a84:	4602      	mov	r2, r0
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	e002      	b.n	8005a98 <cs43l22_Resume+0x30>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	3301      	adds	r3, #1
 8005a96:	60bb      	str	r3, [r7, #8]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2bfe      	cmp	r3, #254	; 0xfe
 8005a9c:	d9f9      	bls.n	8005a92 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	4a0e      	ldr	r2, [pc, #56]	; (8005adc <cs43l22_Resume+0x74>)
 8005aa4:	7812      	ldrb	r2, [r2, #0]
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	2104      	movs	r1, #4
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f994 	bl	8005dd8 <CODEC_IO_Write>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	229e      	movs	r2, #158	; 0x9e
 8005ac0:	2102      	movs	r1, #2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f988 	bl	8005dd8 <CODEC_IO_Write>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	461a      	mov	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	200005ac 	.word	0x200005ac

08005ae0 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	6039      	str	r1, [r7, #0]
 8005aea:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	2101      	movs	r1, #1
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 f893 	bl	8005c20 <cs43l22_SetMute>
 8005afa:	4602      	mov	r2, r0
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2204      	movs	r2, #4
 8005b08:	210e      	movs	r1, #14
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 f964 	bl	8005dd8 <CODEC_IO_Write>
 8005b10:	4603      	mov	r3, r0
 8005b12:	461a      	mov	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	229f      	movs	r2, #159	; 0x9f
 8005b20:	2102      	movs	r1, #2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f958 	bl	8005dd8 <CODEC_IO_Write>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8005b32:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <cs43l22_Stop+0x64>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	701a      	strb	r2, [r3, #0]
  return counter;    
 8005b38:	68fb      	ldr	r3, [r7, #12]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000054 	.word	0x20000054

08005b48 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	460a      	mov	r2, r1
 8005b52:	80fb      	strh	r3, [r7, #6]
 8005b54:	4613      	mov	r3, r2
 8005b56:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8005b5c:	797b      	ldrb	r3, [r7, #5]
 8005b5e:	2b64      	cmp	r3, #100	; 0x64
 8005b60:	d80b      	bhi.n	8005b7a <cs43l22_SetVolume+0x32>
 8005b62:	797a      	ldrb	r2, [r7, #5]
 8005b64:	4613      	mov	r3, r2
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	1a9b      	subs	r3, r3, r2
 8005b6a:	4a25      	ldr	r2, [pc, #148]	; (8005c00 <cs43l22_SetVolume+0xb8>)
 8005b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8005b70:	1152      	asrs	r2, r2, #5
 8005b72:	17db      	asrs	r3, r3, #31
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	e000      	b.n	8005b7c <cs43l22_SetVolume+0x34>
 8005b7a:	23ff      	movs	r3, #255	; 0xff
 8005b7c:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8005b7e:	7afb      	ldrb	r3, [r7, #11]
 8005b80:	2be6      	cmp	r3, #230	; 0xe6
 8005b82:	d91c      	bls.n	8005bbe <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	b2d8      	uxtb	r0, r3
 8005b88:	7afb      	ldrb	r3, [r7, #11]
 8005b8a:	3319      	adds	r3, #25
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	2120      	movs	r1, #32
 8005b92:	f000 f921 	bl	8005dd8 <CODEC_IO_Write>
 8005b96:	4603      	mov	r3, r0
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8005ba0:	88fb      	ldrh	r3, [r7, #6]
 8005ba2:	b2d8      	uxtb	r0, r3
 8005ba4:	7afb      	ldrb	r3, [r7, #11]
 8005ba6:	3319      	adds	r3, #25
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	2121      	movs	r1, #33	; 0x21
 8005bae:	f000 f913 	bl	8005dd8 <CODEC_IO_Write>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e01b      	b.n	8005bf6 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	b2d8      	uxtb	r0, r3
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
 8005bc4:	3319      	adds	r3, #25
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2120      	movs	r1, #32
 8005bcc:	f000 f904 	bl	8005dd8 <CODEC_IO_Write>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	b2d8      	uxtb	r0, r3
 8005bde:	7afb      	ldrb	r3, [r7, #11]
 8005be0:	3319      	adds	r3, #25
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	2121      	movs	r1, #33	; 0x21
 8005be8:	f000 f8f6 	bl	8005dd8 <CODEC_IO_Write>
 8005bec:	4603      	mov	r3, r0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	51eb851f 	.word	0x51eb851f

08005c04 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	6039      	str	r1, [r7, #0]
 8005c0e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	6039      	str	r1, [r7, #0]
 8005c2a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d124      	bne.n	8005c80 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	22ff      	movs	r2, #255	; 0xff
 8005c3c:	2104      	movs	r1, #4
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f8ca 	bl	8005dd8 <CODEC_IO_Write>
 8005c44:	4603      	mov	r3, r0
 8005c46:	461a      	mov	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2201      	movs	r2, #1
 8005c54:	2122      	movs	r1, #34	; 0x22
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 f8be 	bl	8005dd8 <CODEC_IO_Write>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4413      	add	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8005c66:	88fb      	ldrh	r3, [r7, #6]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	2123      	movs	r1, #35	; 0x23
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f8b2 	bl	8005dd8 <CODEC_IO_Write>
 8005c74:	4603      	mov	r3, r0
 8005c76:	461a      	mov	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	e025      	b.n	8005ccc <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2200      	movs	r2, #0
 8005c86:	2122      	movs	r1, #34	; 0x22
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 f8a5 	bl	8005dd8 <CODEC_IO_Write>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	461a      	mov	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2123      	movs	r1, #35	; 0x23
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 f899 	bl	8005dd8 <CODEC_IO_Write>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8005cb0:	88fb      	ldrh	r3, [r7, #6]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <cs43l22_SetMute+0xb8>)
 8005cb6:	7812      	ldrb	r2, [r2, #0]
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	2104      	movs	r1, #4
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 f88b 	bl	8005dd8 <CODEC_IO_Write>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	200005ac 	.word	0x200005ac

08005cdc <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	460a      	mov	r2, r1
 8005ce6:	80fb      	strh	r3, [r7, #6]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8005cf0:	797b      	ldrb	r3, [r7, #5]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d84b      	bhi.n	8005d90 <cs43l22_SetOutputMode+0xb4>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <cs43l22_SetOutputMode+0x24>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	08005d51 	.word	0x08005d51
 8005d0c:	08005d71 	.word	0x08005d71
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	22fa      	movs	r2, #250	; 0xfa
 8005d16:	2104      	movs	r1, #4
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 f85d 	bl	8005dd8 <CODEC_IO_Write>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	461a      	mov	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8005d28:	4b24      	ldr	r3, [pc, #144]	; (8005dbc <cs43l22_SetOutputMode+0xe0>)
 8005d2a:	22fa      	movs	r2, #250	; 0xfa
 8005d2c:	701a      	strb	r2, [r3, #0]
      break;
 8005d2e:	e03f      	b.n	8005db0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	22af      	movs	r2, #175	; 0xaf
 8005d36:	2104      	movs	r1, #4
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 f84d 	bl	8005dd8 <CODEC_IO_Write>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	461a      	mov	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8005d48:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <cs43l22_SetOutputMode+0xe0>)
 8005d4a:	22af      	movs	r2, #175	; 0xaf
 8005d4c:	701a      	strb	r2, [r3, #0]
      break;
 8005d4e:	e02f      	b.n	8005db0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8005d50:	88fb      	ldrh	r3, [r7, #6]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	22aa      	movs	r2, #170	; 0xaa
 8005d56:	2104      	movs	r1, #4
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 f83d 	bl	8005dd8 <CODEC_IO_Write>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	461a      	mov	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8005d68:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <cs43l22_SetOutputMode+0xe0>)
 8005d6a:	22aa      	movs	r2, #170	; 0xaa
 8005d6c:	701a      	strb	r2, [r3, #0]
      break;
 8005d6e:	e01f      	b.n	8005db0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2205      	movs	r2, #5
 8005d76:	2104      	movs	r1, #4
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 f82d 	bl	8005dd8 <CODEC_IO_Write>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	461a      	mov	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4413      	add	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8005d88:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <cs43l22_SetOutputMode+0xe0>)
 8005d8a:	2205      	movs	r2, #5
 8005d8c:	701a      	strb	r2, [r3, #0]
      break;    
 8005d8e:	e00f      	b.n	8005db0 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2205      	movs	r2, #5
 8005d96:	2104      	movs	r1, #4
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 f81d 	bl	8005dd8 <CODEC_IO_Write>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	461a      	mov	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8005da8:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <cs43l22_SetOutputMode+0xe0>)
 8005daa:	2205      	movs	r2, #5
 8005dac:	701a      	strb	r2, [r3, #0]
      break;
 8005dae:	bf00      	nop
  }  
  return counter;
 8005db0:	68fb      	ldr	r3, [r7, #12]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	200005ac 	.word	0x200005ac

08005dc0 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	80fb      	strh	r3, [r7, #6]
  return 0;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4603      	mov	r3, r0
 8005de0:	71fb      	strb	r3, [r7, #7]
 8005de2:	460b      	mov	r3, r1
 8005de4:	71bb      	strb	r3, [r7, #6]
 8005de6:	4613      	mov	r3, r2
 8005de8:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8005dee:	797a      	ldrb	r2, [r7, #5]
 8005df0:	79b9      	ldrb	r1, [r7, #6]
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fa2c 	bl	8006252 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	b2db      	uxtb	r3, r3
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	; 0x30
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4603      	mov	r3, r0
 8005e10:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10e      	bne.n	8005e36 <BSP_LED_Init+0x2e>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61bb      	str	r3, [r7, #24]
 8005e1c:	4b33      	ldr	r3, [pc, #204]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	4a32      	ldr	r2, [pc, #200]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e22:	f043 0308 	orr.w	r3, r3, #8
 8005e26:	6313      	str	r3, [r2, #48]	; 0x30
 8005e28:	4b30      	ldr	r3, [pc, #192]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	e034      	b.n	8005ea0 <BSP_LED_Init+0x98>
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10e      	bne.n	8005e5a <BSP_LED_Init+0x52>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	4b2a      	ldr	r3, [pc, #168]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	4a29      	ldr	r2, [pc, #164]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e46:	f043 0308 	orr.w	r3, r3, #8
 8005e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e4c:	4b27      	ldr	r3, [pc, #156]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	e022      	b.n	8005ea0 <BSP_LED_Init+0x98>
 8005e5a:	79fb      	ldrb	r3, [r7, #7]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d10e      	bne.n	8005e7e <BSP_LED_Init+0x76>
 8005e60:	2300      	movs	r3, #0
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	4b21      	ldr	r3, [pc, #132]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	4a20      	ldr	r2, [pc, #128]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e6a:	f043 0308 	orr.w	r3, r3, #8
 8005e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e70:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	e010      	b.n	8005ea0 <BSP_LED_Init+0x98>
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d10d      	bne.n	8005ea0 <BSP_LED_Init+0x98>
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	4b18      	ldr	r3, [pc, #96]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	4a17      	ldr	r2, [pc, #92]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e8e:	f043 0308 	orr.w	r3, r3, #8
 8005e92:	6313      	str	r3, [r2, #48]	; 0x30
 8005e94:	4b15      	ldr	r3, [pc, #84]	; (8005eec <BSP_LED_Init+0xe4>)
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <BSP_LED_Init+0xe8>)
 8005ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	4a0e      	ldr	r2, [pc, #56]	; (8005ef4 <BSP_LED_Init+0xec>)
 8005eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ebe:	f107 021c 	add.w	r2, r7, #28
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fc fbcd 	bl	8002664 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <BSP_LED_Init+0xec>)
 8005ece:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	4a06      	ldr	r2, [pc, #24]	; (8005ef0 <BSP_LED_Init+0xe8>)
 8005ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eda:	2200      	movs	r2, #0
 8005edc:	4619      	mov	r1, r3
 8005ede:	f7fc fe41 	bl	8002b64 <HAL_GPIO_WritePin>
}
 8005ee2:	bf00      	nop
 8005ee4:	3730      	adds	r7, #48	; 0x30
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	08009140 	.word	0x08009140
 8005ef4:	20000058 	.word	0x20000058

08005ef8 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <BSP_LED_On+0x2c>)
 8005f06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	4a06      	ldr	r2, [pc, #24]	; (8005f28 <BSP_LED_On+0x30>)
 8005f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f12:	2201      	movs	r2, #1
 8005f14:	4619      	mov	r1, r3
 8005f16:	f7fc fe25 	bl	8002b64 <HAL_GPIO_WritePin>
}
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000058 	.word	0x20000058
 8005f28:	08009140 	.word	0x08009140

08005f2c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	460a      	mov	r2, r1
 8005f36:	71fb      	strb	r3, [r7, #7]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10d      	bne.n	8005f5e <BSP_PB_Init+0x32>
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <BSP_PB_Init+0xa4>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	4a21      	ldr	r2, [pc, #132]	; (8005fd0 <BSP_PB_Init+0xa4>)
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	6313      	str	r3, [r2, #48]	; 0x30
 8005f52:	4b1f      	ldr	r3, [pc, #124]	; (8005fd0 <BSP_PB_Init+0xa4>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	60bb      	str	r3, [r7, #8]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8005f5e:	79bb      	ldrb	r3, [r7, #6]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d111      	bne.n	8005f88 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005f64:	2301      	movs	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005f70:	2302      	movs	r3, #2
 8005f72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	4a17      	ldr	r2, [pc, #92]	; (8005fd4 <BSP_PB_Init+0xa8>)
 8005f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f7c:	f107 020c 	add.w	r2, r7, #12
 8005f80:	4611      	mov	r1, r2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fc fb6e 	bl	8002664 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8005f88:	79bb      	ldrb	r3, [r7, #6]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d11c      	bne.n	8005fc8 <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005f8e:	2301      	movs	r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8005f96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005f9a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	4a0d      	ldr	r2, [pc, #52]	; (8005fd4 <BSP_PB_Init+0xa8>)
 8005fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa4:	f107 020c 	add.w	r2, r7, #12
 8005fa8:	4611      	mov	r1, r2
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fc fb5a 	bl	8002664 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005fb0:	2306      	movs	r3, #6
 8005fb2:	b25b      	sxtb	r3, r3
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	210f      	movs	r1, #15
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fb ff40 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005fbe:	2306      	movs	r3, #6
 8005fc0:	b25b      	sxtb	r3, r3
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fb ff57 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  }
}
 8005fc8:	bf00      	nop
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	20000068 	.word	0x20000068

08005fd8 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	4a06      	ldr	r2, [pc, #24]	; (8006000 <BSP_PB_GetState+0x28>)
 8005fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fea:	2201      	movs	r2, #1
 8005fec:	4611      	mov	r1, r2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fc fda0 	bl	8002b34 <HAL_GPIO_ReadPin>
 8005ff4:	4603      	mov	r3, r0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000068 	.word	0x20000068

08006004 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8006008:	4814      	ldr	r0, [pc, #80]	; (800605c <I2Cx_Init+0x58>)
 800600a:	f7fd fa71 	bl	80034f0 <HAL_I2C_GetState>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d121      	bne.n	8006058 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8006014:	4b11      	ldr	r3, [pc, #68]	; (800605c <I2Cx_Init+0x58>)
 8006016:	4a12      	ldr	r2, [pc, #72]	; (8006060 <I2Cx_Init+0x5c>)
 8006018:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800601a:	4b10      	ldr	r3, [pc, #64]	; (800605c <I2Cx_Init+0x58>)
 800601c:	2243      	movs	r2, #67	; 0x43
 800601e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8006020:	4b0e      	ldr	r3, [pc, #56]	; (800605c <I2Cx_Init+0x58>)
 8006022:	4a10      	ldr	r2, [pc, #64]	; (8006064 <I2Cx_Init+0x60>)
 8006024:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006026:	4b0d      	ldr	r3, [pc, #52]	; (800605c <I2Cx_Init+0x58>)
 8006028:	2200      	movs	r2, #0
 800602a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <I2Cx_Init+0x58>)
 800602e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006032:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8006034:	4b09      	ldr	r3, [pc, #36]	; (800605c <I2Cx_Init+0x58>)
 8006036:	2200      	movs	r2, #0
 8006038:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800603a:	4b08      	ldr	r3, [pc, #32]	; (800605c <I2Cx_Init+0x58>)
 800603c:	2200      	movs	r2, #0
 800603e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <I2Cx_Init+0x58>)
 8006042:	2200      	movs	r2, #0
 8006044:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <I2Cx_Init+0x58>)
 8006048:	2200      	movs	r2, #0
 800604a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800604c:	4803      	ldr	r0, [pc, #12]	; (800605c <I2Cx_Init+0x58>)
 800604e:	f000 f86b 	bl	8006128 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8006052:	4802      	ldr	r0, [pc, #8]	; (800605c <I2Cx_Init+0x58>)
 8006054:	f7fc fdb8 	bl	8002bc8 <HAL_I2C_Init>
  }
}
 8006058:	bf00      	nop
 800605a:	bd80      	pop	{r7, pc}
 800605c:	200005b0 	.word	0x200005b0
 8006060:	40005400 	.word	0x40005400
 8006064:	000186a0 	.word	0x000186a0

08006068 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af04      	add	r7, sp, #16
 800606e:	4603      	mov	r3, r0
 8006070:	80fb      	strh	r3, [r7, #6]
 8006072:	460b      	mov	r3, r1
 8006074:	717b      	strb	r3, [r7, #5]
 8006076:	4613      	mov	r3, r2
 8006078:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800607e:	797b      	ldrb	r3, [r7, #5]
 8006080:	b29a      	uxth	r2, r3
 8006082:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <I2Cx_WriteData+0x48>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	88f9      	ldrh	r1, [r7, #6]
 8006088:	9302      	str	r3, [sp, #8]
 800608a:	2301      	movs	r3, #1
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	1d3b      	adds	r3, r7, #4
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	2301      	movs	r3, #1
 8006094:	4807      	ldr	r0, [pc, #28]	; (80060b4 <I2Cx_WriteData+0x4c>)
 8006096:	f7fc ff0b 	bl	8002eb0 <HAL_I2C_Mem_Write>
 800609a:	4603      	mov	r3, r0
 800609c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80060a4:	f000 f834 	bl	8006110 <I2Cx_Error>
  }
}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	2000006c 	.word	0x2000006c
 80060b4:	200005b0 	.word	0x200005b0

080060b8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af04      	add	r7, sp, #16
 80060be:	4603      	mov	r3, r0
 80060c0:	460a      	mov	r2, r1
 80060c2:	80fb      	strh	r3, [r7, #6]
 80060c4:	4613      	mov	r3, r2
 80060c6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80060d0:	797b      	ldrb	r3, [r7, #5]
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <I2Cx_ReadData+0x50>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	88f9      	ldrh	r1, [r7, #6]
 80060da:	9302      	str	r3, [sp, #8]
 80060dc:	2301      	movs	r3, #1
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	f107 030e 	add.w	r3, r7, #14
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	2301      	movs	r3, #1
 80060e8:	4808      	ldr	r0, [pc, #32]	; (800610c <I2Cx_ReadData+0x54>)
 80060ea:	f7fc ffdb 	bl	80030a4 <HAL_I2C_Mem_Read>
 80060ee:	4603      	mov	r3, r0
 80060f0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80060f8:	f000 f80a 	bl	8006110 <I2Cx_Error>
  }
  return value;
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	2000006c 	.word	0x2000006c
 800610c:	200005b0 	.word	0x200005b0

08006110 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8006114:	4803      	ldr	r0, [pc, #12]	; (8006124 <I2Cx_Error+0x14>)
 8006116:	f7fc fe9b 	bl	8002e50 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800611a:	f7ff ff73 	bl	8006004 <I2Cx_Init>
}
 800611e:	bf00      	nop
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	200005b0 	.word	0x200005b0

08006128 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	; 0x28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8006130:	2300      	movs	r3, #0
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	4b25      	ldr	r3, [pc, #148]	; (80061cc <I2Cx_MspInit+0xa4>)
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	4a24      	ldr	r2, [pc, #144]	; (80061cc <I2Cx_MspInit+0xa4>)
 800613a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800613e:	6413      	str	r3, [r2, #64]	; 0x40
 8006140:	4b22      	ldr	r3, [pc, #136]	; (80061cc <I2Cx_MspInit+0xa4>)
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <I2Cx_MspInit+0xa4>)
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	4a1d      	ldr	r2, [pc, #116]	; (80061cc <I2Cx_MspInit+0xa4>)
 8006156:	f043 0302 	orr.w	r3, r3, #2
 800615a:	6313      	str	r3, [r2, #48]	; 0x30
 800615c:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <I2Cx_MspInit+0xa4>)
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8006168:	f44f 7310 	mov.w	r3, #576	; 0x240
 800616c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800616e:	2312      	movs	r3, #18
 8006170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8006176:	2302      	movs	r3, #2
 8006178:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800617a:	2304      	movs	r3, #4
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800617e:	f107 0314 	add.w	r3, r7, #20
 8006182:	4619      	mov	r1, r3
 8006184:	4812      	ldr	r0, [pc, #72]	; (80061d0 <I2Cx_MspInit+0xa8>)
 8006186:	f7fc fa6d 	bl	8002664 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800618a:	4b10      	ldr	r3, [pc, #64]	; (80061cc <I2Cx_MspInit+0xa4>)
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	4a0f      	ldr	r2, [pc, #60]	; (80061cc <I2Cx_MspInit+0xa4>)
 8006190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006194:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8006196:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <I2Cx_MspInit+0xa4>)
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	4a0c      	ldr	r2, [pc, #48]	; (80061cc <I2Cx_MspInit+0xa4>)
 800619c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061a0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80061a2:	2200      	movs	r2, #0
 80061a4:	210f      	movs	r1, #15
 80061a6:	201f      	movs	r0, #31
 80061a8:	f7fb fe49 	bl	8001e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80061ac:	201f      	movs	r0, #31
 80061ae:	f7fb fe62 	bl	8001e76 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80061b2:	2200      	movs	r2, #0
 80061b4:	210f      	movs	r1, #15
 80061b6:	2020      	movs	r0, #32
 80061b8:	f7fb fe41 	bl	8001e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80061bc:	2020      	movs	r0, #32
 80061be:	f7fb fe5a 	bl	8001e76 <HAL_NVIC_EnableIRQ>
}
 80061c2:	bf00      	nop
 80061c4:	3728      	adds	r7, #40	; 0x28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40023800 	.word	0x40023800
 80061d0:	40020400 	.word	0x40020400

080061d4 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80061da:	2300      	movs	r3, #0
 80061dc:	603b      	str	r3, [r7, #0]
 80061de:	4b17      	ldr	r3, [pc, #92]	; (800623c <AUDIO_IO_Init+0x68>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	4a16      	ldr	r2, [pc, #88]	; (800623c <AUDIO_IO_Init+0x68>)
 80061e4:	f043 0308 	orr.w	r3, r3, #8
 80061e8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ea:	4b14      	ldr	r3, [pc, #80]	; (800623c <AUDIO_IO_Init+0x68>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 80061f6:	2310      	movs	r3, #16
 80061f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061fa:	2301      	movs	r3, #1
 80061fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80061fe:	2302      	movs	r3, #2
 8006200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8006202:	2300      	movs	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8006206:	1d3b      	adds	r3, r7, #4
 8006208:	4619      	mov	r1, r3
 800620a:	480d      	ldr	r0, [pc, #52]	; (8006240 <AUDIO_IO_Init+0x6c>)
 800620c:	f7fc fa2a 	bl	8002664 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8006210:	f7ff fef8 	bl	8006004 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8006214:	2200      	movs	r2, #0
 8006216:	2110      	movs	r1, #16
 8006218:	4809      	ldr	r0, [pc, #36]	; (8006240 <AUDIO_IO_Init+0x6c>)
 800621a:	f7fc fca3 	bl	8002b64 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800621e:	2005      	movs	r0, #5
 8006220:	f7fb fcea 	bl	8001bf8 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8006224:	2201      	movs	r2, #1
 8006226:	2110      	movs	r1, #16
 8006228:	4805      	ldr	r0, [pc, #20]	; (8006240 <AUDIO_IO_Init+0x6c>)
 800622a:	f7fc fc9b 	bl	8002b64 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800622e:	2005      	movs	r0, #5
 8006230:	f7fb fce2 	bl	8001bf8 <HAL_Delay>
}
 8006234:	bf00      	nop
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40023800 	.word	0x40023800
 8006240:	40020c00 	.word	0x40020c00

08006244 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  
}
 8006248:	bf00      	nop
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b082      	sub	sp, #8
 8006256:	af00      	add	r7, sp, #0
 8006258:	4603      	mov	r3, r0
 800625a:	71fb      	strb	r3, [r7, #7]
 800625c:	460b      	mov	r3, r1
 800625e:	71bb      	strb	r3, [r7, #6]
 8006260:	4613      	mov	r3, r2
 8006262:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	b29b      	uxth	r3, r3
 8006268:	797a      	ldrb	r2, [r7, #5]
 800626a:	79b9      	ldrb	r1, [r7, #6]
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fefb 	bl	8006068 <I2Cx_WriteData>
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	4603      	mov	r3, r0
 8006282:	460a      	mov	r2, r1
 8006284:	71fb      	strb	r3, [r7, #7]
 8006286:	4613      	mov	r3, r2
 8006288:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	b29b      	uxth	r3, r3
 800628e:	79ba      	ldrb	r2, [r7, #6]
 8006290:	4611      	mov	r1, r2
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff ff10 	bl	80060b8 <I2Cx_ReadData>
 8006298:	4603      	mov	r3, r0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <BSP_AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80062a4:	b590      	push	{r4, r7, lr}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	603a      	str	r2, [r7, #0]
 80062ae:	80fb      	strh	r3, [r7, #6]
 80062b0:	460b      	mov	r3, r1
 80062b2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80062b8:	2200      	movs	r2, #0
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	481c      	ldr	r0, [pc, #112]	; (8006330 <BSP_AUDIO_OUT_Init+0x8c>)
 80062be:	f000 f89f 	bl	8006400 <BSP_AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80062c2:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <BSP_AUDIO_OUT_Init+0x8c>)
 80062c4:	4a1b      	ldr	r2, [pc, #108]	; (8006334 <BSP_AUDIO_OUT_Init+0x90>)
 80062c6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80062c8:	4819      	ldr	r0, [pc, #100]	; (8006330 <BSP_AUDIO_OUT_Init+0x8c>)
 80062ca:	f7fd fe63 	bl	8003f94 <HAL_I2S_GetState>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d103      	bne.n	80062dc <BSP_AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80062d4:	2100      	movs	r1, #0
 80062d6:	4816      	ldr	r0, [pc, #88]	; (8006330 <BSP_AUDIO_OUT_Init+0x8c>)
 80062d8:	f000 f8f0 	bl	80064bc <BSP_AUDIO_OUT_MspInit>
  }
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80062dc:	6838      	ldr	r0, [r7, #0]
 80062de:	f000 f9b5 	bl	800664c <I2S3_Init>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <BSP_AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
  }
  
  if(ret == AUDIO_OK)
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10e      	bne.n	8006310 <BSP_AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80062f2:	4b11      	ldr	r3, [pc, #68]	; (8006338 <BSP_AUDIO_OUT_Init+0x94>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2094      	movs	r0, #148	; 0x94
 80062f8:	4798      	blx	r3
 80062fa:	4603      	mov	r3, r0
 80062fc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8006300:	2be0      	cmp	r3, #224	; 0xe0
 8006302:	d103      	bne.n	800630c <BSP_AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8006304:	4b0d      	ldr	r3, [pc, #52]	; (800633c <BSP_AUDIO_OUT_Init+0x98>)
 8006306:	4a0c      	ldr	r2, [pc, #48]	; (8006338 <BSP_AUDIO_OUT_Init+0x94>)
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	e001      	b.n	8006310 <BSP_AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d107      	bne.n	8006326 <BSP_AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8006316:	4b09      	ldr	r3, [pc, #36]	; (800633c <BSP_AUDIO_OUT_Init+0x98>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681c      	ldr	r4, [r3, #0]
 800631c:	797a      	ldrb	r2, [r7, #5]
 800631e:	88f9      	ldrh	r1, [r7, #6]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2094      	movs	r0, #148	; 0x94
 8006324:	47a0      	blx	r4
  }
  
  return ret;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	bd90      	pop	{r4, r7, pc}
 8006330:	2000efbc 	.word	0x2000efbc
 8006334:	40003c00 	.word	0x40003c00
 8006338:	20000024 	.word	0x20000024
 800633c:	20000604 	.word	0x20000604

08006340 <BSP_AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800634a:	4b10      	ldr	r3, [pc, #64]	; (800638c <BSP_AUDIO_OUT_Play+0x4c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	b292      	uxth	r2, r2
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	2094      	movs	r0, #148	; 0x94
 8006358:	4798      	blx	r3
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <BSP_AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e00f      	b.n	8006384 <BSP_AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800636a:	d203      	bcs.n	8006374 <BSP_AUDIO_OUT_Play+0x34>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	b29b      	uxth	r3, r3
 8006372:	e001      	b.n	8006378 <BSP_AUDIO_OUT_Play+0x38>
 8006374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006378:	461a      	mov	r2, r3
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4804      	ldr	r0, [pc, #16]	; (8006390 <BSP_AUDIO_OUT_Play+0x50>)
 800637e:	f7fd fd61 	bl	8003e44 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8006382:	2300      	movs	r3, #0
  }
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000604 	.word	0x20000604
 8006390:	2000efbc 	.word	0x2000efbc

08006394 <BSP_AUDIO_OUT_ChangeBuffer>:
  * @brief  Sends n-Bytes on the I2S interface.
  * @param  pData: Pointer to data address 
  * @param  Size: Number of data to be written
  */
void BSP_AUDIO_OUT_ChangeBuffer(uint16_t *pData, uint16_t Size)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	807b      	strh	r3, [r7, #2]
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 80063a0:	887b      	ldrh	r3, [r7, #2]
 80063a2:	461a      	mov	r2, r3
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4803      	ldr	r0, [pc, #12]	; (80063b4 <BSP_AUDIO_OUT_ChangeBuffer+0x20>)
 80063a8:	f7fd fd4c 	bl	8003e44 <HAL_I2S_Transmit_DMA>
}
 80063ac:	bf00      	nop
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	2000efbc 	.word	0x2000efbc

080063b8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a04      	ldr	r2, [pc, #16]	; (80063d8 <HAL_I2S_TxCpltCallback+0x20>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d101      	bne.n	80063ce <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 80063ca:	f7fb f8a3 	bl	8001514 <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40003c00 	.word	0x40003c00

080063dc <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a04      	ldr	r2, [pc, #16]	; (80063fc <HAL_I2S_TxHalfCpltCallback+0x20>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d101      	bne.n	80063f2 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80063ee:	f000 f925 	bl	800663c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40003c00 	.word	0x40003c00

08006400 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	; 0x30
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 800640c:	2300      	movs	r3, #0
 800640e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006412:	23ff      	movs	r3, #255	; 0xff
 8006414:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  
  for(index = 0; index < 8; index++)
 8006418:	2300      	movs	r3, #0
 800641a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800641e:	e010      	b.n	8006442 <BSP_AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8006420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006424:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <BSP_AUDIO_OUT_ClockConfig+0xb0>)
 8006426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	429a      	cmp	r2, r3
 800642e:	d103      	bne.n	8006438 <BSP_AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8006430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006434:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for(index = 0; index < 8; index++)
 8006438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800643c:	3301      	adds	r3, #1
 800643e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006446:	2b07      	cmp	r3, #7
 8006448:	d9ea      	bls.n	8006420 <BSP_AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800644a:	f107 0314 	add.w	r3, r7, #20
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fe94 	bl	800517c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8006454:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	2b00      	cmp	r3, #0
 800645e:	d115      	bne.n	800648c <BSP_AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8006460:	2301      	movs	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8006464:	2308      	movs	r3, #8
 8006466:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8006468:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800646c:	4a11      	ldr	r2, [pc, #68]	; (80064b4 <BSP_AUDIO_OUT_ClockConfig+0xb4>)
 800646e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006472:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8006474:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006478:	4a0f      	ldr	r2, [pc, #60]	; (80064b8 <BSP_AUDIO_OUT_ClockConfig+0xb8>)
 800647a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800647e:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8006480:	f107 0314 	add.w	r3, r7, #20
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe fd89 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800648a:	e00d      	b.n	80064a8 <BSP_AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800648c:	2301      	movs	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8006490:	2308      	movs	r3, #8
 8006492:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8006494:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006498:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800649a:	2303      	movs	r3, #3
 800649c:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800649e:	f107 0314 	add.w	r3, r7, #20
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fd7a 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
}
 80064a8:	bf00      	nop
 80064aa:	3730      	adds	r7, #48	; 0x30
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	08009148 	.word	0x08009148
 80064b4:	08009168 	.word	0x08009168
 80064b8:	08009188 	.word	0x08009188

080064bc <BSP_AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08c      	sub	sp, #48	; 0x30
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	4b56      	ldr	r3, [pc, #344]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	4a55      	ldr	r2, [pc, #340]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 80064d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d4:	6413      	str	r3, [r2, #64]	; 0x40
 80064d6:	4b53      	ldr	r3, [pc, #332]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064de:	61bb      	str	r3, [r7, #24]
 80064e0:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	4b4f      	ldr	r3, [pc, #316]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	4a4e      	ldr	r2, [pc, #312]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 80064ec:	f043 0304 	orr.w	r3, r3, #4
 80064f0:	6313      	str	r3, [r2, #48]	; 0x30
 80064f2:	4b4c      	ldr	r3, [pc, #304]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80064fe:	2300      	movs	r3, #0
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	4b48      	ldr	r3, [pc, #288]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	4a47      	ldr	r2, [pc, #284]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006508:	f043 0301 	orr.w	r3, r3, #1
 800650c:	6313      	str	r3, [r2, #48]	; 0x30
 800650e:	4b45      	ldr	r3, [pc, #276]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 800651a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800651e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8006520:	2302      	movs	r3, #2
 8006522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8006524:	2300      	movs	r3, #0
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8006528:	2302      	movs	r3, #2
 800652a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800652c:	2306      	movs	r3, #6
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8006530:	f107 031c 	add.w	r3, r7, #28
 8006534:	4619      	mov	r1, r3
 8006536:	483c      	ldr	r0, [pc, #240]	; (8006628 <BSP_AUDIO_OUT_MspInit+0x16c>)
 8006538:	f7fc f894 	bl	8002664 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 800653c:	2310      	movs	r3, #16
 800653e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8006540:	f107 031c 	add.w	r3, r7, #28
 8006544:	4619      	mov	r1, r3
 8006546:	4839      	ldr	r0, [pc, #228]	; (800662c <BSP_AUDIO_OUT_MspInit+0x170>)
 8006548:	f7fc f88c 	bl	8002664 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	4b34      	ldr	r3, [pc, #208]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	4a33      	ldr	r2, [pc, #204]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006556:	f043 0304 	orr.w	r3, r3, #4
 800655a:	6313      	str	r3, [r2, #48]	; 0x30
 800655c:	4b31      	ldr	r3, [pc, #196]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8006568:	2380      	movs	r3, #128	; 0x80
 800656a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 800656c:	f107 031c 	add.w	r3, r7, #28
 8006570:	4619      	mov	r1, r3
 8006572:	482d      	ldr	r0, [pc, #180]	; (8006628 <BSP_AUDIO_OUT_MspInit+0x16c>)
 8006574:	f7fc f876 	bl	8002664 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8006578:	2300      	movs	r3, #0
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	4b29      	ldr	r3, [pc, #164]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	4a28      	ldr	r2, [pc, #160]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006582:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006586:	6313      	str	r3, [r2, #48]	; 0x30
 8006588:	4b26      	ldr	r3, [pc, #152]	; (8006624 <BSP_AUDIO_OUT_MspInit+0x168>)
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006590:	60bb      	str	r3, [r7, #8]
 8006592:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a25      	ldr	r2, [pc, #148]	; (8006630 <BSP_AUDIO_OUT_MspInit+0x174>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d136      	bne.n	800660c <BSP_AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800659e:	4b25      	ldr	r3, [pc, #148]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80065a4:	4b23      	ldr	r3, [pc, #140]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065a6:	2240      	movs	r2, #64	; 0x40
 80065a8:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80065aa:	4b22      	ldr	r3, [pc, #136]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 80065b0:	4b20      	ldr	r3, [pc, #128]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065b6:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80065b8:	4b1e      	ldr	r3, [pc, #120]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065be:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80065c0:	4b1c      	ldr	r3, [pc, #112]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065c6:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80065c8:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80065ce:	4b19      	ldr	r3, [pc, #100]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065d4:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80065d6:	4b17      	ldr	r3, [pc, #92]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065d8:	2204      	movs	r2, #4
 80065da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80065dc:	4b15      	ldr	r3, [pc, #84]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065de:	2203      	movs	r2, #3
 80065e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80065e2:	4b14      	ldr	r3, [pc, #80]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80065e8:	4b12      	ldr	r3, [pc, #72]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80065ee:	4b11      	ldr	r3, [pc, #68]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065f0:	4a11      	ldr	r2, [pc, #68]	; (8006638 <BSP_AUDIO_OUT_MspInit+0x17c>)
 80065f2:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a0f      	ldr	r2, [pc, #60]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
 80065fa:	4a0e      	ldr	r2, [pc, #56]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 8006600:	480c      	ldr	r0, [pc, #48]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 8006602:	f7fb fd0f 	bl	8002024 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 8006606:	480b      	ldr	r0, [pc, #44]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x178>)
 8006608:	f7fb fc5e 	bl	8001ec8 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800660c:	2200      	movs	r2, #0
 800660e:	210e      	movs	r1, #14
 8006610:	202f      	movs	r0, #47	; 0x2f
 8006612:	f7fb fc14 	bl	8001e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 8006616:	202f      	movs	r0, #47	; 0x2f
 8006618:	f7fb fc2d 	bl	8001e76 <HAL_NVIC_EnableIRQ>
}
 800661c:	bf00      	nop
 800661e:	3730      	adds	r7, #48	; 0x30
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40023800 	.word	0x40023800
 8006628:	40020800 	.word	0x40020800
 800662c:	40020000 	.word	0x40020000
 8006630:	40003c00 	.word	0x40003c00
 8006634:	20000608 	.word	0x20000608
 8006638:	400260b8 	.word	0x400260b8

0800663c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

/**
  * @brief  Manages the DMA Half Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
}
 8006640:	bf00      	nop
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
	...

0800664c <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8006654:	4b17      	ldr	r3, [pc, #92]	; (80066b4 <I2S3_Init+0x68>)
 8006656:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <I2S3_Init+0x6c>)
 8006658:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800665a:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <I2S3_Init+0x68>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	4b14      	ldr	r3, [pc, #80]	; (80066b4 <I2S3_Init+0x68>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006668:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800666a:	4a12      	ldr	r2, [pc, #72]	; (80066b4 <I2S3_Init+0x68>)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8006670:	4b10      	ldr	r3, [pc, #64]	; (80066b4 <I2S3_Init+0x68>)
 8006672:	2200      	movs	r2, #0
 8006674:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8006676:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <I2S3_Init+0x68>)
 8006678:	2200      	movs	r2, #0
 800667a:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 800667c:	4b0d      	ldr	r3, [pc, #52]	; (80066b4 <I2S3_Init+0x68>)
 800667e:	2200      	movs	r2, #0
 8006680:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8006682:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <I2S3_Init+0x68>)
 8006684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006688:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800668a:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <I2S3_Init+0x68>)
 800668c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006690:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8006692:	4b08      	ldr	r3, [pc, #32]	; (80066b4 <I2S3_Init+0x68>)
 8006694:	2200      	movs	r2, #0
 8006696:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8006698:	4806      	ldr	r0, [pc, #24]	; (80066b4 <I2S3_Init+0x68>)
 800669a:	f7fd fa93 	bl	8003bc4 <HAL_I2S_Init>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 80066a8:	2300      	movs	r3, #0
  }
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	2000efbc 	.word	0x2000efbc
 80066b8:	40003c00 	.word	0x40003c00

080066bc <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80066c4:	f7fa fbfa 	bl	8000ebc <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a07      	ldr	r2, [pc, #28]	; (80066fc <HAL_I2S_ErrorCallback+0x2c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d101      	bne.n	80066e6 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80066e2:	f7fa fbe5 	bl	8000eb0 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a05      	ldr	r2, [pc, #20]	; (8006700 <HAL_I2S_ErrorCallback+0x30>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d101      	bne.n	80066f4 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 80066f0:	f7fa fbf0 	bl	8000ed4 <BSP_AUDIO_IN_Error_Callback>
  }
}
 80066f4:	bf00      	nop
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40003c00 	.word	0x40003c00
 8006700:	40003800 	.word	0x40003800

08006704 <__errno>:
 8006704:	4b01      	ldr	r3, [pc, #4]	; (800670c <__errno+0x8>)
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	20000070 	.word	0x20000070

08006710 <__libc_init_array>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	4d0d      	ldr	r5, [pc, #52]	; (8006748 <__libc_init_array+0x38>)
 8006714:	4c0d      	ldr	r4, [pc, #52]	; (800674c <__libc_init_array+0x3c>)
 8006716:	1b64      	subs	r4, r4, r5
 8006718:	10a4      	asrs	r4, r4, #2
 800671a:	2600      	movs	r6, #0
 800671c:	42a6      	cmp	r6, r4
 800671e:	d109      	bne.n	8006734 <__libc_init_array+0x24>
 8006720:	4d0b      	ldr	r5, [pc, #44]	; (8006750 <__libc_init_array+0x40>)
 8006722:	4c0c      	ldr	r4, [pc, #48]	; (8006754 <__libc_init_array+0x44>)
 8006724:	f002 fcf0 	bl	8009108 <_init>
 8006728:	1b64      	subs	r4, r4, r5
 800672a:	10a4      	asrs	r4, r4, #2
 800672c:	2600      	movs	r6, #0
 800672e:	42a6      	cmp	r6, r4
 8006730:	d105      	bne.n	800673e <__libc_init_array+0x2e>
 8006732:	bd70      	pop	{r4, r5, r6, pc}
 8006734:	f855 3b04 	ldr.w	r3, [r5], #4
 8006738:	4798      	blx	r3
 800673a:	3601      	adds	r6, #1
 800673c:	e7ee      	b.n	800671c <__libc_init_array+0xc>
 800673e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006742:	4798      	blx	r3
 8006744:	3601      	adds	r6, #1
 8006746:	e7f2      	b.n	800672e <__libc_init_array+0x1e>
 8006748:	08009594 	.word	0x08009594
 800674c:	08009594 	.word	0x08009594
 8006750:	08009594 	.word	0x08009594
 8006754:	08009598 	.word	0x08009598

08006758 <memcpy>:
 8006758:	440a      	add	r2, r1
 800675a:	4291      	cmp	r1, r2
 800675c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006760:	d100      	bne.n	8006764 <memcpy+0xc>
 8006762:	4770      	bx	lr
 8006764:	b510      	push	{r4, lr}
 8006766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800676a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800676e:	4291      	cmp	r1, r2
 8006770:	d1f9      	bne.n	8006766 <memcpy+0xe>
 8006772:	bd10      	pop	{r4, pc}

08006774 <memset>:
 8006774:	4402      	add	r2, r0
 8006776:	4603      	mov	r3, r0
 8006778:	4293      	cmp	r3, r2
 800677a:	d100      	bne.n	800677e <memset+0xa>
 800677c:	4770      	bx	lr
 800677e:	f803 1b01 	strb.w	r1, [r3], #1
 8006782:	e7f9      	b.n	8006778 <memset+0x4>

08006784 <__cvt>:
 8006784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006788:	ec55 4b10 	vmov	r4, r5, d0
 800678c:	2d00      	cmp	r5, #0
 800678e:	460e      	mov	r6, r1
 8006790:	4619      	mov	r1, r3
 8006792:	462b      	mov	r3, r5
 8006794:	bfbb      	ittet	lt
 8006796:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800679a:	461d      	movlt	r5, r3
 800679c:	2300      	movge	r3, #0
 800679e:	232d      	movlt	r3, #45	; 0x2d
 80067a0:	700b      	strb	r3, [r1, #0]
 80067a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067a8:	4691      	mov	r9, r2
 80067aa:	f023 0820 	bic.w	r8, r3, #32
 80067ae:	bfbc      	itt	lt
 80067b0:	4622      	movlt	r2, r4
 80067b2:	4614      	movlt	r4, r2
 80067b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067b8:	d005      	beq.n	80067c6 <__cvt+0x42>
 80067ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067be:	d100      	bne.n	80067c2 <__cvt+0x3e>
 80067c0:	3601      	adds	r6, #1
 80067c2:	2102      	movs	r1, #2
 80067c4:	e000      	b.n	80067c8 <__cvt+0x44>
 80067c6:	2103      	movs	r1, #3
 80067c8:	ab03      	add	r3, sp, #12
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	ab02      	add	r3, sp, #8
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	ec45 4b10 	vmov	d0, r4, r5
 80067d4:	4653      	mov	r3, sl
 80067d6:	4632      	mov	r2, r6
 80067d8:	f000 fcca 	bl	8007170 <_dtoa_r>
 80067dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067e0:	4607      	mov	r7, r0
 80067e2:	d102      	bne.n	80067ea <__cvt+0x66>
 80067e4:	f019 0f01 	tst.w	r9, #1
 80067e8:	d022      	beq.n	8006830 <__cvt+0xac>
 80067ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067ee:	eb07 0906 	add.w	r9, r7, r6
 80067f2:	d110      	bne.n	8006816 <__cvt+0x92>
 80067f4:	783b      	ldrb	r3, [r7, #0]
 80067f6:	2b30      	cmp	r3, #48	; 0x30
 80067f8:	d10a      	bne.n	8006810 <__cvt+0x8c>
 80067fa:	2200      	movs	r2, #0
 80067fc:	2300      	movs	r3, #0
 80067fe:	4620      	mov	r0, r4
 8006800:	4629      	mov	r1, r5
 8006802:	f7fa f969 	bl	8000ad8 <__aeabi_dcmpeq>
 8006806:	b918      	cbnz	r0, 8006810 <__cvt+0x8c>
 8006808:	f1c6 0601 	rsb	r6, r6, #1
 800680c:	f8ca 6000 	str.w	r6, [sl]
 8006810:	f8da 3000 	ldr.w	r3, [sl]
 8006814:	4499      	add	r9, r3
 8006816:	2200      	movs	r2, #0
 8006818:	2300      	movs	r3, #0
 800681a:	4620      	mov	r0, r4
 800681c:	4629      	mov	r1, r5
 800681e:	f7fa f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006822:	b108      	cbz	r0, 8006828 <__cvt+0xa4>
 8006824:	f8cd 900c 	str.w	r9, [sp, #12]
 8006828:	2230      	movs	r2, #48	; 0x30
 800682a:	9b03      	ldr	r3, [sp, #12]
 800682c:	454b      	cmp	r3, r9
 800682e:	d307      	bcc.n	8006840 <__cvt+0xbc>
 8006830:	9b03      	ldr	r3, [sp, #12]
 8006832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006834:	1bdb      	subs	r3, r3, r7
 8006836:	4638      	mov	r0, r7
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	b004      	add	sp, #16
 800683c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006840:	1c59      	adds	r1, r3, #1
 8006842:	9103      	str	r1, [sp, #12]
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	e7f0      	b.n	800682a <__cvt+0xa6>

08006848 <__exponent>:
 8006848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800684a:	4603      	mov	r3, r0
 800684c:	2900      	cmp	r1, #0
 800684e:	bfb8      	it	lt
 8006850:	4249      	neglt	r1, r1
 8006852:	f803 2b02 	strb.w	r2, [r3], #2
 8006856:	bfb4      	ite	lt
 8006858:	222d      	movlt	r2, #45	; 0x2d
 800685a:	222b      	movge	r2, #43	; 0x2b
 800685c:	2909      	cmp	r1, #9
 800685e:	7042      	strb	r2, [r0, #1]
 8006860:	dd2a      	ble.n	80068b8 <__exponent+0x70>
 8006862:	f10d 0407 	add.w	r4, sp, #7
 8006866:	46a4      	mov	ip, r4
 8006868:	270a      	movs	r7, #10
 800686a:	46a6      	mov	lr, r4
 800686c:	460a      	mov	r2, r1
 800686e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006872:	fb07 1516 	mls	r5, r7, r6, r1
 8006876:	3530      	adds	r5, #48	; 0x30
 8006878:	2a63      	cmp	r2, #99	; 0x63
 800687a:	f104 34ff 	add.w	r4, r4, #4294967295
 800687e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006882:	4631      	mov	r1, r6
 8006884:	dcf1      	bgt.n	800686a <__exponent+0x22>
 8006886:	3130      	adds	r1, #48	; 0x30
 8006888:	f1ae 0502 	sub.w	r5, lr, #2
 800688c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006890:	1c44      	adds	r4, r0, #1
 8006892:	4629      	mov	r1, r5
 8006894:	4561      	cmp	r1, ip
 8006896:	d30a      	bcc.n	80068ae <__exponent+0x66>
 8006898:	f10d 0209 	add.w	r2, sp, #9
 800689c:	eba2 020e 	sub.w	r2, r2, lr
 80068a0:	4565      	cmp	r5, ip
 80068a2:	bf88      	it	hi
 80068a4:	2200      	movhi	r2, #0
 80068a6:	4413      	add	r3, r2
 80068a8:	1a18      	subs	r0, r3, r0
 80068aa:	b003      	add	sp, #12
 80068ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068b6:	e7ed      	b.n	8006894 <__exponent+0x4c>
 80068b8:	2330      	movs	r3, #48	; 0x30
 80068ba:	3130      	adds	r1, #48	; 0x30
 80068bc:	7083      	strb	r3, [r0, #2]
 80068be:	70c1      	strb	r1, [r0, #3]
 80068c0:	1d03      	adds	r3, r0, #4
 80068c2:	e7f1      	b.n	80068a8 <__exponent+0x60>

080068c4 <_printf_float>:
 80068c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	ed2d 8b02 	vpush	{d8}
 80068cc:	b08d      	sub	sp, #52	; 0x34
 80068ce:	460c      	mov	r4, r1
 80068d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068d4:	4616      	mov	r6, r2
 80068d6:	461f      	mov	r7, r3
 80068d8:	4605      	mov	r5, r0
 80068da:	f001 fa35 	bl	8007d48 <_localeconv_r>
 80068de:	f8d0 a000 	ldr.w	sl, [r0]
 80068e2:	4650      	mov	r0, sl
 80068e4:	f7f9 fc7c 	bl	80001e0 <strlen>
 80068e8:	2300      	movs	r3, #0
 80068ea:	930a      	str	r3, [sp, #40]	; 0x28
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	9305      	str	r3, [sp, #20]
 80068f0:	f8d8 3000 	ldr.w	r3, [r8]
 80068f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068f8:	3307      	adds	r3, #7
 80068fa:	f023 0307 	bic.w	r3, r3, #7
 80068fe:	f103 0208 	add.w	r2, r3, #8
 8006902:	f8c8 2000 	str.w	r2, [r8]
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800690e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006912:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006916:	9307      	str	r3, [sp, #28]
 8006918:	f8cd 8018 	str.w	r8, [sp, #24]
 800691c:	ee08 0a10 	vmov	s16, r0
 8006920:	4b9f      	ldr	r3, [pc, #636]	; (8006ba0 <_printf_float+0x2dc>)
 8006922:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006926:	f04f 32ff 	mov.w	r2, #4294967295
 800692a:	f7fa f907 	bl	8000b3c <__aeabi_dcmpun>
 800692e:	bb88      	cbnz	r0, 8006994 <_printf_float+0xd0>
 8006930:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006934:	4b9a      	ldr	r3, [pc, #616]	; (8006ba0 <_printf_float+0x2dc>)
 8006936:	f04f 32ff 	mov.w	r2, #4294967295
 800693a:	f7fa f8e1 	bl	8000b00 <__aeabi_dcmple>
 800693e:	bb48      	cbnz	r0, 8006994 <_printf_float+0xd0>
 8006940:	2200      	movs	r2, #0
 8006942:	2300      	movs	r3, #0
 8006944:	4640      	mov	r0, r8
 8006946:	4649      	mov	r1, r9
 8006948:	f7fa f8d0 	bl	8000aec <__aeabi_dcmplt>
 800694c:	b110      	cbz	r0, 8006954 <_printf_float+0x90>
 800694e:	232d      	movs	r3, #45	; 0x2d
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006954:	4b93      	ldr	r3, [pc, #588]	; (8006ba4 <_printf_float+0x2e0>)
 8006956:	4894      	ldr	r0, [pc, #592]	; (8006ba8 <_printf_float+0x2e4>)
 8006958:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800695c:	bf94      	ite	ls
 800695e:	4698      	movls	r8, r3
 8006960:	4680      	movhi	r8, r0
 8006962:	2303      	movs	r3, #3
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	9b05      	ldr	r3, [sp, #20]
 8006968:	f023 0204 	bic.w	r2, r3, #4
 800696c:	6022      	str	r2, [r4, #0]
 800696e:	f04f 0900 	mov.w	r9, #0
 8006972:	9700      	str	r7, [sp, #0]
 8006974:	4633      	mov	r3, r6
 8006976:	aa0b      	add	r2, sp, #44	; 0x2c
 8006978:	4621      	mov	r1, r4
 800697a:	4628      	mov	r0, r5
 800697c:	f000 f9d8 	bl	8006d30 <_printf_common>
 8006980:	3001      	adds	r0, #1
 8006982:	f040 8090 	bne.w	8006aa6 <_printf_float+0x1e2>
 8006986:	f04f 30ff 	mov.w	r0, #4294967295
 800698a:	b00d      	add	sp, #52	; 0x34
 800698c:	ecbd 8b02 	vpop	{d8}
 8006990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006994:	4642      	mov	r2, r8
 8006996:	464b      	mov	r3, r9
 8006998:	4640      	mov	r0, r8
 800699a:	4649      	mov	r1, r9
 800699c:	f7fa f8ce 	bl	8000b3c <__aeabi_dcmpun>
 80069a0:	b140      	cbz	r0, 80069b4 <_printf_float+0xf0>
 80069a2:	464b      	mov	r3, r9
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bfbc      	itt	lt
 80069a8:	232d      	movlt	r3, #45	; 0x2d
 80069aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069ae:	487f      	ldr	r0, [pc, #508]	; (8006bac <_printf_float+0x2e8>)
 80069b0:	4b7f      	ldr	r3, [pc, #508]	; (8006bb0 <_printf_float+0x2ec>)
 80069b2:	e7d1      	b.n	8006958 <_printf_float+0x94>
 80069b4:	6863      	ldr	r3, [r4, #4]
 80069b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80069ba:	9206      	str	r2, [sp, #24]
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	d13f      	bne.n	8006a40 <_printf_float+0x17c>
 80069c0:	2306      	movs	r3, #6
 80069c2:	6063      	str	r3, [r4, #4]
 80069c4:	9b05      	ldr	r3, [sp, #20]
 80069c6:	6861      	ldr	r1, [r4, #4]
 80069c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069cc:	2300      	movs	r3, #0
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	ab0a      	add	r3, sp, #40	; 0x28
 80069d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069d6:	ab09      	add	r3, sp, #36	; 0x24
 80069d8:	ec49 8b10 	vmov	d0, r8, r9
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069e4:	4628      	mov	r0, r5
 80069e6:	f7ff fecd 	bl	8006784 <__cvt>
 80069ea:	9b06      	ldr	r3, [sp, #24]
 80069ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069ee:	2b47      	cmp	r3, #71	; 0x47
 80069f0:	4680      	mov	r8, r0
 80069f2:	d108      	bne.n	8006a06 <_printf_float+0x142>
 80069f4:	1cc8      	adds	r0, r1, #3
 80069f6:	db02      	blt.n	80069fe <_printf_float+0x13a>
 80069f8:	6863      	ldr	r3, [r4, #4]
 80069fa:	4299      	cmp	r1, r3
 80069fc:	dd41      	ble.n	8006a82 <_printf_float+0x1be>
 80069fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a02:	fa5f fb8b 	uxtb.w	fp, fp
 8006a06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a0a:	d820      	bhi.n	8006a4e <_printf_float+0x18a>
 8006a0c:	3901      	subs	r1, #1
 8006a0e:	465a      	mov	r2, fp
 8006a10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a14:	9109      	str	r1, [sp, #36]	; 0x24
 8006a16:	f7ff ff17 	bl	8006848 <__exponent>
 8006a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a1c:	1813      	adds	r3, r2, r0
 8006a1e:	2a01      	cmp	r2, #1
 8006a20:	4681      	mov	r9, r0
 8006a22:	6123      	str	r3, [r4, #16]
 8006a24:	dc02      	bgt.n	8006a2c <_printf_float+0x168>
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	07d2      	lsls	r2, r2, #31
 8006a2a:	d501      	bpl.n	8006a30 <_printf_float+0x16c>
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	6123      	str	r3, [r4, #16]
 8006a30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d09c      	beq.n	8006972 <_printf_float+0xae>
 8006a38:	232d      	movs	r3, #45	; 0x2d
 8006a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a3e:	e798      	b.n	8006972 <_printf_float+0xae>
 8006a40:	9a06      	ldr	r2, [sp, #24]
 8006a42:	2a47      	cmp	r2, #71	; 0x47
 8006a44:	d1be      	bne.n	80069c4 <_printf_float+0x100>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1bc      	bne.n	80069c4 <_printf_float+0x100>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7b9      	b.n	80069c2 <_printf_float+0xfe>
 8006a4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a52:	d118      	bne.n	8006a86 <_printf_float+0x1c2>
 8006a54:	2900      	cmp	r1, #0
 8006a56:	6863      	ldr	r3, [r4, #4]
 8006a58:	dd0b      	ble.n	8006a72 <_printf_float+0x1ae>
 8006a5a:	6121      	str	r1, [r4, #16]
 8006a5c:	b913      	cbnz	r3, 8006a64 <_printf_float+0x1a0>
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	07d0      	lsls	r0, r2, #31
 8006a62:	d502      	bpl.n	8006a6a <_printf_float+0x1a6>
 8006a64:	3301      	adds	r3, #1
 8006a66:	440b      	add	r3, r1
 8006a68:	6123      	str	r3, [r4, #16]
 8006a6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a6c:	f04f 0900 	mov.w	r9, #0
 8006a70:	e7de      	b.n	8006a30 <_printf_float+0x16c>
 8006a72:	b913      	cbnz	r3, 8006a7a <_printf_float+0x1b6>
 8006a74:	6822      	ldr	r2, [r4, #0]
 8006a76:	07d2      	lsls	r2, r2, #31
 8006a78:	d501      	bpl.n	8006a7e <_printf_float+0x1ba>
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	e7f4      	b.n	8006a68 <_printf_float+0x1a4>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e7f2      	b.n	8006a68 <_printf_float+0x1a4>
 8006a82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a88:	4299      	cmp	r1, r3
 8006a8a:	db05      	blt.n	8006a98 <_printf_float+0x1d4>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	6121      	str	r1, [r4, #16]
 8006a90:	07d8      	lsls	r0, r3, #31
 8006a92:	d5ea      	bpl.n	8006a6a <_printf_float+0x1a6>
 8006a94:	1c4b      	adds	r3, r1, #1
 8006a96:	e7e7      	b.n	8006a68 <_printf_float+0x1a4>
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	bfd4      	ite	le
 8006a9c:	f1c1 0202 	rsble	r2, r1, #2
 8006aa0:	2201      	movgt	r2, #1
 8006aa2:	4413      	add	r3, r2
 8006aa4:	e7e0      	b.n	8006a68 <_printf_float+0x1a4>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	055a      	lsls	r2, r3, #21
 8006aaa:	d407      	bmi.n	8006abc <_printf_float+0x1f8>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	4642      	mov	r2, r8
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d12c      	bne.n	8006b14 <_printf_float+0x250>
 8006aba:	e764      	b.n	8006986 <_printf_float+0xc2>
 8006abc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ac0:	f240 80e0 	bls.w	8006c84 <_printf_float+0x3c0>
 8006ac4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2300      	movs	r3, #0
 8006acc:	f7fa f804 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d034      	beq.n	8006b3e <_printf_float+0x27a>
 8006ad4:	4a37      	ldr	r2, [pc, #220]	; (8006bb4 <_printf_float+0x2f0>)
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4628      	mov	r0, r5
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f43f af51 	beq.w	8006986 <_printf_float+0xc2>
 8006ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	db02      	blt.n	8006af2 <_printf_float+0x22e>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	07d8      	lsls	r0, r3, #31
 8006af0:	d510      	bpl.n	8006b14 <_printf_float+0x250>
 8006af2:	ee18 3a10 	vmov	r3, s16
 8006af6:	4652      	mov	r2, sl
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	f43f af41 	beq.w	8006986 <_printf_float+0xc2>
 8006b04:	f04f 0800 	mov.w	r8, #0
 8006b08:	f104 091a 	add.w	r9, r4, #26
 8006b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4543      	cmp	r3, r8
 8006b12:	dc09      	bgt.n	8006b28 <_printf_float+0x264>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	079b      	lsls	r3, r3, #30
 8006b18:	f100 8105 	bmi.w	8006d26 <_printf_float+0x462>
 8006b1c:	68e0      	ldr	r0, [r4, #12]
 8006b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b20:	4298      	cmp	r0, r3
 8006b22:	bfb8      	it	lt
 8006b24:	4618      	movlt	r0, r3
 8006b26:	e730      	b.n	800698a <_printf_float+0xc6>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	464a      	mov	r2, r9
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	47b8      	blx	r7
 8006b32:	3001      	adds	r0, #1
 8006b34:	f43f af27 	beq.w	8006986 <_printf_float+0xc2>
 8006b38:	f108 0801 	add.w	r8, r8, #1
 8006b3c:	e7e6      	b.n	8006b0c <_printf_float+0x248>
 8006b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dc39      	bgt.n	8006bb8 <_printf_float+0x2f4>
 8006b44:	4a1b      	ldr	r2, [pc, #108]	; (8006bb4 <_printf_float+0x2f0>)
 8006b46:	2301      	movs	r3, #1
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	47b8      	blx	r7
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f43f af19 	beq.w	8006986 <_printf_float+0xc2>
 8006b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	d102      	bne.n	8006b62 <_printf_float+0x29e>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	07d9      	lsls	r1, r3, #31
 8006b60:	d5d8      	bpl.n	8006b14 <_printf_float+0x250>
 8006b62:	ee18 3a10 	vmov	r3, s16
 8006b66:	4652      	mov	r2, sl
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	f43f af09 	beq.w	8006986 <_printf_float+0xc2>
 8006b74:	f04f 0900 	mov.w	r9, #0
 8006b78:	f104 0a1a 	add.w	sl, r4, #26
 8006b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7e:	425b      	negs	r3, r3
 8006b80:	454b      	cmp	r3, r9
 8006b82:	dc01      	bgt.n	8006b88 <_printf_float+0x2c4>
 8006b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b86:	e792      	b.n	8006aae <_printf_float+0x1ea>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f aef7 	beq.w	8006986 <_printf_float+0xc2>
 8006b98:	f109 0901 	add.w	r9, r9, #1
 8006b9c:	e7ee      	b.n	8006b7c <_printf_float+0x2b8>
 8006b9e:	bf00      	nop
 8006ba0:	7fefffff 	.word	0x7fefffff
 8006ba4:	080091ac 	.word	0x080091ac
 8006ba8:	080091b0 	.word	0x080091b0
 8006bac:	080091b8 	.word	0x080091b8
 8006bb0:	080091b4 	.word	0x080091b4
 8006bb4:	080091bc 	.word	0x080091bc
 8006bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	bfa8      	it	ge
 8006bc0:	461a      	movge	r2, r3
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	4691      	mov	r9, r2
 8006bc6:	dc37      	bgt.n	8006c38 <_printf_float+0x374>
 8006bc8:	f04f 0b00 	mov.w	fp, #0
 8006bcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bd0:	f104 021a 	add.w	r2, r4, #26
 8006bd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bd6:	9305      	str	r3, [sp, #20]
 8006bd8:	eba3 0309 	sub.w	r3, r3, r9
 8006bdc:	455b      	cmp	r3, fp
 8006bde:	dc33      	bgt.n	8006c48 <_printf_float+0x384>
 8006be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006be4:	429a      	cmp	r2, r3
 8006be6:	db3b      	blt.n	8006c60 <_printf_float+0x39c>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	07da      	lsls	r2, r3, #31
 8006bec:	d438      	bmi.n	8006c60 <_printf_float+0x39c>
 8006bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bf0:	9b05      	ldr	r3, [sp, #20]
 8006bf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	eba2 0901 	sub.w	r9, r2, r1
 8006bfa:	4599      	cmp	r9, r3
 8006bfc:	bfa8      	it	ge
 8006bfe:	4699      	movge	r9, r3
 8006c00:	f1b9 0f00 	cmp.w	r9, #0
 8006c04:	dc35      	bgt.n	8006c72 <_printf_float+0x3ae>
 8006c06:	f04f 0800 	mov.w	r8, #0
 8006c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c0e:	f104 0a1a 	add.w	sl, r4, #26
 8006c12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	eba3 0309 	sub.w	r3, r3, r9
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	f77f af79 	ble.w	8006b14 <_printf_float+0x250>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4652      	mov	r2, sl
 8006c26:	4631      	mov	r1, r6
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b8      	blx	r7
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	f43f aeaa 	beq.w	8006986 <_printf_float+0xc2>
 8006c32:	f108 0801 	add.w	r8, r8, #1
 8006c36:	e7ec      	b.n	8006c12 <_printf_float+0x34e>
 8006c38:	4613      	mov	r3, r2
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4642      	mov	r2, r8
 8006c3e:	4628      	mov	r0, r5
 8006c40:	47b8      	blx	r7
 8006c42:	3001      	adds	r0, #1
 8006c44:	d1c0      	bne.n	8006bc8 <_printf_float+0x304>
 8006c46:	e69e      	b.n	8006986 <_printf_float+0xc2>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	9205      	str	r2, [sp, #20]
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f ae97 	beq.w	8006986 <_printf_float+0xc2>
 8006c58:	9a05      	ldr	r2, [sp, #20]
 8006c5a:	f10b 0b01 	add.w	fp, fp, #1
 8006c5e:	e7b9      	b.n	8006bd4 <_printf_float+0x310>
 8006c60:	ee18 3a10 	vmov	r3, s16
 8006c64:	4652      	mov	r2, sl
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d1be      	bne.n	8006bee <_printf_float+0x32a>
 8006c70:	e689      	b.n	8006986 <_printf_float+0xc2>
 8006c72:	9a05      	ldr	r2, [sp, #20]
 8006c74:	464b      	mov	r3, r9
 8006c76:	4442      	add	r2, r8
 8006c78:	4631      	mov	r1, r6
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	47b8      	blx	r7
 8006c7e:	3001      	adds	r0, #1
 8006c80:	d1c1      	bne.n	8006c06 <_printf_float+0x342>
 8006c82:	e680      	b.n	8006986 <_printf_float+0xc2>
 8006c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c86:	2a01      	cmp	r2, #1
 8006c88:	dc01      	bgt.n	8006c8e <_printf_float+0x3ca>
 8006c8a:	07db      	lsls	r3, r3, #31
 8006c8c:	d538      	bpl.n	8006d00 <_printf_float+0x43c>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	4642      	mov	r2, r8
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f43f ae74 	beq.w	8006986 <_printf_float+0xc2>
 8006c9e:	ee18 3a10 	vmov	r3, s16
 8006ca2:	4652      	mov	r2, sl
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	f43f ae6b 	beq.w	8006986 <_printf_float+0xc2>
 8006cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f7f9 ff0e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cbc:	b9d8      	cbnz	r0, 8006cf6 <_printf_float+0x432>
 8006cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc0:	f108 0201 	add.w	r2, r8, #1
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d10e      	bne.n	8006cee <_printf_float+0x42a>
 8006cd0:	e659      	b.n	8006986 <_printf_float+0xc2>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4652      	mov	r2, sl
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f ae52 	beq.w	8006986 <_printf_float+0xc2>
 8006ce2:	f108 0801 	add.w	r8, r8, #1
 8006ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	4543      	cmp	r3, r8
 8006cec:	dcf1      	bgt.n	8006cd2 <_printf_float+0x40e>
 8006cee:	464b      	mov	r3, r9
 8006cf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cf4:	e6dc      	b.n	8006ab0 <_printf_float+0x1ec>
 8006cf6:	f04f 0800 	mov.w	r8, #0
 8006cfa:	f104 0a1a 	add.w	sl, r4, #26
 8006cfe:	e7f2      	b.n	8006ce6 <_printf_float+0x422>
 8006d00:	2301      	movs	r3, #1
 8006d02:	4642      	mov	r2, r8
 8006d04:	e7df      	b.n	8006cc6 <_printf_float+0x402>
 8006d06:	2301      	movs	r3, #1
 8006d08:	464a      	mov	r2, r9
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f ae38 	beq.w	8006986 <_printf_float+0xc2>
 8006d16:	f108 0801 	add.w	r8, r8, #1
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d1e:	1a5b      	subs	r3, r3, r1
 8006d20:	4543      	cmp	r3, r8
 8006d22:	dcf0      	bgt.n	8006d06 <_printf_float+0x442>
 8006d24:	e6fa      	b.n	8006b1c <_printf_float+0x258>
 8006d26:	f04f 0800 	mov.w	r8, #0
 8006d2a:	f104 0919 	add.w	r9, r4, #25
 8006d2e:	e7f4      	b.n	8006d1a <_printf_float+0x456>

08006d30 <_printf_common>:
 8006d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	4616      	mov	r6, r2
 8006d36:	4699      	mov	r9, r3
 8006d38:	688a      	ldr	r2, [r1, #8]
 8006d3a:	690b      	ldr	r3, [r1, #16]
 8006d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bfb8      	it	lt
 8006d44:	4613      	movlt	r3, r2
 8006d46:	6033      	str	r3, [r6, #0]
 8006d48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	b10a      	cbz	r2, 8006d56 <_printf_common+0x26>
 8006d52:	3301      	adds	r3, #1
 8006d54:	6033      	str	r3, [r6, #0]
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	0699      	lsls	r1, r3, #26
 8006d5a:	bf42      	ittt	mi
 8006d5c:	6833      	ldrmi	r3, [r6, #0]
 8006d5e:	3302      	addmi	r3, #2
 8006d60:	6033      	strmi	r3, [r6, #0]
 8006d62:	6825      	ldr	r5, [r4, #0]
 8006d64:	f015 0506 	ands.w	r5, r5, #6
 8006d68:	d106      	bne.n	8006d78 <_printf_common+0x48>
 8006d6a:	f104 0a19 	add.w	sl, r4, #25
 8006d6e:	68e3      	ldr	r3, [r4, #12]
 8006d70:	6832      	ldr	r2, [r6, #0]
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	42ab      	cmp	r3, r5
 8006d76:	dc26      	bgt.n	8006dc6 <_printf_common+0x96>
 8006d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d7c:	1e13      	subs	r3, r2, #0
 8006d7e:	6822      	ldr	r2, [r4, #0]
 8006d80:	bf18      	it	ne
 8006d82:	2301      	movne	r3, #1
 8006d84:	0692      	lsls	r2, r2, #26
 8006d86:	d42b      	bmi.n	8006de0 <_printf_common+0xb0>
 8006d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	4638      	mov	r0, r7
 8006d90:	47c0      	blx	r8
 8006d92:	3001      	adds	r0, #1
 8006d94:	d01e      	beq.n	8006dd4 <_printf_common+0xa4>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	68e5      	ldr	r5, [r4, #12]
 8006d9a:	6832      	ldr	r2, [r6, #0]
 8006d9c:	f003 0306 	and.w	r3, r3, #6
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	bf08      	it	eq
 8006da4:	1aad      	subeq	r5, r5, r2
 8006da6:	68a3      	ldr	r3, [r4, #8]
 8006da8:	6922      	ldr	r2, [r4, #16]
 8006daa:	bf0c      	ite	eq
 8006dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db0:	2500      	movne	r5, #0
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bfc4      	itt	gt
 8006db6:	1a9b      	subgt	r3, r3, r2
 8006db8:	18ed      	addgt	r5, r5, r3
 8006dba:	2600      	movs	r6, #0
 8006dbc:	341a      	adds	r4, #26
 8006dbe:	42b5      	cmp	r5, r6
 8006dc0:	d11a      	bne.n	8006df8 <_printf_common+0xc8>
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	e008      	b.n	8006dd8 <_printf_common+0xa8>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4652      	mov	r2, sl
 8006dca:	4649      	mov	r1, r9
 8006dcc:	4638      	mov	r0, r7
 8006dce:	47c0      	blx	r8
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d103      	bne.n	8006ddc <_printf_common+0xac>
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ddc:	3501      	adds	r5, #1
 8006dde:	e7c6      	b.n	8006d6e <_printf_common+0x3e>
 8006de0:	18e1      	adds	r1, r4, r3
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	2030      	movs	r0, #48	; 0x30
 8006de6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dea:	4422      	add	r2, r4
 8006dec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006df0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006df4:	3302      	adds	r3, #2
 8006df6:	e7c7      	b.n	8006d88 <_printf_common+0x58>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	4638      	mov	r0, r7
 8006e00:	47c0      	blx	r8
 8006e02:	3001      	adds	r0, #1
 8006e04:	d0e6      	beq.n	8006dd4 <_printf_common+0xa4>
 8006e06:	3601      	adds	r6, #1
 8006e08:	e7d9      	b.n	8006dbe <_printf_common+0x8e>
	...

08006e0c <_printf_i>:
 8006e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e10:	460c      	mov	r4, r1
 8006e12:	4691      	mov	r9, r2
 8006e14:	7e27      	ldrb	r7, [r4, #24]
 8006e16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e18:	2f78      	cmp	r7, #120	; 0x78
 8006e1a:	4680      	mov	r8, r0
 8006e1c:	469a      	mov	sl, r3
 8006e1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e22:	d807      	bhi.n	8006e34 <_printf_i+0x28>
 8006e24:	2f62      	cmp	r7, #98	; 0x62
 8006e26:	d80a      	bhi.n	8006e3e <_printf_i+0x32>
 8006e28:	2f00      	cmp	r7, #0
 8006e2a:	f000 80d8 	beq.w	8006fde <_printf_i+0x1d2>
 8006e2e:	2f58      	cmp	r7, #88	; 0x58
 8006e30:	f000 80a3 	beq.w	8006f7a <_printf_i+0x16e>
 8006e34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e3c:	e03a      	b.n	8006eb4 <_printf_i+0xa8>
 8006e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e42:	2b15      	cmp	r3, #21
 8006e44:	d8f6      	bhi.n	8006e34 <_printf_i+0x28>
 8006e46:	a001      	add	r0, pc, #4	; (adr r0, 8006e4c <_printf_i+0x40>)
 8006e48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e4c:	08006ea5 	.word	0x08006ea5
 8006e50:	08006eb9 	.word	0x08006eb9
 8006e54:	08006e35 	.word	0x08006e35
 8006e58:	08006e35 	.word	0x08006e35
 8006e5c:	08006e35 	.word	0x08006e35
 8006e60:	08006e35 	.word	0x08006e35
 8006e64:	08006eb9 	.word	0x08006eb9
 8006e68:	08006e35 	.word	0x08006e35
 8006e6c:	08006e35 	.word	0x08006e35
 8006e70:	08006e35 	.word	0x08006e35
 8006e74:	08006e35 	.word	0x08006e35
 8006e78:	08006fc5 	.word	0x08006fc5
 8006e7c:	08006ee9 	.word	0x08006ee9
 8006e80:	08006fa7 	.word	0x08006fa7
 8006e84:	08006e35 	.word	0x08006e35
 8006e88:	08006e35 	.word	0x08006e35
 8006e8c:	08006fe7 	.word	0x08006fe7
 8006e90:	08006e35 	.word	0x08006e35
 8006e94:	08006ee9 	.word	0x08006ee9
 8006e98:	08006e35 	.word	0x08006e35
 8006e9c:	08006e35 	.word	0x08006e35
 8006ea0:	08006faf 	.word	0x08006faf
 8006ea4:	680b      	ldr	r3, [r1, #0]
 8006ea6:	1d1a      	adds	r2, r3, #4
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	600a      	str	r2, [r1, #0]
 8006eac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0a3      	b.n	8007000 <_printf_i+0x1f4>
 8006eb8:	6825      	ldr	r5, [r4, #0]
 8006eba:	6808      	ldr	r0, [r1, #0]
 8006ebc:	062e      	lsls	r6, r5, #24
 8006ebe:	f100 0304 	add.w	r3, r0, #4
 8006ec2:	d50a      	bpl.n	8006eda <_printf_i+0xce>
 8006ec4:	6805      	ldr	r5, [r0, #0]
 8006ec6:	600b      	str	r3, [r1, #0]
 8006ec8:	2d00      	cmp	r5, #0
 8006eca:	da03      	bge.n	8006ed4 <_printf_i+0xc8>
 8006ecc:	232d      	movs	r3, #45	; 0x2d
 8006ece:	426d      	negs	r5, r5
 8006ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ed4:	485e      	ldr	r0, [pc, #376]	; (8007050 <_printf_i+0x244>)
 8006ed6:	230a      	movs	r3, #10
 8006ed8:	e019      	b.n	8006f0e <_printf_i+0x102>
 8006eda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ede:	6805      	ldr	r5, [r0, #0]
 8006ee0:	600b      	str	r3, [r1, #0]
 8006ee2:	bf18      	it	ne
 8006ee4:	b22d      	sxthne	r5, r5
 8006ee6:	e7ef      	b.n	8006ec8 <_printf_i+0xbc>
 8006ee8:	680b      	ldr	r3, [r1, #0]
 8006eea:	6825      	ldr	r5, [r4, #0]
 8006eec:	1d18      	adds	r0, r3, #4
 8006eee:	6008      	str	r0, [r1, #0]
 8006ef0:	0628      	lsls	r0, r5, #24
 8006ef2:	d501      	bpl.n	8006ef8 <_printf_i+0xec>
 8006ef4:	681d      	ldr	r5, [r3, #0]
 8006ef6:	e002      	b.n	8006efe <_printf_i+0xf2>
 8006ef8:	0669      	lsls	r1, r5, #25
 8006efa:	d5fb      	bpl.n	8006ef4 <_printf_i+0xe8>
 8006efc:	881d      	ldrh	r5, [r3, #0]
 8006efe:	4854      	ldr	r0, [pc, #336]	; (8007050 <_printf_i+0x244>)
 8006f00:	2f6f      	cmp	r7, #111	; 0x6f
 8006f02:	bf0c      	ite	eq
 8006f04:	2308      	moveq	r3, #8
 8006f06:	230a      	movne	r3, #10
 8006f08:	2100      	movs	r1, #0
 8006f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f0e:	6866      	ldr	r6, [r4, #4]
 8006f10:	60a6      	str	r6, [r4, #8]
 8006f12:	2e00      	cmp	r6, #0
 8006f14:	bfa2      	ittt	ge
 8006f16:	6821      	ldrge	r1, [r4, #0]
 8006f18:	f021 0104 	bicge.w	r1, r1, #4
 8006f1c:	6021      	strge	r1, [r4, #0]
 8006f1e:	b90d      	cbnz	r5, 8006f24 <_printf_i+0x118>
 8006f20:	2e00      	cmp	r6, #0
 8006f22:	d04d      	beq.n	8006fc0 <_printf_i+0x1b4>
 8006f24:	4616      	mov	r6, r2
 8006f26:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f2a:	fb03 5711 	mls	r7, r3, r1, r5
 8006f2e:	5dc7      	ldrb	r7, [r0, r7]
 8006f30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f34:	462f      	mov	r7, r5
 8006f36:	42bb      	cmp	r3, r7
 8006f38:	460d      	mov	r5, r1
 8006f3a:	d9f4      	bls.n	8006f26 <_printf_i+0x11a>
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d10b      	bne.n	8006f58 <_printf_i+0x14c>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	07df      	lsls	r7, r3, #31
 8006f44:	d508      	bpl.n	8006f58 <_printf_i+0x14c>
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	6861      	ldr	r1, [r4, #4]
 8006f4a:	4299      	cmp	r1, r3
 8006f4c:	bfde      	ittt	le
 8006f4e:	2330      	movle	r3, #48	; 0x30
 8006f50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f58:	1b92      	subs	r2, r2, r6
 8006f5a:	6122      	str	r2, [r4, #16]
 8006f5c:	f8cd a000 	str.w	sl, [sp]
 8006f60:	464b      	mov	r3, r9
 8006f62:	aa03      	add	r2, sp, #12
 8006f64:	4621      	mov	r1, r4
 8006f66:	4640      	mov	r0, r8
 8006f68:	f7ff fee2 	bl	8006d30 <_printf_common>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d14c      	bne.n	800700a <_printf_i+0x1fe>
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	b004      	add	sp, #16
 8006f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7a:	4835      	ldr	r0, [pc, #212]	; (8007050 <_printf_i+0x244>)
 8006f7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	680e      	ldr	r6, [r1, #0]
 8006f84:	061f      	lsls	r7, r3, #24
 8006f86:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f8a:	600e      	str	r6, [r1, #0]
 8006f8c:	d514      	bpl.n	8006fb8 <_printf_i+0x1ac>
 8006f8e:	07d9      	lsls	r1, r3, #31
 8006f90:	bf44      	itt	mi
 8006f92:	f043 0320 	orrmi.w	r3, r3, #32
 8006f96:	6023      	strmi	r3, [r4, #0]
 8006f98:	b91d      	cbnz	r5, 8006fa2 <_printf_i+0x196>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	f023 0320 	bic.w	r3, r3, #32
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	e7b0      	b.n	8006f08 <_printf_i+0xfc>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f043 0320 	orr.w	r3, r3, #32
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	2378      	movs	r3, #120	; 0x78
 8006fb0:	4828      	ldr	r0, [pc, #160]	; (8007054 <_printf_i+0x248>)
 8006fb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fb6:	e7e3      	b.n	8006f80 <_printf_i+0x174>
 8006fb8:	065e      	lsls	r6, r3, #25
 8006fba:	bf48      	it	mi
 8006fbc:	b2ad      	uxthmi	r5, r5
 8006fbe:	e7e6      	b.n	8006f8e <_printf_i+0x182>
 8006fc0:	4616      	mov	r6, r2
 8006fc2:	e7bb      	b.n	8006f3c <_printf_i+0x130>
 8006fc4:	680b      	ldr	r3, [r1, #0]
 8006fc6:	6826      	ldr	r6, [r4, #0]
 8006fc8:	6960      	ldr	r0, [r4, #20]
 8006fca:	1d1d      	adds	r5, r3, #4
 8006fcc:	600d      	str	r5, [r1, #0]
 8006fce:	0635      	lsls	r5, r6, #24
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	d501      	bpl.n	8006fd8 <_printf_i+0x1cc>
 8006fd4:	6018      	str	r0, [r3, #0]
 8006fd6:	e002      	b.n	8006fde <_printf_i+0x1d2>
 8006fd8:	0671      	lsls	r1, r6, #25
 8006fda:	d5fb      	bpl.n	8006fd4 <_printf_i+0x1c8>
 8006fdc:	8018      	strh	r0, [r3, #0]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	4616      	mov	r6, r2
 8006fe4:	e7ba      	b.n	8006f5c <_printf_i+0x150>
 8006fe6:	680b      	ldr	r3, [r1, #0]
 8006fe8:	1d1a      	adds	r2, r3, #4
 8006fea:	600a      	str	r2, [r1, #0]
 8006fec:	681e      	ldr	r6, [r3, #0]
 8006fee:	6862      	ldr	r2, [r4, #4]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7f9 f8fc 	bl	80001f0 <memchr>
 8006ff8:	b108      	cbz	r0, 8006ffe <_printf_i+0x1f2>
 8006ffa:	1b80      	subs	r0, r0, r6
 8006ffc:	6060      	str	r0, [r4, #4]
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	2300      	movs	r3, #0
 8007004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007008:	e7a8      	b.n	8006f5c <_printf_i+0x150>
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	4632      	mov	r2, r6
 800700e:	4649      	mov	r1, r9
 8007010:	4640      	mov	r0, r8
 8007012:	47d0      	blx	sl
 8007014:	3001      	adds	r0, #1
 8007016:	d0ab      	beq.n	8006f70 <_printf_i+0x164>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	079b      	lsls	r3, r3, #30
 800701c:	d413      	bmi.n	8007046 <_printf_i+0x23a>
 800701e:	68e0      	ldr	r0, [r4, #12]
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	4298      	cmp	r0, r3
 8007024:	bfb8      	it	lt
 8007026:	4618      	movlt	r0, r3
 8007028:	e7a4      	b.n	8006f74 <_printf_i+0x168>
 800702a:	2301      	movs	r3, #1
 800702c:	4632      	mov	r2, r6
 800702e:	4649      	mov	r1, r9
 8007030:	4640      	mov	r0, r8
 8007032:	47d0      	blx	sl
 8007034:	3001      	adds	r0, #1
 8007036:	d09b      	beq.n	8006f70 <_printf_i+0x164>
 8007038:	3501      	adds	r5, #1
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	9903      	ldr	r1, [sp, #12]
 800703e:	1a5b      	subs	r3, r3, r1
 8007040:	42ab      	cmp	r3, r5
 8007042:	dcf2      	bgt.n	800702a <_printf_i+0x21e>
 8007044:	e7eb      	b.n	800701e <_printf_i+0x212>
 8007046:	2500      	movs	r5, #0
 8007048:	f104 0619 	add.w	r6, r4, #25
 800704c:	e7f5      	b.n	800703a <_printf_i+0x22e>
 800704e:	bf00      	nop
 8007050:	080091be 	.word	0x080091be
 8007054:	080091cf 	.word	0x080091cf

08007058 <quorem>:
 8007058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	6903      	ldr	r3, [r0, #16]
 800705e:	690c      	ldr	r4, [r1, #16]
 8007060:	42a3      	cmp	r3, r4
 8007062:	4607      	mov	r7, r0
 8007064:	f2c0 8081 	blt.w	800716a <quorem+0x112>
 8007068:	3c01      	subs	r4, #1
 800706a:	f101 0814 	add.w	r8, r1, #20
 800706e:	f100 0514 	add.w	r5, r0, #20
 8007072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800707c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007080:	3301      	adds	r3, #1
 8007082:	429a      	cmp	r2, r3
 8007084:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800708c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007090:	d331      	bcc.n	80070f6 <quorem+0x9e>
 8007092:	f04f 0e00 	mov.w	lr, #0
 8007096:	4640      	mov	r0, r8
 8007098:	46ac      	mov	ip, r5
 800709a:	46f2      	mov	sl, lr
 800709c:	f850 2b04 	ldr.w	r2, [r0], #4
 80070a0:	b293      	uxth	r3, r2
 80070a2:	fb06 e303 	mla	r3, r6, r3, lr
 80070a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	ebaa 0303 	sub.w	r3, sl, r3
 80070b0:	0c12      	lsrs	r2, r2, #16
 80070b2:	f8dc a000 	ldr.w	sl, [ip]
 80070b6:	fb06 e202 	mla	r2, r6, r2, lr
 80070ba:	fa13 f38a 	uxtah	r3, r3, sl
 80070be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070c2:	fa1f fa82 	uxth.w	sl, r2
 80070c6:	f8dc 2000 	ldr.w	r2, [ip]
 80070ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80070ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070d8:	4581      	cmp	r9, r0
 80070da:	f84c 3b04 	str.w	r3, [ip], #4
 80070de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070e2:	d2db      	bcs.n	800709c <quorem+0x44>
 80070e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80070e8:	b92b      	cbnz	r3, 80070f6 <quorem+0x9e>
 80070ea:	9b01      	ldr	r3, [sp, #4]
 80070ec:	3b04      	subs	r3, #4
 80070ee:	429d      	cmp	r5, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	d32e      	bcc.n	8007152 <quorem+0xfa>
 80070f4:	613c      	str	r4, [r7, #16]
 80070f6:	4638      	mov	r0, r7
 80070f8:	f001 f8b0 	bl	800825c <__mcmp>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	db24      	blt.n	800714a <quorem+0xf2>
 8007100:	3601      	adds	r6, #1
 8007102:	4628      	mov	r0, r5
 8007104:	f04f 0c00 	mov.w	ip, #0
 8007108:	f858 2b04 	ldr.w	r2, [r8], #4
 800710c:	f8d0 e000 	ldr.w	lr, [r0]
 8007110:	b293      	uxth	r3, r2
 8007112:	ebac 0303 	sub.w	r3, ip, r3
 8007116:	0c12      	lsrs	r2, r2, #16
 8007118:	fa13 f38e 	uxtah	r3, r3, lr
 800711c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007124:	b29b      	uxth	r3, r3
 8007126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800712a:	45c1      	cmp	r9, r8
 800712c:	f840 3b04 	str.w	r3, [r0], #4
 8007130:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007134:	d2e8      	bcs.n	8007108 <quorem+0xb0>
 8007136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800713a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800713e:	b922      	cbnz	r2, 800714a <quorem+0xf2>
 8007140:	3b04      	subs	r3, #4
 8007142:	429d      	cmp	r5, r3
 8007144:	461a      	mov	r2, r3
 8007146:	d30a      	bcc.n	800715e <quorem+0x106>
 8007148:	613c      	str	r4, [r7, #16]
 800714a:	4630      	mov	r0, r6
 800714c:	b003      	add	sp, #12
 800714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007152:	6812      	ldr	r2, [r2, #0]
 8007154:	3b04      	subs	r3, #4
 8007156:	2a00      	cmp	r2, #0
 8007158:	d1cc      	bne.n	80070f4 <quorem+0x9c>
 800715a:	3c01      	subs	r4, #1
 800715c:	e7c7      	b.n	80070ee <quorem+0x96>
 800715e:	6812      	ldr	r2, [r2, #0]
 8007160:	3b04      	subs	r3, #4
 8007162:	2a00      	cmp	r2, #0
 8007164:	d1f0      	bne.n	8007148 <quorem+0xf0>
 8007166:	3c01      	subs	r4, #1
 8007168:	e7eb      	b.n	8007142 <quorem+0xea>
 800716a:	2000      	movs	r0, #0
 800716c:	e7ee      	b.n	800714c <quorem+0xf4>
	...

08007170 <_dtoa_r>:
 8007170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007174:	ed2d 8b02 	vpush	{d8}
 8007178:	ec57 6b10 	vmov	r6, r7, d0
 800717c:	b095      	sub	sp, #84	; 0x54
 800717e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007180:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007184:	9105      	str	r1, [sp, #20]
 8007186:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800718a:	4604      	mov	r4, r0
 800718c:	9209      	str	r2, [sp, #36]	; 0x24
 800718e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007190:	b975      	cbnz	r5, 80071b0 <_dtoa_r+0x40>
 8007192:	2010      	movs	r0, #16
 8007194:	f000 fddc 	bl	8007d50 <malloc>
 8007198:	4602      	mov	r2, r0
 800719a:	6260      	str	r0, [r4, #36]	; 0x24
 800719c:	b920      	cbnz	r0, 80071a8 <_dtoa_r+0x38>
 800719e:	4bb2      	ldr	r3, [pc, #712]	; (8007468 <_dtoa_r+0x2f8>)
 80071a0:	21ea      	movs	r1, #234	; 0xea
 80071a2:	48b2      	ldr	r0, [pc, #712]	; (800746c <_dtoa_r+0x2fc>)
 80071a4:	f001 fa24 	bl	80085f0 <__assert_func>
 80071a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071ac:	6005      	str	r5, [r0, #0]
 80071ae:	60c5      	str	r5, [r0, #12]
 80071b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071b2:	6819      	ldr	r1, [r3, #0]
 80071b4:	b151      	cbz	r1, 80071cc <_dtoa_r+0x5c>
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	604a      	str	r2, [r1, #4]
 80071ba:	2301      	movs	r3, #1
 80071bc:	4093      	lsls	r3, r2
 80071be:	608b      	str	r3, [r1, #8]
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 fe0d 	bl	8007de0 <_Bfree>
 80071c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	1e3b      	subs	r3, r7, #0
 80071ce:	bfb9      	ittee	lt
 80071d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071d4:	9303      	strlt	r3, [sp, #12]
 80071d6:	2300      	movge	r3, #0
 80071d8:	f8c8 3000 	strge.w	r3, [r8]
 80071dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80071e0:	4ba3      	ldr	r3, [pc, #652]	; (8007470 <_dtoa_r+0x300>)
 80071e2:	bfbc      	itt	lt
 80071e4:	2201      	movlt	r2, #1
 80071e6:	f8c8 2000 	strlt.w	r2, [r8]
 80071ea:	ea33 0309 	bics.w	r3, r3, r9
 80071ee:	d11b      	bne.n	8007228 <_dtoa_r+0xb8>
 80071f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071fc:	4333      	orrs	r3, r6
 80071fe:	f000 857a 	beq.w	8007cf6 <_dtoa_r+0xb86>
 8007202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007204:	b963      	cbnz	r3, 8007220 <_dtoa_r+0xb0>
 8007206:	4b9b      	ldr	r3, [pc, #620]	; (8007474 <_dtoa_r+0x304>)
 8007208:	e024      	b.n	8007254 <_dtoa_r+0xe4>
 800720a:	4b9b      	ldr	r3, [pc, #620]	; (8007478 <_dtoa_r+0x308>)
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	3308      	adds	r3, #8
 8007210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	9800      	ldr	r0, [sp, #0]
 8007216:	b015      	add	sp, #84	; 0x54
 8007218:	ecbd 8b02 	vpop	{d8}
 800721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007220:	4b94      	ldr	r3, [pc, #592]	; (8007474 <_dtoa_r+0x304>)
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	3303      	adds	r3, #3
 8007226:	e7f3      	b.n	8007210 <_dtoa_r+0xa0>
 8007228:	ed9d 7b02 	vldr	d7, [sp, #8]
 800722c:	2200      	movs	r2, #0
 800722e:	ec51 0b17 	vmov	r0, r1, d7
 8007232:	2300      	movs	r3, #0
 8007234:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007238:	f7f9 fc4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800723c:	4680      	mov	r8, r0
 800723e:	b158      	cbz	r0, 8007258 <_dtoa_r+0xe8>
 8007240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007242:	2301      	movs	r3, #1
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8551 	beq.w	8007cf0 <_dtoa_r+0xb80>
 800724e:	488b      	ldr	r0, [pc, #556]	; (800747c <_dtoa_r+0x30c>)
 8007250:	6018      	str	r0, [r3, #0]
 8007252:	1e43      	subs	r3, r0, #1
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	e7dd      	b.n	8007214 <_dtoa_r+0xa4>
 8007258:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800725c:	aa12      	add	r2, sp, #72	; 0x48
 800725e:	a913      	add	r1, sp, #76	; 0x4c
 8007260:	4620      	mov	r0, r4
 8007262:	f001 f89f 	bl	80083a4 <__d2b>
 8007266:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800726a:	4683      	mov	fp, r0
 800726c:	2d00      	cmp	r5, #0
 800726e:	d07c      	beq.n	800736a <_dtoa_r+0x1fa>
 8007270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007272:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800727a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800727e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007282:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800728a:	4b7d      	ldr	r3, [pc, #500]	; (8007480 <_dtoa_r+0x310>)
 800728c:	2200      	movs	r2, #0
 800728e:	4630      	mov	r0, r6
 8007290:	4639      	mov	r1, r7
 8007292:	f7f9 f801 	bl	8000298 <__aeabi_dsub>
 8007296:	a36e      	add	r3, pc, #440	; (adr r3, 8007450 <_dtoa_r+0x2e0>)
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f7f9 f9b4 	bl	8000608 <__aeabi_dmul>
 80072a0:	a36d      	add	r3, pc, #436	; (adr r3, 8007458 <_dtoa_r+0x2e8>)
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f7f8 fff9 	bl	800029c <__adddf3>
 80072aa:	4606      	mov	r6, r0
 80072ac:	4628      	mov	r0, r5
 80072ae:	460f      	mov	r7, r1
 80072b0:	f7f9 f940 	bl	8000534 <__aeabi_i2d>
 80072b4:	a36a      	add	r3, pc, #424	; (adr r3, 8007460 <_dtoa_r+0x2f0>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7f9 f9a5 	bl	8000608 <__aeabi_dmul>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	f7f8 ffe9 	bl	800029c <__adddf3>
 80072ca:	4606      	mov	r6, r0
 80072cc:	460f      	mov	r7, r1
 80072ce:	f7f9 fc4b 	bl	8000b68 <__aeabi_d2iz>
 80072d2:	2200      	movs	r2, #0
 80072d4:	4682      	mov	sl, r0
 80072d6:	2300      	movs	r3, #0
 80072d8:	4630      	mov	r0, r6
 80072da:	4639      	mov	r1, r7
 80072dc:	f7f9 fc06 	bl	8000aec <__aeabi_dcmplt>
 80072e0:	b148      	cbz	r0, 80072f6 <_dtoa_r+0x186>
 80072e2:	4650      	mov	r0, sl
 80072e4:	f7f9 f926 	bl	8000534 <__aeabi_i2d>
 80072e8:	4632      	mov	r2, r6
 80072ea:	463b      	mov	r3, r7
 80072ec:	f7f9 fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80072f0:	b908      	cbnz	r0, 80072f6 <_dtoa_r+0x186>
 80072f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072f6:	f1ba 0f16 	cmp.w	sl, #22
 80072fa:	d854      	bhi.n	80073a6 <_dtoa_r+0x236>
 80072fc:	4b61      	ldr	r3, [pc, #388]	; (8007484 <_dtoa_r+0x314>)
 80072fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800730a:	f7f9 fbef 	bl	8000aec <__aeabi_dcmplt>
 800730e:	2800      	cmp	r0, #0
 8007310:	d04b      	beq.n	80073aa <_dtoa_r+0x23a>
 8007312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007316:	2300      	movs	r3, #0
 8007318:	930e      	str	r3, [sp, #56]	; 0x38
 800731a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800731c:	1b5d      	subs	r5, r3, r5
 800731e:	1e6b      	subs	r3, r5, #1
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	bf43      	ittte	mi
 8007324:	2300      	movmi	r3, #0
 8007326:	f1c5 0801 	rsbmi	r8, r5, #1
 800732a:	9304      	strmi	r3, [sp, #16]
 800732c:	f04f 0800 	movpl.w	r8, #0
 8007330:	f1ba 0f00 	cmp.w	sl, #0
 8007334:	db3b      	blt.n	80073ae <_dtoa_r+0x23e>
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800733c:	4453      	add	r3, sl
 800733e:	9304      	str	r3, [sp, #16]
 8007340:	2300      	movs	r3, #0
 8007342:	9306      	str	r3, [sp, #24]
 8007344:	9b05      	ldr	r3, [sp, #20]
 8007346:	2b09      	cmp	r3, #9
 8007348:	d869      	bhi.n	800741e <_dtoa_r+0x2ae>
 800734a:	2b05      	cmp	r3, #5
 800734c:	bfc4      	itt	gt
 800734e:	3b04      	subgt	r3, #4
 8007350:	9305      	strgt	r3, [sp, #20]
 8007352:	9b05      	ldr	r3, [sp, #20]
 8007354:	f1a3 0302 	sub.w	r3, r3, #2
 8007358:	bfcc      	ite	gt
 800735a:	2500      	movgt	r5, #0
 800735c:	2501      	movle	r5, #1
 800735e:	2b03      	cmp	r3, #3
 8007360:	d869      	bhi.n	8007436 <_dtoa_r+0x2c6>
 8007362:	e8df f003 	tbb	[pc, r3]
 8007366:	4e2c      	.short	0x4e2c
 8007368:	5a4c      	.short	0x5a4c
 800736a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800736e:	441d      	add	r5, r3
 8007370:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007374:	2b20      	cmp	r3, #32
 8007376:	bfc1      	itttt	gt
 8007378:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800737c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007380:	fa09 f303 	lslgt.w	r3, r9, r3
 8007384:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007388:	bfda      	itte	le
 800738a:	f1c3 0320 	rsble	r3, r3, #32
 800738e:	fa06 f003 	lslle.w	r0, r6, r3
 8007392:	4318      	orrgt	r0, r3
 8007394:	f7f9 f8be 	bl	8000514 <__aeabi_ui2d>
 8007398:	2301      	movs	r3, #1
 800739a:	4606      	mov	r6, r0
 800739c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80073a0:	3d01      	subs	r5, #1
 80073a2:	9310      	str	r3, [sp, #64]	; 0x40
 80073a4:	e771      	b.n	800728a <_dtoa_r+0x11a>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e7b6      	b.n	8007318 <_dtoa_r+0x1a8>
 80073aa:	900e      	str	r0, [sp, #56]	; 0x38
 80073ac:	e7b5      	b.n	800731a <_dtoa_r+0x1aa>
 80073ae:	f1ca 0300 	rsb	r3, sl, #0
 80073b2:	9306      	str	r3, [sp, #24]
 80073b4:	2300      	movs	r3, #0
 80073b6:	eba8 080a 	sub.w	r8, r8, sl
 80073ba:	930d      	str	r3, [sp, #52]	; 0x34
 80073bc:	e7c2      	b.n	8007344 <_dtoa_r+0x1d4>
 80073be:	2300      	movs	r3, #0
 80073c0:	9308      	str	r3, [sp, #32]
 80073c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	dc39      	bgt.n	800743c <_dtoa_r+0x2cc>
 80073c8:	f04f 0901 	mov.w	r9, #1
 80073cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80073d0:	464b      	mov	r3, r9
 80073d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80073d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073d8:	2200      	movs	r2, #0
 80073da:	6042      	str	r2, [r0, #4]
 80073dc:	2204      	movs	r2, #4
 80073de:	f102 0614 	add.w	r6, r2, #20
 80073e2:	429e      	cmp	r6, r3
 80073e4:	6841      	ldr	r1, [r0, #4]
 80073e6:	d92f      	bls.n	8007448 <_dtoa_r+0x2d8>
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 fcb9 	bl	8007d60 <_Balloc>
 80073ee:	9000      	str	r0, [sp, #0]
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d14b      	bne.n	800748c <_dtoa_r+0x31c>
 80073f4:	4b24      	ldr	r3, [pc, #144]	; (8007488 <_dtoa_r+0x318>)
 80073f6:	4602      	mov	r2, r0
 80073f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073fc:	e6d1      	b.n	80071a2 <_dtoa_r+0x32>
 80073fe:	2301      	movs	r3, #1
 8007400:	e7de      	b.n	80073c0 <_dtoa_r+0x250>
 8007402:	2300      	movs	r3, #0
 8007404:	9308      	str	r3, [sp, #32]
 8007406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007408:	eb0a 0903 	add.w	r9, sl, r3
 800740c:	f109 0301 	add.w	r3, r9, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	9301      	str	r3, [sp, #4]
 8007414:	bfb8      	it	lt
 8007416:	2301      	movlt	r3, #1
 8007418:	e7dd      	b.n	80073d6 <_dtoa_r+0x266>
 800741a:	2301      	movs	r3, #1
 800741c:	e7f2      	b.n	8007404 <_dtoa_r+0x294>
 800741e:	2501      	movs	r5, #1
 8007420:	2300      	movs	r3, #0
 8007422:	9305      	str	r3, [sp, #20]
 8007424:	9508      	str	r5, [sp, #32]
 8007426:	f04f 39ff 	mov.w	r9, #4294967295
 800742a:	2200      	movs	r2, #0
 800742c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007430:	2312      	movs	r3, #18
 8007432:	9209      	str	r2, [sp, #36]	; 0x24
 8007434:	e7cf      	b.n	80073d6 <_dtoa_r+0x266>
 8007436:	2301      	movs	r3, #1
 8007438:	9308      	str	r3, [sp, #32]
 800743a:	e7f4      	b.n	8007426 <_dtoa_r+0x2b6>
 800743c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007440:	f8cd 9004 	str.w	r9, [sp, #4]
 8007444:	464b      	mov	r3, r9
 8007446:	e7c6      	b.n	80073d6 <_dtoa_r+0x266>
 8007448:	3101      	adds	r1, #1
 800744a:	6041      	str	r1, [r0, #4]
 800744c:	0052      	lsls	r2, r2, #1
 800744e:	e7c6      	b.n	80073de <_dtoa_r+0x26e>
 8007450:	636f4361 	.word	0x636f4361
 8007454:	3fd287a7 	.word	0x3fd287a7
 8007458:	8b60c8b3 	.word	0x8b60c8b3
 800745c:	3fc68a28 	.word	0x3fc68a28
 8007460:	509f79fb 	.word	0x509f79fb
 8007464:	3fd34413 	.word	0x3fd34413
 8007468:	080091ed 	.word	0x080091ed
 800746c:	08009204 	.word	0x08009204
 8007470:	7ff00000 	.word	0x7ff00000
 8007474:	080091e9 	.word	0x080091e9
 8007478:	080091e0 	.word	0x080091e0
 800747c:	080091bd 	.word	0x080091bd
 8007480:	3ff80000 	.word	0x3ff80000
 8007484:	08009300 	.word	0x08009300
 8007488:	08009263 	.word	0x08009263
 800748c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800748e:	9a00      	ldr	r2, [sp, #0]
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	9b01      	ldr	r3, [sp, #4]
 8007494:	2b0e      	cmp	r3, #14
 8007496:	f200 80ad 	bhi.w	80075f4 <_dtoa_r+0x484>
 800749a:	2d00      	cmp	r5, #0
 800749c:	f000 80aa 	beq.w	80075f4 <_dtoa_r+0x484>
 80074a0:	f1ba 0f00 	cmp.w	sl, #0
 80074a4:	dd36      	ble.n	8007514 <_dtoa_r+0x3a4>
 80074a6:	4ac3      	ldr	r2, [pc, #780]	; (80077b4 <_dtoa_r+0x644>)
 80074a8:	f00a 030f 	and.w	r3, sl, #15
 80074ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074b0:	ed93 7b00 	vldr	d7, [r3]
 80074b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80074b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80074bc:	eeb0 8a47 	vmov.f32	s16, s14
 80074c0:	eef0 8a67 	vmov.f32	s17, s15
 80074c4:	d016      	beq.n	80074f4 <_dtoa_r+0x384>
 80074c6:	4bbc      	ldr	r3, [pc, #752]	; (80077b8 <_dtoa_r+0x648>)
 80074c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074d0:	f7f9 f9c4 	bl	800085c <__aeabi_ddiv>
 80074d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074d8:	f007 070f 	and.w	r7, r7, #15
 80074dc:	2503      	movs	r5, #3
 80074de:	4eb6      	ldr	r6, [pc, #728]	; (80077b8 <_dtoa_r+0x648>)
 80074e0:	b957      	cbnz	r7, 80074f8 <_dtoa_r+0x388>
 80074e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e6:	ec53 2b18 	vmov	r2, r3, d8
 80074ea:	f7f9 f9b7 	bl	800085c <__aeabi_ddiv>
 80074ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f2:	e029      	b.n	8007548 <_dtoa_r+0x3d8>
 80074f4:	2502      	movs	r5, #2
 80074f6:	e7f2      	b.n	80074de <_dtoa_r+0x36e>
 80074f8:	07f9      	lsls	r1, r7, #31
 80074fa:	d508      	bpl.n	800750e <_dtoa_r+0x39e>
 80074fc:	ec51 0b18 	vmov	r0, r1, d8
 8007500:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007504:	f7f9 f880 	bl	8000608 <__aeabi_dmul>
 8007508:	ec41 0b18 	vmov	d8, r0, r1
 800750c:	3501      	adds	r5, #1
 800750e:	107f      	asrs	r7, r7, #1
 8007510:	3608      	adds	r6, #8
 8007512:	e7e5      	b.n	80074e0 <_dtoa_r+0x370>
 8007514:	f000 80a6 	beq.w	8007664 <_dtoa_r+0x4f4>
 8007518:	f1ca 0600 	rsb	r6, sl, #0
 800751c:	4ba5      	ldr	r3, [pc, #660]	; (80077b4 <_dtoa_r+0x644>)
 800751e:	4fa6      	ldr	r7, [pc, #664]	; (80077b8 <_dtoa_r+0x648>)
 8007520:	f006 020f 	and.w	r2, r6, #15
 8007524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007530:	f7f9 f86a 	bl	8000608 <__aeabi_dmul>
 8007534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007538:	1136      	asrs	r6, r6, #4
 800753a:	2300      	movs	r3, #0
 800753c:	2502      	movs	r5, #2
 800753e:	2e00      	cmp	r6, #0
 8007540:	f040 8085 	bne.w	800764e <_dtoa_r+0x4de>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1d2      	bne.n	80074ee <_dtoa_r+0x37e>
 8007548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 808c 	beq.w	8007668 <_dtoa_r+0x4f8>
 8007550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007554:	4b99      	ldr	r3, [pc, #612]	; (80077bc <_dtoa_r+0x64c>)
 8007556:	2200      	movs	r2, #0
 8007558:	4630      	mov	r0, r6
 800755a:	4639      	mov	r1, r7
 800755c:	f7f9 fac6 	bl	8000aec <__aeabi_dcmplt>
 8007560:	2800      	cmp	r0, #0
 8007562:	f000 8081 	beq.w	8007668 <_dtoa_r+0x4f8>
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d07d      	beq.n	8007668 <_dtoa_r+0x4f8>
 800756c:	f1b9 0f00 	cmp.w	r9, #0
 8007570:	dd3c      	ble.n	80075ec <_dtoa_r+0x47c>
 8007572:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007576:	9307      	str	r3, [sp, #28]
 8007578:	2200      	movs	r2, #0
 800757a:	4b91      	ldr	r3, [pc, #580]	; (80077c0 <_dtoa_r+0x650>)
 800757c:	4630      	mov	r0, r6
 800757e:	4639      	mov	r1, r7
 8007580:	f7f9 f842 	bl	8000608 <__aeabi_dmul>
 8007584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007588:	3501      	adds	r5, #1
 800758a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800758e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007592:	4628      	mov	r0, r5
 8007594:	f7f8 ffce 	bl	8000534 <__aeabi_i2d>
 8007598:	4632      	mov	r2, r6
 800759a:	463b      	mov	r3, r7
 800759c:	f7f9 f834 	bl	8000608 <__aeabi_dmul>
 80075a0:	4b88      	ldr	r3, [pc, #544]	; (80077c4 <_dtoa_r+0x654>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	f7f8 fe7a 	bl	800029c <__adddf3>
 80075a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80075ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075b0:	9303      	str	r3, [sp, #12]
 80075b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d15c      	bne.n	8007672 <_dtoa_r+0x502>
 80075b8:	4b83      	ldr	r3, [pc, #524]	; (80077c8 <_dtoa_r+0x658>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	4630      	mov	r0, r6
 80075be:	4639      	mov	r1, r7
 80075c0:	f7f8 fe6a 	bl	8000298 <__aeabi_dsub>
 80075c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075c8:	4606      	mov	r6, r0
 80075ca:	460f      	mov	r7, r1
 80075cc:	f7f9 faac 	bl	8000b28 <__aeabi_dcmpgt>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	f040 8296 	bne.w	8007b02 <_dtoa_r+0x992>
 80075d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80075da:	4630      	mov	r0, r6
 80075dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075e0:	4639      	mov	r1, r7
 80075e2:	f7f9 fa83 	bl	8000aec <__aeabi_dcmplt>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	f040 8288 	bne.w	8007afc <_dtoa_r+0x98c>
 80075ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f2c0 8158 	blt.w	80078ac <_dtoa_r+0x73c>
 80075fc:	f1ba 0f0e 	cmp.w	sl, #14
 8007600:	f300 8154 	bgt.w	80078ac <_dtoa_r+0x73c>
 8007604:	4b6b      	ldr	r3, [pc, #428]	; (80077b4 <_dtoa_r+0x644>)
 8007606:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800760a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800760e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007610:	2b00      	cmp	r3, #0
 8007612:	f280 80e3 	bge.w	80077dc <_dtoa_r+0x66c>
 8007616:	9b01      	ldr	r3, [sp, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f300 80df 	bgt.w	80077dc <_dtoa_r+0x66c>
 800761e:	f040 826d 	bne.w	8007afc <_dtoa_r+0x98c>
 8007622:	4b69      	ldr	r3, [pc, #420]	; (80077c8 <_dtoa_r+0x658>)
 8007624:	2200      	movs	r2, #0
 8007626:	4640      	mov	r0, r8
 8007628:	4649      	mov	r1, r9
 800762a:	f7f8 ffed 	bl	8000608 <__aeabi_dmul>
 800762e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007632:	f7f9 fa6f 	bl	8000b14 <__aeabi_dcmpge>
 8007636:	9e01      	ldr	r6, [sp, #4]
 8007638:	4637      	mov	r7, r6
 800763a:	2800      	cmp	r0, #0
 800763c:	f040 8243 	bne.w	8007ac6 <_dtoa_r+0x956>
 8007640:	9d00      	ldr	r5, [sp, #0]
 8007642:	2331      	movs	r3, #49	; 0x31
 8007644:	f805 3b01 	strb.w	r3, [r5], #1
 8007648:	f10a 0a01 	add.w	sl, sl, #1
 800764c:	e23f      	b.n	8007ace <_dtoa_r+0x95e>
 800764e:	07f2      	lsls	r2, r6, #31
 8007650:	d505      	bpl.n	800765e <_dtoa_r+0x4ee>
 8007652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007656:	f7f8 ffd7 	bl	8000608 <__aeabi_dmul>
 800765a:	3501      	adds	r5, #1
 800765c:	2301      	movs	r3, #1
 800765e:	1076      	asrs	r6, r6, #1
 8007660:	3708      	adds	r7, #8
 8007662:	e76c      	b.n	800753e <_dtoa_r+0x3ce>
 8007664:	2502      	movs	r5, #2
 8007666:	e76f      	b.n	8007548 <_dtoa_r+0x3d8>
 8007668:	9b01      	ldr	r3, [sp, #4]
 800766a:	f8cd a01c 	str.w	sl, [sp, #28]
 800766e:	930c      	str	r3, [sp, #48]	; 0x30
 8007670:	e78d      	b.n	800758e <_dtoa_r+0x41e>
 8007672:	9900      	ldr	r1, [sp, #0]
 8007674:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007678:	4b4e      	ldr	r3, [pc, #312]	; (80077b4 <_dtoa_r+0x644>)
 800767a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800767e:	4401      	add	r1, r0
 8007680:	9102      	str	r1, [sp, #8]
 8007682:	9908      	ldr	r1, [sp, #32]
 8007684:	eeb0 8a47 	vmov.f32	s16, s14
 8007688:	eef0 8a67 	vmov.f32	s17, s15
 800768c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007690:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007694:	2900      	cmp	r1, #0
 8007696:	d045      	beq.n	8007724 <_dtoa_r+0x5b4>
 8007698:	494c      	ldr	r1, [pc, #304]	; (80077cc <_dtoa_r+0x65c>)
 800769a:	2000      	movs	r0, #0
 800769c:	f7f9 f8de 	bl	800085c <__aeabi_ddiv>
 80076a0:	ec53 2b18 	vmov	r2, r3, d8
 80076a4:	f7f8 fdf8 	bl	8000298 <__aeabi_dsub>
 80076a8:	9d00      	ldr	r5, [sp, #0]
 80076aa:	ec41 0b18 	vmov	d8, r0, r1
 80076ae:	4639      	mov	r1, r7
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7f9 fa59 	bl	8000b68 <__aeabi_d2iz>
 80076b6:	900c      	str	r0, [sp, #48]	; 0x30
 80076b8:	f7f8 ff3c 	bl	8000534 <__aeabi_i2d>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4630      	mov	r0, r6
 80076c2:	4639      	mov	r1, r7
 80076c4:	f7f8 fde8 	bl	8000298 <__aeabi_dsub>
 80076c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076ca:	3330      	adds	r3, #48	; 0x30
 80076cc:	f805 3b01 	strb.w	r3, [r5], #1
 80076d0:	ec53 2b18 	vmov	r2, r3, d8
 80076d4:	4606      	mov	r6, r0
 80076d6:	460f      	mov	r7, r1
 80076d8:	f7f9 fa08 	bl	8000aec <__aeabi_dcmplt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d165      	bne.n	80077ac <_dtoa_r+0x63c>
 80076e0:	4632      	mov	r2, r6
 80076e2:	463b      	mov	r3, r7
 80076e4:	4935      	ldr	r1, [pc, #212]	; (80077bc <_dtoa_r+0x64c>)
 80076e6:	2000      	movs	r0, #0
 80076e8:	f7f8 fdd6 	bl	8000298 <__aeabi_dsub>
 80076ec:	ec53 2b18 	vmov	r2, r3, d8
 80076f0:	f7f9 f9fc 	bl	8000aec <__aeabi_dcmplt>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	f040 80b9 	bne.w	800786c <_dtoa_r+0x6fc>
 80076fa:	9b02      	ldr	r3, [sp, #8]
 80076fc:	429d      	cmp	r5, r3
 80076fe:	f43f af75 	beq.w	80075ec <_dtoa_r+0x47c>
 8007702:	4b2f      	ldr	r3, [pc, #188]	; (80077c0 <_dtoa_r+0x650>)
 8007704:	ec51 0b18 	vmov	r0, r1, d8
 8007708:	2200      	movs	r2, #0
 800770a:	f7f8 ff7d 	bl	8000608 <__aeabi_dmul>
 800770e:	4b2c      	ldr	r3, [pc, #176]	; (80077c0 <_dtoa_r+0x650>)
 8007710:	ec41 0b18 	vmov	d8, r0, r1
 8007714:	2200      	movs	r2, #0
 8007716:	4630      	mov	r0, r6
 8007718:	4639      	mov	r1, r7
 800771a:	f7f8 ff75 	bl	8000608 <__aeabi_dmul>
 800771e:	4606      	mov	r6, r0
 8007720:	460f      	mov	r7, r1
 8007722:	e7c4      	b.n	80076ae <_dtoa_r+0x53e>
 8007724:	ec51 0b17 	vmov	r0, r1, d7
 8007728:	f7f8 ff6e 	bl	8000608 <__aeabi_dmul>
 800772c:	9b02      	ldr	r3, [sp, #8]
 800772e:	9d00      	ldr	r5, [sp, #0]
 8007730:	930c      	str	r3, [sp, #48]	; 0x30
 8007732:	ec41 0b18 	vmov	d8, r0, r1
 8007736:	4639      	mov	r1, r7
 8007738:	4630      	mov	r0, r6
 800773a:	f7f9 fa15 	bl	8000b68 <__aeabi_d2iz>
 800773e:	9011      	str	r0, [sp, #68]	; 0x44
 8007740:	f7f8 fef8 	bl	8000534 <__aeabi_i2d>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4630      	mov	r0, r6
 800774a:	4639      	mov	r1, r7
 800774c:	f7f8 fda4 	bl	8000298 <__aeabi_dsub>
 8007750:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007752:	3330      	adds	r3, #48	; 0x30
 8007754:	f805 3b01 	strb.w	r3, [r5], #1
 8007758:	9b02      	ldr	r3, [sp, #8]
 800775a:	429d      	cmp	r5, r3
 800775c:	4606      	mov	r6, r0
 800775e:	460f      	mov	r7, r1
 8007760:	f04f 0200 	mov.w	r2, #0
 8007764:	d134      	bne.n	80077d0 <_dtoa_r+0x660>
 8007766:	4b19      	ldr	r3, [pc, #100]	; (80077cc <_dtoa_r+0x65c>)
 8007768:	ec51 0b18 	vmov	r0, r1, d8
 800776c:	f7f8 fd96 	bl	800029c <__adddf3>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f7f9 f9d6 	bl	8000b28 <__aeabi_dcmpgt>
 800777c:	2800      	cmp	r0, #0
 800777e:	d175      	bne.n	800786c <_dtoa_r+0x6fc>
 8007780:	ec53 2b18 	vmov	r2, r3, d8
 8007784:	4911      	ldr	r1, [pc, #68]	; (80077cc <_dtoa_r+0x65c>)
 8007786:	2000      	movs	r0, #0
 8007788:	f7f8 fd86 	bl	8000298 <__aeabi_dsub>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4630      	mov	r0, r6
 8007792:	4639      	mov	r1, r7
 8007794:	f7f9 f9aa 	bl	8000aec <__aeabi_dcmplt>
 8007798:	2800      	cmp	r0, #0
 800779a:	f43f af27 	beq.w	80075ec <_dtoa_r+0x47c>
 800779e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077a0:	1e6b      	subs	r3, r5, #1
 80077a2:	930c      	str	r3, [sp, #48]	; 0x30
 80077a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077a8:	2b30      	cmp	r3, #48	; 0x30
 80077aa:	d0f8      	beq.n	800779e <_dtoa_r+0x62e>
 80077ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80077b0:	e04a      	b.n	8007848 <_dtoa_r+0x6d8>
 80077b2:	bf00      	nop
 80077b4:	08009300 	.word	0x08009300
 80077b8:	080092d8 	.word	0x080092d8
 80077bc:	3ff00000 	.word	0x3ff00000
 80077c0:	40240000 	.word	0x40240000
 80077c4:	401c0000 	.word	0x401c0000
 80077c8:	40140000 	.word	0x40140000
 80077cc:	3fe00000 	.word	0x3fe00000
 80077d0:	4baf      	ldr	r3, [pc, #700]	; (8007a90 <_dtoa_r+0x920>)
 80077d2:	f7f8 ff19 	bl	8000608 <__aeabi_dmul>
 80077d6:	4606      	mov	r6, r0
 80077d8:	460f      	mov	r7, r1
 80077da:	e7ac      	b.n	8007736 <_dtoa_r+0x5c6>
 80077dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077e0:	9d00      	ldr	r5, [sp, #0]
 80077e2:	4642      	mov	r2, r8
 80077e4:	464b      	mov	r3, r9
 80077e6:	4630      	mov	r0, r6
 80077e8:	4639      	mov	r1, r7
 80077ea:	f7f9 f837 	bl	800085c <__aeabi_ddiv>
 80077ee:	f7f9 f9bb 	bl	8000b68 <__aeabi_d2iz>
 80077f2:	9002      	str	r0, [sp, #8]
 80077f4:	f7f8 fe9e 	bl	8000534 <__aeabi_i2d>
 80077f8:	4642      	mov	r2, r8
 80077fa:	464b      	mov	r3, r9
 80077fc:	f7f8 ff04 	bl	8000608 <__aeabi_dmul>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4630      	mov	r0, r6
 8007806:	4639      	mov	r1, r7
 8007808:	f7f8 fd46 	bl	8000298 <__aeabi_dsub>
 800780c:	9e02      	ldr	r6, [sp, #8]
 800780e:	9f01      	ldr	r7, [sp, #4]
 8007810:	3630      	adds	r6, #48	; 0x30
 8007812:	f805 6b01 	strb.w	r6, [r5], #1
 8007816:	9e00      	ldr	r6, [sp, #0]
 8007818:	1bae      	subs	r6, r5, r6
 800781a:	42b7      	cmp	r7, r6
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	d137      	bne.n	8007892 <_dtoa_r+0x722>
 8007822:	f7f8 fd3b 	bl	800029c <__adddf3>
 8007826:	4642      	mov	r2, r8
 8007828:	464b      	mov	r3, r9
 800782a:	4606      	mov	r6, r0
 800782c:	460f      	mov	r7, r1
 800782e:	f7f9 f97b 	bl	8000b28 <__aeabi_dcmpgt>
 8007832:	b9c8      	cbnz	r0, 8007868 <_dtoa_r+0x6f8>
 8007834:	4642      	mov	r2, r8
 8007836:	464b      	mov	r3, r9
 8007838:	4630      	mov	r0, r6
 800783a:	4639      	mov	r1, r7
 800783c:	f7f9 f94c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007840:	b110      	cbz	r0, 8007848 <_dtoa_r+0x6d8>
 8007842:	9b02      	ldr	r3, [sp, #8]
 8007844:	07d9      	lsls	r1, r3, #31
 8007846:	d40f      	bmi.n	8007868 <_dtoa_r+0x6f8>
 8007848:	4620      	mov	r0, r4
 800784a:	4659      	mov	r1, fp
 800784c:	f000 fac8 	bl	8007de0 <_Bfree>
 8007850:	2300      	movs	r3, #0
 8007852:	702b      	strb	r3, [r5, #0]
 8007854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007856:	f10a 0001 	add.w	r0, sl, #1
 800785a:	6018      	str	r0, [r3, #0]
 800785c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800785e:	2b00      	cmp	r3, #0
 8007860:	f43f acd8 	beq.w	8007214 <_dtoa_r+0xa4>
 8007864:	601d      	str	r5, [r3, #0]
 8007866:	e4d5      	b.n	8007214 <_dtoa_r+0xa4>
 8007868:	f8cd a01c 	str.w	sl, [sp, #28]
 800786c:	462b      	mov	r3, r5
 800786e:	461d      	mov	r5, r3
 8007870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007874:	2a39      	cmp	r2, #57	; 0x39
 8007876:	d108      	bne.n	800788a <_dtoa_r+0x71a>
 8007878:	9a00      	ldr	r2, [sp, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d1f7      	bne.n	800786e <_dtoa_r+0x6fe>
 800787e:	9a07      	ldr	r2, [sp, #28]
 8007880:	9900      	ldr	r1, [sp, #0]
 8007882:	3201      	adds	r2, #1
 8007884:	9207      	str	r2, [sp, #28]
 8007886:	2230      	movs	r2, #48	; 0x30
 8007888:	700a      	strb	r2, [r1, #0]
 800788a:	781a      	ldrb	r2, [r3, #0]
 800788c:	3201      	adds	r2, #1
 800788e:	701a      	strb	r2, [r3, #0]
 8007890:	e78c      	b.n	80077ac <_dtoa_r+0x63c>
 8007892:	4b7f      	ldr	r3, [pc, #508]	; (8007a90 <_dtoa_r+0x920>)
 8007894:	2200      	movs	r2, #0
 8007896:	f7f8 feb7 	bl	8000608 <__aeabi_dmul>
 800789a:	2200      	movs	r2, #0
 800789c:	2300      	movs	r3, #0
 800789e:	4606      	mov	r6, r0
 80078a0:	460f      	mov	r7, r1
 80078a2:	f7f9 f919 	bl	8000ad8 <__aeabi_dcmpeq>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d09b      	beq.n	80077e2 <_dtoa_r+0x672>
 80078aa:	e7cd      	b.n	8007848 <_dtoa_r+0x6d8>
 80078ac:	9a08      	ldr	r2, [sp, #32]
 80078ae:	2a00      	cmp	r2, #0
 80078b0:	f000 80c4 	beq.w	8007a3c <_dtoa_r+0x8cc>
 80078b4:	9a05      	ldr	r2, [sp, #20]
 80078b6:	2a01      	cmp	r2, #1
 80078b8:	f300 80a8 	bgt.w	8007a0c <_dtoa_r+0x89c>
 80078bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078be:	2a00      	cmp	r2, #0
 80078c0:	f000 80a0 	beq.w	8007a04 <_dtoa_r+0x894>
 80078c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078c8:	9e06      	ldr	r6, [sp, #24]
 80078ca:	4645      	mov	r5, r8
 80078cc:	9a04      	ldr	r2, [sp, #16]
 80078ce:	2101      	movs	r1, #1
 80078d0:	441a      	add	r2, r3
 80078d2:	4620      	mov	r0, r4
 80078d4:	4498      	add	r8, r3
 80078d6:	9204      	str	r2, [sp, #16]
 80078d8:	f000 fb3e 	bl	8007f58 <__i2b>
 80078dc:	4607      	mov	r7, r0
 80078de:	2d00      	cmp	r5, #0
 80078e0:	dd0b      	ble.n	80078fa <_dtoa_r+0x78a>
 80078e2:	9b04      	ldr	r3, [sp, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	dd08      	ble.n	80078fa <_dtoa_r+0x78a>
 80078e8:	42ab      	cmp	r3, r5
 80078ea:	9a04      	ldr	r2, [sp, #16]
 80078ec:	bfa8      	it	ge
 80078ee:	462b      	movge	r3, r5
 80078f0:	eba8 0803 	sub.w	r8, r8, r3
 80078f4:	1aed      	subs	r5, r5, r3
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	9304      	str	r3, [sp, #16]
 80078fa:	9b06      	ldr	r3, [sp, #24]
 80078fc:	b1fb      	cbz	r3, 800793e <_dtoa_r+0x7ce>
 80078fe:	9b08      	ldr	r3, [sp, #32]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 809f 	beq.w	8007a44 <_dtoa_r+0x8d4>
 8007906:	2e00      	cmp	r6, #0
 8007908:	dd11      	ble.n	800792e <_dtoa_r+0x7be>
 800790a:	4639      	mov	r1, r7
 800790c:	4632      	mov	r2, r6
 800790e:	4620      	mov	r0, r4
 8007910:	f000 fbde 	bl	80080d0 <__pow5mult>
 8007914:	465a      	mov	r2, fp
 8007916:	4601      	mov	r1, r0
 8007918:	4607      	mov	r7, r0
 800791a:	4620      	mov	r0, r4
 800791c:	f000 fb32 	bl	8007f84 <__multiply>
 8007920:	4659      	mov	r1, fp
 8007922:	9007      	str	r0, [sp, #28]
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fa5b 	bl	8007de0 <_Bfree>
 800792a:	9b07      	ldr	r3, [sp, #28]
 800792c:	469b      	mov	fp, r3
 800792e:	9b06      	ldr	r3, [sp, #24]
 8007930:	1b9a      	subs	r2, r3, r6
 8007932:	d004      	beq.n	800793e <_dtoa_r+0x7ce>
 8007934:	4659      	mov	r1, fp
 8007936:	4620      	mov	r0, r4
 8007938:	f000 fbca 	bl	80080d0 <__pow5mult>
 800793c:	4683      	mov	fp, r0
 800793e:	2101      	movs	r1, #1
 8007940:	4620      	mov	r0, r4
 8007942:	f000 fb09 	bl	8007f58 <__i2b>
 8007946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007948:	2b00      	cmp	r3, #0
 800794a:	4606      	mov	r6, r0
 800794c:	dd7c      	ble.n	8007a48 <_dtoa_r+0x8d8>
 800794e:	461a      	mov	r2, r3
 8007950:	4601      	mov	r1, r0
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fbbc 	bl	80080d0 <__pow5mult>
 8007958:	9b05      	ldr	r3, [sp, #20]
 800795a:	2b01      	cmp	r3, #1
 800795c:	4606      	mov	r6, r0
 800795e:	dd76      	ble.n	8007a4e <_dtoa_r+0x8de>
 8007960:	2300      	movs	r3, #0
 8007962:	9306      	str	r3, [sp, #24]
 8007964:	6933      	ldr	r3, [r6, #16]
 8007966:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800796a:	6918      	ldr	r0, [r3, #16]
 800796c:	f000 faa4 	bl	8007eb8 <__hi0bits>
 8007970:	f1c0 0020 	rsb	r0, r0, #32
 8007974:	9b04      	ldr	r3, [sp, #16]
 8007976:	4418      	add	r0, r3
 8007978:	f010 001f 	ands.w	r0, r0, #31
 800797c:	f000 8086 	beq.w	8007a8c <_dtoa_r+0x91c>
 8007980:	f1c0 0320 	rsb	r3, r0, #32
 8007984:	2b04      	cmp	r3, #4
 8007986:	dd7f      	ble.n	8007a88 <_dtoa_r+0x918>
 8007988:	f1c0 001c 	rsb	r0, r0, #28
 800798c:	9b04      	ldr	r3, [sp, #16]
 800798e:	4403      	add	r3, r0
 8007990:	4480      	add	r8, r0
 8007992:	4405      	add	r5, r0
 8007994:	9304      	str	r3, [sp, #16]
 8007996:	f1b8 0f00 	cmp.w	r8, #0
 800799a:	dd05      	ble.n	80079a8 <_dtoa_r+0x838>
 800799c:	4659      	mov	r1, fp
 800799e:	4642      	mov	r2, r8
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fbef 	bl	8008184 <__lshift>
 80079a6:	4683      	mov	fp, r0
 80079a8:	9b04      	ldr	r3, [sp, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	dd05      	ble.n	80079ba <_dtoa_r+0x84a>
 80079ae:	4631      	mov	r1, r6
 80079b0:	461a      	mov	r2, r3
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 fbe6 	bl	8008184 <__lshift>
 80079b8:	4606      	mov	r6, r0
 80079ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d069      	beq.n	8007a94 <_dtoa_r+0x924>
 80079c0:	4631      	mov	r1, r6
 80079c2:	4658      	mov	r0, fp
 80079c4:	f000 fc4a 	bl	800825c <__mcmp>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	da63      	bge.n	8007a94 <_dtoa_r+0x924>
 80079cc:	2300      	movs	r3, #0
 80079ce:	4659      	mov	r1, fp
 80079d0:	220a      	movs	r2, #10
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 fa26 	bl	8007e24 <__multadd>
 80079d8:	9b08      	ldr	r3, [sp, #32]
 80079da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079de:	4683      	mov	fp, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 818f 	beq.w	8007d04 <_dtoa_r+0xb94>
 80079e6:	4639      	mov	r1, r7
 80079e8:	2300      	movs	r3, #0
 80079ea:	220a      	movs	r2, #10
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 fa19 	bl	8007e24 <__multadd>
 80079f2:	f1b9 0f00 	cmp.w	r9, #0
 80079f6:	4607      	mov	r7, r0
 80079f8:	f300 808e 	bgt.w	8007b18 <_dtoa_r+0x9a8>
 80079fc:	9b05      	ldr	r3, [sp, #20]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	dc50      	bgt.n	8007aa4 <_dtoa_r+0x934>
 8007a02:	e089      	b.n	8007b18 <_dtoa_r+0x9a8>
 8007a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a0a:	e75d      	b.n	80078c8 <_dtoa_r+0x758>
 8007a0c:	9b01      	ldr	r3, [sp, #4]
 8007a0e:	1e5e      	subs	r6, r3, #1
 8007a10:	9b06      	ldr	r3, [sp, #24]
 8007a12:	42b3      	cmp	r3, r6
 8007a14:	bfbf      	itttt	lt
 8007a16:	9b06      	ldrlt	r3, [sp, #24]
 8007a18:	9606      	strlt	r6, [sp, #24]
 8007a1a:	1af2      	sublt	r2, r6, r3
 8007a1c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007a1e:	bfb6      	itet	lt
 8007a20:	189b      	addlt	r3, r3, r2
 8007a22:	1b9e      	subge	r6, r3, r6
 8007a24:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007a26:	9b01      	ldr	r3, [sp, #4]
 8007a28:	bfb8      	it	lt
 8007a2a:	2600      	movlt	r6, #0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bfb5      	itete	lt
 8007a30:	eba8 0503 	sublt.w	r5, r8, r3
 8007a34:	9b01      	ldrge	r3, [sp, #4]
 8007a36:	2300      	movlt	r3, #0
 8007a38:	4645      	movge	r5, r8
 8007a3a:	e747      	b.n	80078cc <_dtoa_r+0x75c>
 8007a3c:	9e06      	ldr	r6, [sp, #24]
 8007a3e:	9f08      	ldr	r7, [sp, #32]
 8007a40:	4645      	mov	r5, r8
 8007a42:	e74c      	b.n	80078de <_dtoa_r+0x76e>
 8007a44:	9a06      	ldr	r2, [sp, #24]
 8007a46:	e775      	b.n	8007934 <_dtoa_r+0x7c4>
 8007a48:	9b05      	ldr	r3, [sp, #20]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	dc18      	bgt.n	8007a80 <_dtoa_r+0x910>
 8007a4e:	9b02      	ldr	r3, [sp, #8]
 8007a50:	b9b3      	cbnz	r3, 8007a80 <_dtoa_r+0x910>
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a58:	b9a3      	cbnz	r3, 8007a84 <_dtoa_r+0x914>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a60:	0d1b      	lsrs	r3, r3, #20
 8007a62:	051b      	lsls	r3, r3, #20
 8007a64:	b12b      	cbz	r3, 8007a72 <_dtoa_r+0x902>
 8007a66:	9b04      	ldr	r3, [sp, #16]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	f108 0801 	add.w	r8, r8, #1
 8007a70:	2301      	movs	r3, #1
 8007a72:	9306      	str	r3, [sp, #24]
 8007a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f47f af74 	bne.w	8007964 <_dtoa_r+0x7f4>
 8007a7c:	2001      	movs	r0, #1
 8007a7e:	e779      	b.n	8007974 <_dtoa_r+0x804>
 8007a80:	2300      	movs	r3, #0
 8007a82:	e7f6      	b.n	8007a72 <_dtoa_r+0x902>
 8007a84:	9b02      	ldr	r3, [sp, #8]
 8007a86:	e7f4      	b.n	8007a72 <_dtoa_r+0x902>
 8007a88:	d085      	beq.n	8007996 <_dtoa_r+0x826>
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	301c      	adds	r0, #28
 8007a8e:	e77d      	b.n	800798c <_dtoa_r+0x81c>
 8007a90:	40240000 	.word	0x40240000
 8007a94:	9b01      	ldr	r3, [sp, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dc38      	bgt.n	8007b0c <_dtoa_r+0x99c>
 8007a9a:	9b05      	ldr	r3, [sp, #20]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	dd35      	ble.n	8007b0c <_dtoa_r+0x99c>
 8007aa0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007aa4:	f1b9 0f00 	cmp.w	r9, #0
 8007aa8:	d10d      	bne.n	8007ac6 <_dtoa_r+0x956>
 8007aaa:	4631      	mov	r1, r6
 8007aac:	464b      	mov	r3, r9
 8007aae:	2205      	movs	r2, #5
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 f9b7 	bl	8007e24 <__multadd>
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	4606      	mov	r6, r0
 8007aba:	4658      	mov	r0, fp
 8007abc:	f000 fbce 	bl	800825c <__mcmp>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f73f adbd 	bgt.w	8007640 <_dtoa_r+0x4d0>
 8007ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac8:	9d00      	ldr	r5, [sp, #0]
 8007aca:	ea6f 0a03 	mvn.w	sl, r3
 8007ace:	f04f 0800 	mov.w	r8, #0
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 f983 	bl	8007de0 <_Bfree>
 8007ada:	2f00      	cmp	r7, #0
 8007adc:	f43f aeb4 	beq.w	8007848 <_dtoa_r+0x6d8>
 8007ae0:	f1b8 0f00 	cmp.w	r8, #0
 8007ae4:	d005      	beq.n	8007af2 <_dtoa_r+0x982>
 8007ae6:	45b8      	cmp	r8, r7
 8007ae8:	d003      	beq.n	8007af2 <_dtoa_r+0x982>
 8007aea:	4641      	mov	r1, r8
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 f977 	bl	8007de0 <_Bfree>
 8007af2:	4639      	mov	r1, r7
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 f973 	bl	8007de0 <_Bfree>
 8007afa:	e6a5      	b.n	8007848 <_dtoa_r+0x6d8>
 8007afc:	2600      	movs	r6, #0
 8007afe:	4637      	mov	r7, r6
 8007b00:	e7e1      	b.n	8007ac6 <_dtoa_r+0x956>
 8007b02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007b08:	4637      	mov	r7, r6
 8007b0a:	e599      	b.n	8007640 <_dtoa_r+0x4d0>
 8007b0c:	9b08      	ldr	r3, [sp, #32]
 8007b0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 80fd 	beq.w	8007d12 <_dtoa_r+0xba2>
 8007b18:	2d00      	cmp	r5, #0
 8007b1a:	dd05      	ble.n	8007b28 <_dtoa_r+0x9b8>
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	462a      	mov	r2, r5
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 fb2f 	bl	8008184 <__lshift>
 8007b26:	4607      	mov	r7, r0
 8007b28:	9b06      	ldr	r3, [sp, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d05c      	beq.n	8007be8 <_dtoa_r+0xa78>
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	4620      	mov	r0, r4
 8007b32:	f000 f915 	bl	8007d60 <_Balloc>
 8007b36:	4605      	mov	r5, r0
 8007b38:	b928      	cbnz	r0, 8007b46 <_dtoa_r+0x9d6>
 8007b3a:	4b80      	ldr	r3, [pc, #512]	; (8007d3c <_dtoa_r+0xbcc>)
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b42:	f7ff bb2e 	b.w	80071a2 <_dtoa_r+0x32>
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	3202      	adds	r2, #2
 8007b4a:	0092      	lsls	r2, r2, #2
 8007b4c:	f107 010c 	add.w	r1, r7, #12
 8007b50:	300c      	adds	r0, #12
 8007b52:	f7fe fe01 	bl	8006758 <memcpy>
 8007b56:	2201      	movs	r2, #1
 8007b58:	4629      	mov	r1, r5
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 fb12 	bl	8008184 <__lshift>
 8007b60:	9b00      	ldr	r3, [sp, #0]
 8007b62:	3301      	adds	r3, #1
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	9b00      	ldr	r3, [sp, #0]
 8007b68:	444b      	add	r3, r9
 8007b6a:	9307      	str	r3, [sp, #28]
 8007b6c:	9b02      	ldr	r3, [sp, #8]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	46b8      	mov	r8, r7
 8007b74:	9306      	str	r3, [sp, #24]
 8007b76:	4607      	mov	r7, r0
 8007b78:	9b01      	ldr	r3, [sp, #4]
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	4658      	mov	r0, fp
 8007b80:	9302      	str	r3, [sp, #8]
 8007b82:	f7ff fa69 	bl	8007058 <quorem>
 8007b86:	4603      	mov	r3, r0
 8007b88:	3330      	adds	r3, #48	; 0x30
 8007b8a:	9004      	str	r0, [sp, #16]
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	4658      	mov	r0, fp
 8007b90:	9308      	str	r3, [sp, #32]
 8007b92:	f000 fb63 	bl	800825c <__mcmp>
 8007b96:	463a      	mov	r2, r7
 8007b98:	4681      	mov	r9, r0
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f000 fb79 	bl	8008294 <__mdiff>
 8007ba2:	68c2      	ldr	r2, [r0, #12]
 8007ba4:	9b08      	ldr	r3, [sp, #32]
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	bb02      	cbnz	r2, 8007bec <_dtoa_r+0xa7c>
 8007baa:	4601      	mov	r1, r0
 8007bac:	4658      	mov	r0, fp
 8007bae:	f000 fb55 	bl	800825c <__mcmp>
 8007bb2:	9b08      	ldr	r3, [sp, #32]
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	4620      	mov	r0, r4
 8007bba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007bbe:	f000 f90f 	bl	8007de0 <_Bfree>
 8007bc2:	9b05      	ldr	r3, [sp, #20]
 8007bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bc6:	9d01      	ldr	r5, [sp, #4]
 8007bc8:	ea43 0102 	orr.w	r1, r3, r2
 8007bcc:	9b06      	ldr	r3, [sp, #24]
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	9b08      	ldr	r3, [sp, #32]
 8007bd2:	d10d      	bne.n	8007bf0 <_dtoa_r+0xa80>
 8007bd4:	2b39      	cmp	r3, #57	; 0x39
 8007bd6:	d029      	beq.n	8007c2c <_dtoa_r+0xabc>
 8007bd8:	f1b9 0f00 	cmp.w	r9, #0
 8007bdc:	dd01      	ble.n	8007be2 <_dtoa_r+0xa72>
 8007bde:	9b04      	ldr	r3, [sp, #16]
 8007be0:	3331      	adds	r3, #49	; 0x31
 8007be2:	9a02      	ldr	r2, [sp, #8]
 8007be4:	7013      	strb	r3, [r2, #0]
 8007be6:	e774      	b.n	8007ad2 <_dtoa_r+0x962>
 8007be8:	4638      	mov	r0, r7
 8007bea:	e7b9      	b.n	8007b60 <_dtoa_r+0x9f0>
 8007bec:	2201      	movs	r2, #1
 8007bee:	e7e2      	b.n	8007bb6 <_dtoa_r+0xa46>
 8007bf0:	f1b9 0f00 	cmp.w	r9, #0
 8007bf4:	db06      	blt.n	8007c04 <_dtoa_r+0xa94>
 8007bf6:	9905      	ldr	r1, [sp, #20]
 8007bf8:	ea41 0909 	orr.w	r9, r1, r9
 8007bfc:	9906      	ldr	r1, [sp, #24]
 8007bfe:	ea59 0101 	orrs.w	r1, r9, r1
 8007c02:	d120      	bne.n	8007c46 <_dtoa_r+0xad6>
 8007c04:	2a00      	cmp	r2, #0
 8007c06:	ddec      	ble.n	8007be2 <_dtoa_r+0xa72>
 8007c08:	4659      	mov	r1, fp
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	f000 fab8 	bl	8008184 <__lshift>
 8007c14:	4631      	mov	r1, r6
 8007c16:	4683      	mov	fp, r0
 8007c18:	f000 fb20 	bl	800825c <__mcmp>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	9b01      	ldr	r3, [sp, #4]
 8007c20:	dc02      	bgt.n	8007c28 <_dtoa_r+0xab8>
 8007c22:	d1de      	bne.n	8007be2 <_dtoa_r+0xa72>
 8007c24:	07da      	lsls	r2, r3, #31
 8007c26:	d5dc      	bpl.n	8007be2 <_dtoa_r+0xa72>
 8007c28:	2b39      	cmp	r3, #57	; 0x39
 8007c2a:	d1d8      	bne.n	8007bde <_dtoa_r+0xa6e>
 8007c2c:	9a02      	ldr	r2, [sp, #8]
 8007c2e:	2339      	movs	r3, #57	; 0x39
 8007c30:	7013      	strb	r3, [r2, #0]
 8007c32:	462b      	mov	r3, r5
 8007c34:	461d      	mov	r5, r3
 8007c36:	3b01      	subs	r3, #1
 8007c38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c3c:	2a39      	cmp	r2, #57	; 0x39
 8007c3e:	d050      	beq.n	8007ce2 <_dtoa_r+0xb72>
 8007c40:	3201      	adds	r2, #1
 8007c42:	701a      	strb	r2, [r3, #0]
 8007c44:	e745      	b.n	8007ad2 <_dtoa_r+0x962>
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	dd03      	ble.n	8007c52 <_dtoa_r+0xae2>
 8007c4a:	2b39      	cmp	r3, #57	; 0x39
 8007c4c:	d0ee      	beq.n	8007c2c <_dtoa_r+0xabc>
 8007c4e:	3301      	adds	r3, #1
 8007c50:	e7c7      	b.n	8007be2 <_dtoa_r+0xa72>
 8007c52:	9a01      	ldr	r2, [sp, #4]
 8007c54:	9907      	ldr	r1, [sp, #28]
 8007c56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c5a:	428a      	cmp	r2, r1
 8007c5c:	d02a      	beq.n	8007cb4 <_dtoa_r+0xb44>
 8007c5e:	4659      	mov	r1, fp
 8007c60:	2300      	movs	r3, #0
 8007c62:	220a      	movs	r2, #10
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 f8dd 	bl	8007e24 <__multadd>
 8007c6a:	45b8      	cmp	r8, r7
 8007c6c:	4683      	mov	fp, r0
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	f04f 020a 	mov.w	r2, #10
 8007c76:	4641      	mov	r1, r8
 8007c78:	4620      	mov	r0, r4
 8007c7a:	d107      	bne.n	8007c8c <_dtoa_r+0xb1c>
 8007c7c:	f000 f8d2 	bl	8007e24 <__multadd>
 8007c80:	4680      	mov	r8, r0
 8007c82:	4607      	mov	r7, r0
 8007c84:	9b01      	ldr	r3, [sp, #4]
 8007c86:	3301      	adds	r3, #1
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	e775      	b.n	8007b78 <_dtoa_r+0xa08>
 8007c8c:	f000 f8ca 	bl	8007e24 <__multadd>
 8007c90:	4639      	mov	r1, r7
 8007c92:	4680      	mov	r8, r0
 8007c94:	2300      	movs	r3, #0
 8007c96:	220a      	movs	r2, #10
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 f8c3 	bl	8007e24 <__multadd>
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	e7f0      	b.n	8007c84 <_dtoa_r+0xb14>
 8007ca2:	f1b9 0f00 	cmp.w	r9, #0
 8007ca6:	9a00      	ldr	r2, [sp, #0]
 8007ca8:	bfcc      	ite	gt
 8007caa:	464d      	movgt	r5, r9
 8007cac:	2501      	movle	r5, #1
 8007cae:	4415      	add	r5, r2
 8007cb0:	f04f 0800 	mov.w	r8, #0
 8007cb4:	4659      	mov	r1, fp
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	4620      	mov	r0, r4
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	f000 fa62 	bl	8008184 <__lshift>
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4683      	mov	fp, r0
 8007cc4:	f000 faca 	bl	800825c <__mcmp>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	dcb2      	bgt.n	8007c32 <_dtoa_r+0xac2>
 8007ccc:	d102      	bne.n	8007cd4 <_dtoa_r+0xb64>
 8007cce:	9b01      	ldr	r3, [sp, #4]
 8007cd0:	07db      	lsls	r3, r3, #31
 8007cd2:	d4ae      	bmi.n	8007c32 <_dtoa_r+0xac2>
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	461d      	mov	r5, r3
 8007cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cdc:	2a30      	cmp	r2, #48	; 0x30
 8007cde:	d0fa      	beq.n	8007cd6 <_dtoa_r+0xb66>
 8007ce0:	e6f7      	b.n	8007ad2 <_dtoa_r+0x962>
 8007ce2:	9a00      	ldr	r2, [sp, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d1a5      	bne.n	8007c34 <_dtoa_r+0xac4>
 8007ce8:	f10a 0a01 	add.w	sl, sl, #1
 8007cec:	2331      	movs	r3, #49	; 0x31
 8007cee:	e779      	b.n	8007be4 <_dtoa_r+0xa74>
 8007cf0:	4b13      	ldr	r3, [pc, #76]	; (8007d40 <_dtoa_r+0xbd0>)
 8007cf2:	f7ff baaf 	b.w	8007254 <_dtoa_r+0xe4>
 8007cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f47f aa86 	bne.w	800720a <_dtoa_r+0x9a>
 8007cfe:	4b11      	ldr	r3, [pc, #68]	; (8007d44 <_dtoa_r+0xbd4>)
 8007d00:	f7ff baa8 	b.w	8007254 <_dtoa_r+0xe4>
 8007d04:	f1b9 0f00 	cmp.w	r9, #0
 8007d08:	dc03      	bgt.n	8007d12 <_dtoa_r+0xba2>
 8007d0a:	9b05      	ldr	r3, [sp, #20]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	f73f aec9 	bgt.w	8007aa4 <_dtoa_r+0x934>
 8007d12:	9d00      	ldr	r5, [sp, #0]
 8007d14:	4631      	mov	r1, r6
 8007d16:	4658      	mov	r0, fp
 8007d18:	f7ff f99e 	bl	8007058 <quorem>
 8007d1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007d20:	f805 3b01 	strb.w	r3, [r5], #1
 8007d24:	9a00      	ldr	r2, [sp, #0]
 8007d26:	1aaa      	subs	r2, r5, r2
 8007d28:	4591      	cmp	r9, r2
 8007d2a:	ddba      	ble.n	8007ca2 <_dtoa_r+0xb32>
 8007d2c:	4659      	mov	r1, fp
 8007d2e:	2300      	movs	r3, #0
 8007d30:	220a      	movs	r2, #10
 8007d32:	4620      	mov	r0, r4
 8007d34:	f000 f876 	bl	8007e24 <__multadd>
 8007d38:	4683      	mov	fp, r0
 8007d3a:	e7eb      	b.n	8007d14 <_dtoa_r+0xba4>
 8007d3c:	08009263 	.word	0x08009263
 8007d40:	080091bc 	.word	0x080091bc
 8007d44:	080091e0 	.word	0x080091e0

08007d48 <_localeconv_r>:
 8007d48:	4800      	ldr	r0, [pc, #0]	; (8007d4c <_localeconv_r+0x4>)
 8007d4a:	4770      	bx	lr
 8007d4c:	200001c4 	.word	0x200001c4

08007d50 <malloc>:
 8007d50:	4b02      	ldr	r3, [pc, #8]	; (8007d5c <malloc+0xc>)
 8007d52:	4601      	mov	r1, r0
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	f000 bbe1 	b.w	800851c <_malloc_r>
 8007d5a:	bf00      	nop
 8007d5c:	20000070 	.word	0x20000070

08007d60 <_Balloc>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d64:	4604      	mov	r4, r0
 8007d66:	460d      	mov	r5, r1
 8007d68:	b976      	cbnz	r6, 8007d88 <_Balloc+0x28>
 8007d6a:	2010      	movs	r0, #16
 8007d6c:	f7ff fff0 	bl	8007d50 <malloc>
 8007d70:	4602      	mov	r2, r0
 8007d72:	6260      	str	r0, [r4, #36]	; 0x24
 8007d74:	b920      	cbnz	r0, 8007d80 <_Balloc+0x20>
 8007d76:	4b18      	ldr	r3, [pc, #96]	; (8007dd8 <_Balloc+0x78>)
 8007d78:	4818      	ldr	r0, [pc, #96]	; (8007ddc <_Balloc+0x7c>)
 8007d7a:	2166      	movs	r1, #102	; 0x66
 8007d7c:	f000 fc38 	bl	80085f0 <__assert_func>
 8007d80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d84:	6006      	str	r6, [r0, #0]
 8007d86:	60c6      	str	r6, [r0, #12]
 8007d88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d8a:	68f3      	ldr	r3, [r6, #12]
 8007d8c:	b183      	cbz	r3, 8007db0 <_Balloc+0x50>
 8007d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d96:	b9b8      	cbnz	r0, 8007dc8 <_Balloc+0x68>
 8007d98:	2101      	movs	r1, #1
 8007d9a:	fa01 f605 	lsl.w	r6, r1, r5
 8007d9e:	1d72      	adds	r2, r6, #5
 8007da0:	0092      	lsls	r2, r2, #2
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 fb5a 	bl	800845c <_calloc_r>
 8007da8:	b160      	cbz	r0, 8007dc4 <_Balloc+0x64>
 8007daa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dae:	e00e      	b.n	8007dce <_Balloc+0x6e>
 8007db0:	2221      	movs	r2, #33	; 0x21
 8007db2:	2104      	movs	r1, #4
 8007db4:	4620      	mov	r0, r4
 8007db6:	f000 fb51 	bl	800845c <_calloc_r>
 8007dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dbc:	60f0      	str	r0, [r6, #12]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e4      	bne.n	8007d8e <_Balloc+0x2e>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	6802      	ldr	r2, [r0, #0]
 8007dca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dd4:	e7f7      	b.n	8007dc6 <_Balloc+0x66>
 8007dd6:	bf00      	nop
 8007dd8:	080091ed 	.word	0x080091ed
 8007ddc:	08009274 	.word	0x08009274

08007de0 <_Bfree>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007de4:	4605      	mov	r5, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b976      	cbnz	r6, 8007e08 <_Bfree+0x28>
 8007dea:	2010      	movs	r0, #16
 8007dec:	f7ff ffb0 	bl	8007d50 <malloc>
 8007df0:	4602      	mov	r2, r0
 8007df2:	6268      	str	r0, [r5, #36]	; 0x24
 8007df4:	b920      	cbnz	r0, 8007e00 <_Bfree+0x20>
 8007df6:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <_Bfree+0x3c>)
 8007df8:	4809      	ldr	r0, [pc, #36]	; (8007e20 <_Bfree+0x40>)
 8007dfa:	218a      	movs	r1, #138	; 0x8a
 8007dfc:	f000 fbf8 	bl	80085f0 <__assert_func>
 8007e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e04:	6006      	str	r6, [r0, #0]
 8007e06:	60c6      	str	r6, [r0, #12]
 8007e08:	b13c      	cbz	r4, 8007e1a <_Bfree+0x3a>
 8007e0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e0c:	6862      	ldr	r2, [r4, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e14:	6021      	str	r1, [r4, #0]
 8007e16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	080091ed 	.word	0x080091ed
 8007e20:	08009274 	.word	0x08009274

08007e24 <__multadd>:
 8007e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e28:	690e      	ldr	r6, [r1, #16]
 8007e2a:	4607      	mov	r7, r0
 8007e2c:	4698      	mov	r8, r3
 8007e2e:	460c      	mov	r4, r1
 8007e30:	f101 0014 	add.w	r0, r1, #20
 8007e34:	2300      	movs	r3, #0
 8007e36:	6805      	ldr	r5, [r0, #0]
 8007e38:	b2a9      	uxth	r1, r5
 8007e3a:	fb02 8101 	mla	r1, r2, r1, r8
 8007e3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007e42:	0c2d      	lsrs	r5, r5, #16
 8007e44:	fb02 c505 	mla	r5, r2, r5, ip
 8007e48:	b289      	uxth	r1, r1
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007e50:	429e      	cmp	r6, r3
 8007e52:	f840 1b04 	str.w	r1, [r0], #4
 8007e56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007e5a:	dcec      	bgt.n	8007e36 <__multadd+0x12>
 8007e5c:	f1b8 0f00 	cmp.w	r8, #0
 8007e60:	d022      	beq.n	8007ea8 <__multadd+0x84>
 8007e62:	68a3      	ldr	r3, [r4, #8]
 8007e64:	42b3      	cmp	r3, r6
 8007e66:	dc19      	bgt.n	8007e9c <__multadd+0x78>
 8007e68:	6861      	ldr	r1, [r4, #4]
 8007e6a:	4638      	mov	r0, r7
 8007e6c:	3101      	adds	r1, #1
 8007e6e:	f7ff ff77 	bl	8007d60 <_Balloc>
 8007e72:	4605      	mov	r5, r0
 8007e74:	b928      	cbnz	r0, 8007e82 <__multadd+0x5e>
 8007e76:	4602      	mov	r2, r0
 8007e78:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <__multadd+0x8c>)
 8007e7a:	480e      	ldr	r0, [pc, #56]	; (8007eb4 <__multadd+0x90>)
 8007e7c:	21b5      	movs	r1, #181	; 0xb5
 8007e7e:	f000 fbb7 	bl	80085f0 <__assert_func>
 8007e82:	6922      	ldr	r2, [r4, #16]
 8007e84:	3202      	adds	r2, #2
 8007e86:	f104 010c 	add.w	r1, r4, #12
 8007e8a:	0092      	lsls	r2, r2, #2
 8007e8c:	300c      	adds	r0, #12
 8007e8e:	f7fe fc63 	bl	8006758 <memcpy>
 8007e92:	4621      	mov	r1, r4
 8007e94:	4638      	mov	r0, r7
 8007e96:	f7ff ffa3 	bl	8007de0 <_Bfree>
 8007e9a:	462c      	mov	r4, r5
 8007e9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007ea0:	3601      	adds	r6, #1
 8007ea2:	f8c3 8014 	str.w	r8, [r3, #20]
 8007ea6:	6126      	str	r6, [r4, #16]
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eae:	bf00      	nop
 8007eb0:	08009263 	.word	0x08009263
 8007eb4:	08009274 	.word	0x08009274

08007eb8 <__hi0bits>:
 8007eb8:	0c03      	lsrs	r3, r0, #16
 8007eba:	041b      	lsls	r3, r3, #16
 8007ebc:	b9d3      	cbnz	r3, 8007ef4 <__hi0bits+0x3c>
 8007ebe:	0400      	lsls	r0, r0, #16
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ec6:	bf04      	itt	eq
 8007ec8:	0200      	lsleq	r0, r0, #8
 8007eca:	3308      	addeq	r3, #8
 8007ecc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ed0:	bf04      	itt	eq
 8007ed2:	0100      	lsleq	r0, r0, #4
 8007ed4:	3304      	addeq	r3, #4
 8007ed6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007eda:	bf04      	itt	eq
 8007edc:	0080      	lsleq	r0, r0, #2
 8007ede:	3302      	addeq	r3, #2
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	db05      	blt.n	8007ef0 <__hi0bits+0x38>
 8007ee4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ee8:	f103 0301 	add.w	r3, r3, #1
 8007eec:	bf08      	it	eq
 8007eee:	2320      	moveq	r3, #32
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	4770      	bx	lr
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e7e4      	b.n	8007ec2 <__hi0bits+0xa>

08007ef8 <__lo0bits>:
 8007ef8:	6803      	ldr	r3, [r0, #0]
 8007efa:	f013 0207 	ands.w	r2, r3, #7
 8007efe:	4601      	mov	r1, r0
 8007f00:	d00b      	beq.n	8007f1a <__lo0bits+0x22>
 8007f02:	07da      	lsls	r2, r3, #31
 8007f04:	d424      	bmi.n	8007f50 <__lo0bits+0x58>
 8007f06:	0798      	lsls	r0, r3, #30
 8007f08:	bf49      	itett	mi
 8007f0a:	085b      	lsrmi	r3, r3, #1
 8007f0c:	089b      	lsrpl	r3, r3, #2
 8007f0e:	2001      	movmi	r0, #1
 8007f10:	600b      	strmi	r3, [r1, #0]
 8007f12:	bf5c      	itt	pl
 8007f14:	600b      	strpl	r3, [r1, #0]
 8007f16:	2002      	movpl	r0, #2
 8007f18:	4770      	bx	lr
 8007f1a:	b298      	uxth	r0, r3
 8007f1c:	b9b0      	cbnz	r0, 8007f4c <__lo0bits+0x54>
 8007f1e:	0c1b      	lsrs	r3, r3, #16
 8007f20:	2010      	movs	r0, #16
 8007f22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007f26:	bf04      	itt	eq
 8007f28:	0a1b      	lsreq	r3, r3, #8
 8007f2a:	3008      	addeq	r0, #8
 8007f2c:	071a      	lsls	r2, r3, #28
 8007f2e:	bf04      	itt	eq
 8007f30:	091b      	lsreq	r3, r3, #4
 8007f32:	3004      	addeq	r0, #4
 8007f34:	079a      	lsls	r2, r3, #30
 8007f36:	bf04      	itt	eq
 8007f38:	089b      	lsreq	r3, r3, #2
 8007f3a:	3002      	addeq	r0, #2
 8007f3c:	07da      	lsls	r2, r3, #31
 8007f3e:	d403      	bmi.n	8007f48 <__lo0bits+0x50>
 8007f40:	085b      	lsrs	r3, r3, #1
 8007f42:	f100 0001 	add.w	r0, r0, #1
 8007f46:	d005      	beq.n	8007f54 <__lo0bits+0x5c>
 8007f48:	600b      	str	r3, [r1, #0]
 8007f4a:	4770      	bx	lr
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	e7e8      	b.n	8007f22 <__lo0bits+0x2a>
 8007f50:	2000      	movs	r0, #0
 8007f52:	4770      	bx	lr
 8007f54:	2020      	movs	r0, #32
 8007f56:	4770      	bx	lr

08007f58 <__i2b>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	f7ff feff 	bl	8007d60 <_Balloc>
 8007f62:	4602      	mov	r2, r0
 8007f64:	b928      	cbnz	r0, 8007f72 <__i2b+0x1a>
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <__i2b+0x24>)
 8007f68:	4805      	ldr	r0, [pc, #20]	; (8007f80 <__i2b+0x28>)
 8007f6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f6e:	f000 fb3f 	bl	80085f0 <__assert_func>
 8007f72:	2301      	movs	r3, #1
 8007f74:	6144      	str	r4, [r0, #20]
 8007f76:	6103      	str	r3, [r0, #16]
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	bf00      	nop
 8007f7c:	08009263 	.word	0x08009263
 8007f80:	08009274 	.word	0x08009274

08007f84 <__multiply>:
 8007f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	4614      	mov	r4, r2
 8007f8a:	690a      	ldr	r2, [r1, #16]
 8007f8c:	6923      	ldr	r3, [r4, #16]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	bfb8      	it	lt
 8007f92:	460b      	movlt	r3, r1
 8007f94:	460d      	mov	r5, r1
 8007f96:	bfbc      	itt	lt
 8007f98:	4625      	movlt	r5, r4
 8007f9a:	461c      	movlt	r4, r3
 8007f9c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007fa0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007fa4:	68ab      	ldr	r3, [r5, #8]
 8007fa6:	6869      	ldr	r1, [r5, #4]
 8007fa8:	eb0a 0709 	add.w	r7, sl, r9
 8007fac:	42bb      	cmp	r3, r7
 8007fae:	b085      	sub	sp, #20
 8007fb0:	bfb8      	it	lt
 8007fb2:	3101      	addlt	r1, #1
 8007fb4:	f7ff fed4 	bl	8007d60 <_Balloc>
 8007fb8:	b930      	cbnz	r0, 8007fc8 <__multiply+0x44>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	4b42      	ldr	r3, [pc, #264]	; (80080c8 <__multiply+0x144>)
 8007fbe:	4843      	ldr	r0, [pc, #268]	; (80080cc <__multiply+0x148>)
 8007fc0:	f240 115d 	movw	r1, #349	; 0x15d
 8007fc4:	f000 fb14 	bl	80085f0 <__assert_func>
 8007fc8:	f100 0614 	add.w	r6, r0, #20
 8007fcc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007fd0:	4633      	mov	r3, r6
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	4543      	cmp	r3, r8
 8007fd6:	d31e      	bcc.n	8008016 <__multiply+0x92>
 8007fd8:	f105 0c14 	add.w	ip, r5, #20
 8007fdc:	f104 0314 	add.w	r3, r4, #20
 8007fe0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007fe4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007fe8:	9202      	str	r2, [sp, #8]
 8007fea:	ebac 0205 	sub.w	r2, ip, r5
 8007fee:	3a15      	subs	r2, #21
 8007ff0:	f022 0203 	bic.w	r2, r2, #3
 8007ff4:	3204      	adds	r2, #4
 8007ff6:	f105 0115 	add.w	r1, r5, #21
 8007ffa:	458c      	cmp	ip, r1
 8007ffc:	bf38      	it	cc
 8007ffe:	2204      	movcc	r2, #4
 8008000:	9201      	str	r2, [sp, #4]
 8008002:	9a02      	ldr	r2, [sp, #8]
 8008004:	9303      	str	r3, [sp, #12]
 8008006:	429a      	cmp	r2, r3
 8008008:	d808      	bhi.n	800801c <__multiply+0x98>
 800800a:	2f00      	cmp	r7, #0
 800800c:	dc55      	bgt.n	80080ba <__multiply+0x136>
 800800e:	6107      	str	r7, [r0, #16]
 8008010:	b005      	add	sp, #20
 8008012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008016:	f843 2b04 	str.w	r2, [r3], #4
 800801a:	e7db      	b.n	8007fd4 <__multiply+0x50>
 800801c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008020:	f1ba 0f00 	cmp.w	sl, #0
 8008024:	d020      	beq.n	8008068 <__multiply+0xe4>
 8008026:	f105 0e14 	add.w	lr, r5, #20
 800802a:	46b1      	mov	r9, r6
 800802c:	2200      	movs	r2, #0
 800802e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008032:	f8d9 b000 	ldr.w	fp, [r9]
 8008036:	b2a1      	uxth	r1, r4
 8008038:	fa1f fb8b 	uxth.w	fp, fp
 800803c:	fb0a b101 	mla	r1, sl, r1, fp
 8008040:	4411      	add	r1, r2
 8008042:	f8d9 2000 	ldr.w	r2, [r9]
 8008046:	0c24      	lsrs	r4, r4, #16
 8008048:	0c12      	lsrs	r2, r2, #16
 800804a:	fb0a 2404 	mla	r4, sl, r4, r2
 800804e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008052:	b289      	uxth	r1, r1
 8008054:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008058:	45f4      	cmp	ip, lr
 800805a:	f849 1b04 	str.w	r1, [r9], #4
 800805e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008062:	d8e4      	bhi.n	800802e <__multiply+0xaa>
 8008064:	9901      	ldr	r1, [sp, #4]
 8008066:	5072      	str	r2, [r6, r1]
 8008068:	9a03      	ldr	r2, [sp, #12]
 800806a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800806e:	3304      	adds	r3, #4
 8008070:	f1b9 0f00 	cmp.w	r9, #0
 8008074:	d01f      	beq.n	80080b6 <__multiply+0x132>
 8008076:	6834      	ldr	r4, [r6, #0]
 8008078:	f105 0114 	add.w	r1, r5, #20
 800807c:	46b6      	mov	lr, r6
 800807e:	f04f 0a00 	mov.w	sl, #0
 8008082:	880a      	ldrh	r2, [r1, #0]
 8008084:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008088:	fb09 b202 	mla	r2, r9, r2, fp
 800808c:	4492      	add	sl, r2
 800808e:	b2a4      	uxth	r4, r4
 8008090:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008094:	f84e 4b04 	str.w	r4, [lr], #4
 8008098:	f851 4b04 	ldr.w	r4, [r1], #4
 800809c:	f8be 2000 	ldrh.w	r2, [lr]
 80080a0:	0c24      	lsrs	r4, r4, #16
 80080a2:	fb09 2404 	mla	r4, r9, r4, r2
 80080a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80080aa:	458c      	cmp	ip, r1
 80080ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80080b0:	d8e7      	bhi.n	8008082 <__multiply+0xfe>
 80080b2:	9a01      	ldr	r2, [sp, #4]
 80080b4:	50b4      	str	r4, [r6, r2]
 80080b6:	3604      	adds	r6, #4
 80080b8:	e7a3      	b.n	8008002 <__multiply+0x7e>
 80080ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1a5      	bne.n	800800e <__multiply+0x8a>
 80080c2:	3f01      	subs	r7, #1
 80080c4:	e7a1      	b.n	800800a <__multiply+0x86>
 80080c6:	bf00      	nop
 80080c8:	08009263 	.word	0x08009263
 80080cc:	08009274 	.word	0x08009274

080080d0 <__pow5mult>:
 80080d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d4:	4615      	mov	r5, r2
 80080d6:	f012 0203 	ands.w	r2, r2, #3
 80080da:	4606      	mov	r6, r0
 80080dc:	460f      	mov	r7, r1
 80080de:	d007      	beq.n	80080f0 <__pow5mult+0x20>
 80080e0:	4c25      	ldr	r4, [pc, #148]	; (8008178 <__pow5mult+0xa8>)
 80080e2:	3a01      	subs	r2, #1
 80080e4:	2300      	movs	r3, #0
 80080e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080ea:	f7ff fe9b 	bl	8007e24 <__multadd>
 80080ee:	4607      	mov	r7, r0
 80080f0:	10ad      	asrs	r5, r5, #2
 80080f2:	d03d      	beq.n	8008170 <__pow5mult+0xa0>
 80080f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80080f6:	b97c      	cbnz	r4, 8008118 <__pow5mult+0x48>
 80080f8:	2010      	movs	r0, #16
 80080fa:	f7ff fe29 	bl	8007d50 <malloc>
 80080fe:	4602      	mov	r2, r0
 8008100:	6270      	str	r0, [r6, #36]	; 0x24
 8008102:	b928      	cbnz	r0, 8008110 <__pow5mult+0x40>
 8008104:	4b1d      	ldr	r3, [pc, #116]	; (800817c <__pow5mult+0xac>)
 8008106:	481e      	ldr	r0, [pc, #120]	; (8008180 <__pow5mult+0xb0>)
 8008108:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800810c:	f000 fa70 	bl	80085f0 <__assert_func>
 8008110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008114:	6004      	str	r4, [r0, #0]
 8008116:	60c4      	str	r4, [r0, #12]
 8008118:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800811c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008120:	b94c      	cbnz	r4, 8008136 <__pow5mult+0x66>
 8008122:	f240 2171 	movw	r1, #625	; 0x271
 8008126:	4630      	mov	r0, r6
 8008128:	f7ff ff16 	bl	8007f58 <__i2b>
 800812c:	2300      	movs	r3, #0
 800812e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008132:	4604      	mov	r4, r0
 8008134:	6003      	str	r3, [r0, #0]
 8008136:	f04f 0900 	mov.w	r9, #0
 800813a:	07eb      	lsls	r3, r5, #31
 800813c:	d50a      	bpl.n	8008154 <__pow5mult+0x84>
 800813e:	4639      	mov	r1, r7
 8008140:	4622      	mov	r2, r4
 8008142:	4630      	mov	r0, r6
 8008144:	f7ff ff1e 	bl	8007f84 <__multiply>
 8008148:	4639      	mov	r1, r7
 800814a:	4680      	mov	r8, r0
 800814c:	4630      	mov	r0, r6
 800814e:	f7ff fe47 	bl	8007de0 <_Bfree>
 8008152:	4647      	mov	r7, r8
 8008154:	106d      	asrs	r5, r5, #1
 8008156:	d00b      	beq.n	8008170 <__pow5mult+0xa0>
 8008158:	6820      	ldr	r0, [r4, #0]
 800815a:	b938      	cbnz	r0, 800816c <__pow5mult+0x9c>
 800815c:	4622      	mov	r2, r4
 800815e:	4621      	mov	r1, r4
 8008160:	4630      	mov	r0, r6
 8008162:	f7ff ff0f 	bl	8007f84 <__multiply>
 8008166:	6020      	str	r0, [r4, #0]
 8008168:	f8c0 9000 	str.w	r9, [r0]
 800816c:	4604      	mov	r4, r0
 800816e:	e7e4      	b.n	800813a <__pow5mult+0x6a>
 8008170:	4638      	mov	r0, r7
 8008172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008176:	bf00      	nop
 8008178:	080093c8 	.word	0x080093c8
 800817c:	080091ed 	.word	0x080091ed
 8008180:	08009274 	.word	0x08009274

08008184 <__lshift>:
 8008184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008188:	460c      	mov	r4, r1
 800818a:	6849      	ldr	r1, [r1, #4]
 800818c:	6923      	ldr	r3, [r4, #16]
 800818e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008192:	68a3      	ldr	r3, [r4, #8]
 8008194:	4607      	mov	r7, r0
 8008196:	4691      	mov	r9, r2
 8008198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800819c:	f108 0601 	add.w	r6, r8, #1
 80081a0:	42b3      	cmp	r3, r6
 80081a2:	db0b      	blt.n	80081bc <__lshift+0x38>
 80081a4:	4638      	mov	r0, r7
 80081a6:	f7ff fddb 	bl	8007d60 <_Balloc>
 80081aa:	4605      	mov	r5, r0
 80081ac:	b948      	cbnz	r0, 80081c2 <__lshift+0x3e>
 80081ae:	4602      	mov	r2, r0
 80081b0:	4b28      	ldr	r3, [pc, #160]	; (8008254 <__lshift+0xd0>)
 80081b2:	4829      	ldr	r0, [pc, #164]	; (8008258 <__lshift+0xd4>)
 80081b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80081b8:	f000 fa1a 	bl	80085f0 <__assert_func>
 80081bc:	3101      	adds	r1, #1
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	e7ee      	b.n	80081a0 <__lshift+0x1c>
 80081c2:	2300      	movs	r3, #0
 80081c4:	f100 0114 	add.w	r1, r0, #20
 80081c8:	f100 0210 	add.w	r2, r0, #16
 80081cc:	4618      	mov	r0, r3
 80081ce:	4553      	cmp	r3, sl
 80081d0:	db33      	blt.n	800823a <__lshift+0xb6>
 80081d2:	6920      	ldr	r0, [r4, #16]
 80081d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081d8:	f104 0314 	add.w	r3, r4, #20
 80081dc:	f019 091f 	ands.w	r9, r9, #31
 80081e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081e8:	d02b      	beq.n	8008242 <__lshift+0xbe>
 80081ea:	f1c9 0e20 	rsb	lr, r9, #32
 80081ee:	468a      	mov	sl, r1
 80081f0:	2200      	movs	r2, #0
 80081f2:	6818      	ldr	r0, [r3, #0]
 80081f4:	fa00 f009 	lsl.w	r0, r0, r9
 80081f8:	4302      	orrs	r2, r0
 80081fa:	f84a 2b04 	str.w	r2, [sl], #4
 80081fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008202:	459c      	cmp	ip, r3
 8008204:	fa22 f20e 	lsr.w	r2, r2, lr
 8008208:	d8f3      	bhi.n	80081f2 <__lshift+0x6e>
 800820a:	ebac 0304 	sub.w	r3, ip, r4
 800820e:	3b15      	subs	r3, #21
 8008210:	f023 0303 	bic.w	r3, r3, #3
 8008214:	3304      	adds	r3, #4
 8008216:	f104 0015 	add.w	r0, r4, #21
 800821a:	4584      	cmp	ip, r0
 800821c:	bf38      	it	cc
 800821e:	2304      	movcc	r3, #4
 8008220:	50ca      	str	r2, [r1, r3]
 8008222:	b10a      	cbz	r2, 8008228 <__lshift+0xa4>
 8008224:	f108 0602 	add.w	r6, r8, #2
 8008228:	3e01      	subs	r6, #1
 800822a:	4638      	mov	r0, r7
 800822c:	612e      	str	r6, [r5, #16]
 800822e:	4621      	mov	r1, r4
 8008230:	f7ff fdd6 	bl	8007de0 <_Bfree>
 8008234:	4628      	mov	r0, r5
 8008236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823a:	f842 0f04 	str.w	r0, [r2, #4]!
 800823e:	3301      	adds	r3, #1
 8008240:	e7c5      	b.n	80081ce <__lshift+0x4a>
 8008242:	3904      	subs	r1, #4
 8008244:	f853 2b04 	ldr.w	r2, [r3], #4
 8008248:	f841 2f04 	str.w	r2, [r1, #4]!
 800824c:	459c      	cmp	ip, r3
 800824e:	d8f9      	bhi.n	8008244 <__lshift+0xc0>
 8008250:	e7ea      	b.n	8008228 <__lshift+0xa4>
 8008252:	bf00      	nop
 8008254:	08009263 	.word	0x08009263
 8008258:	08009274 	.word	0x08009274

0800825c <__mcmp>:
 800825c:	b530      	push	{r4, r5, lr}
 800825e:	6902      	ldr	r2, [r0, #16]
 8008260:	690c      	ldr	r4, [r1, #16]
 8008262:	1b12      	subs	r2, r2, r4
 8008264:	d10e      	bne.n	8008284 <__mcmp+0x28>
 8008266:	f100 0314 	add.w	r3, r0, #20
 800826a:	3114      	adds	r1, #20
 800826c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008270:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008274:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008278:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800827c:	42a5      	cmp	r5, r4
 800827e:	d003      	beq.n	8008288 <__mcmp+0x2c>
 8008280:	d305      	bcc.n	800828e <__mcmp+0x32>
 8008282:	2201      	movs	r2, #1
 8008284:	4610      	mov	r0, r2
 8008286:	bd30      	pop	{r4, r5, pc}
 8008288:	4283      	cmp	r3, r0
 800828a:	d3f3      	bcc.n	8008274 <__mcmp+0x18>
 800828c:	e7fa      	b.n	8008284 <__mcmp+0x28>
 800828e:	f04f 32ff 	mov.w	r2, #4294967295
 8008292:	e7f7      	b.n	8008284 <__mcmp+0x28>

08008294 <__mdiff>:
 8008294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008298:	460c      	mov	r4, r1
 800829a:	4606      	mov	r6, r0
 800829c:	4611      	mov	r1, r2
 800829e:	4620      	mov	r0, r4
 80082a0:	4617      	mov	r7, r2
 80082a2:	f7ff ffdb 	bl	800825c <__mcmp>
 80082a6:	1e05      	subs	r5, r0, #0
 80082a8:	d110      	bne.n	80082cc <__mdiff+0x38>
 80082aa:	4629      	mov	r1, r5
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7ff fd57 	bl	8007d60 <_Balloc>
 80082b2:	b930      	cbnz	r0, 80082c2 <__mdiff+0x2e>
 80082b4:	4b39      	ldr	r3, [pc, #228]	; (800839c <__mdiff+0x108>)
 80082b6:	4602      	mov	r2, r0
 80082b8:	f240 2132 	movw	r1, #562	; 0x232
 80082bc:	4838      	ldr	r0, [pc, #224]	; (80083a0 <__mdiff+0x10c>)
 80082be:	f000 f997 	bl	80085f0 <__assert_func>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	bfa4      	itt	ge
 80082ce:	463b      	movge	r3, r7
 80082d0:	4627      	movge	r7, r4
 80082d2:	4630      	mov	r0, r6
 80082d4:	6879      	ldr	r1, [r7, #4]
 80082d6:	bfa6      	itte	ge
 80082d8:	461c      	movge	r4, r3
 80082da:	2500      	movge	r5, #0
 80082dc:	2501      	movlt	r5, #1
 80082de:	f7ff fd3f 	bl	8007d60 <_Balloc>
 80082e2:	b920      	cbnz	r0, 80082ee <__mdiff+0x5a>
 80082e4:	4b2d      	ldr	r3, [pc, #180]	; (800839c <__mdiff+0x108>)
 80082e6:	4602      	mov	r2, r0
 80082e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80082ec:	e7e6      	b.n	80082bc <__mdiff+0x28>
 80082ee:	693e      	ldr	r6, [r7, #16]
 80082f0:	60c5      	str	r5, [r0, #12]
 80082f2:	6925      	ldr	r5, [r4, #16]
 80082f4:	f107 0114 	add.w	r1, r7, #20
 80082f8:	f104 0914 	add.w	r9, r4, #20
 80082fc:	f100 0e14 	add.w	lr, r0, #20
 8008300:	f107 0210 	add.w	r2, r7, #16
 8008304:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008308:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800830c:	46f2      	mov	sl, lr
 800830e:	2700      	movs	r7, #0
 8008310:	f859 3b04 	ldr.w	r3, [r9], #4
 8008314:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008318:	fa1f f883 	uxth.w	r8, r3
 800831c:	fa17 f78b 	uxtah	r7, r7, fp
 8008320:	0c1b      	lsrs	r3, r3, #16
 8008322:	eba7 0808 	sub.w	r8, r7, r8
 8008326:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800832a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800832e:	fa1f f888 	uxth.w	r8, r8
 8008332:	141f      	asrs	r7, r3, #16
 8008334:	454d      	cmp	r5, r9
 8008336:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800833a:	f84a 3b04 	str.w	r3, [sl], #4
 800833e:	d8e7      	bhi.n	8008310 <__mdiff+0x7c>
 8008340:	1b2b      	subs	r3, r5, r4
 8008342:	3b15      	subs	r3, #21
 8008344:	f023 0303 	bic.w	r3, r3, #3
 8008348:	3304      	adds	r3, #4
 800834a:	3415      	adds	r4, #21
 800834c:	42a5      	cmp	r5, r4
 800834e:	bf38      	it	cc
 8008350:	2304      	movcc	r3, #4
 8008352:	4419      	add	r1, r3
 8008354:	4473      	add	r3, lr
 8008356:	469e      	mov	lr, r3
 8008358:	460d      	mov	r5, r1
 800835a:	4565      	cmp	r5, ip
 800835c:	d30e      	bcc.n	800837c <__mdiff+0xe8>
 800835e:	f10c 0203 	add.w	r2, ip, #3
 8008362:	1a52      	subs	r2, r2, r1
 8008364:	f022 0203 	bic.w	r2, r2, #3
 8008368:	3903      	subs	r1, #3
 800836a:	458c      	cmp	ip, r1
 800836c:	bf38      	it	cc
 800836e:	2200      	movcc	r2, #0
 8008370:	441a      	add	r2, r3
 8008372:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008376:	b17b      	cbz	r3, 8008398 <__mdiff+0x104>
 8008378:	6106      	str	r6, [r0, #16]
 800837a:	e7a5      	b.n	80082c8 <__mdiff+0x34>
 800837c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008380:	fa17 f488 	uxtah	r4, r7, r8
 8008384:	1422      	asrs	r2, r4, #16
 8008386:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800838a:	b2a4      	uxth	r4, r4
 800838c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008390:	f84e 4b04 	str.w	r4, [lr], #4
 8008394:	1417      	asrs	r7, r2, #16
 8008396:	e7e0      	b.n	800835a <__mdiff+0xc6>
 8008398:	3e01      	subs	r6, #1
 800839a:	e7ea      	b.n	8008372 <__mdiff+0xde>
 800839c:	08009263 	.word	0x08009263
 80083a0:	08009274 	.word	0x08009274

080083a4 <__d2b>:
 80083a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083a8:	4689      	mov	r9, r1
 80083aa:	2101      	movs	r1, #1
 80083ac:	ec57 6b10 	vmov	r6, r7, d0
 80083b0:	4690      	mov	r8, r2
 80083b2:	f7ff fcd5 	bl	8007d60 <_Balloc>
 80083b6:	4604      	mov	r4, r0
 80083b8:	b930      	cbnz	r0, 80083c8 <__d2b+0x24>
 80083ba:	4602      	mov	r2, r0
 80083bc:	4b25      	ldr	r3, [pc, #148]	; (8008454 <__d2b+0xb0>)
 80083be:	4826      	ldr	r0, [pc, #152]	; (8008458 <__d2b+0xb4>)
 80083c0:	f240 310a 	movw	r1, #778	; 0x30a
 80083c4:	f000 f914 	bl	80085f0 <__assert_func>
 80083c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083d0:	bb35      	cbnz	r5, 8008420 <__d2b+0x7c>
 80083d2:	2e00      	cmp	r6, #0
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	d028      	beq.n	800842a <__d2b+0x86>
 80083d8:	4668      	mov	r0, sp
 80083da:	9600      	str	r6, [sp, #0]
 80083dc:	f7ff fd8c 	bl	8007ef8 <__lo0bits>
 80083e0:	9900      	ldr	r1, [sp, #0]
 80083e2:	b300      	cbz	r0, 8008426 <__d2b+0x82>
 80083e4:	9a01      	ldr	r2, [sp, #4]
 80083e6:	f1c0 0320 	rsb	r3, r0, #32
 80083ea:	fa02 f303 	lsl.w	r3, r2, r3
 80083ee:	430b      	orrs	r3, r1
 80083f0:	40c2      	lsrs	r2, r0
 80083f2:	6163      	str	r3, [r4, #20]
 80083f4:	9201      	str	r2, [sp, #4]
 80083f6:	9b01      	ldr	r3, [sp, #4]
 80083f8:	61a3      	str	r3, [r4, #24]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bf14      	ite	ne
 80083fe:	2202      	movne	r2, #2
 8008400:	2201      	moveq	r2, #1
 8008402:	6122      	str	r2, [r4, #16]
 8008404:	b1d5      	cbz	r5, 800843c <__d2b+0x98>
 8008406:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800840a:	4405      	add	r5, r0
 800840c:	f8c9 5000 	str.w	r5, [r9]
 8008410:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008414:	f8c8 0000 	str.w	r0, [r8]
 8008418:	4620      	mov	r0, r4
 800841a:	b003      	add	sp, #12
 800841c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008424:	e7d5      	b.n	80083d2 <__d2b+0x2e>
 8008426:	6161      	str	r1, [r4, #20]
 8008428:	e7e5      	b.n	80083f6 <__d2b+0x52>
 800842a:	a801      	add	r0, sp, #4
 800842c:	f7ff fd64 	bl	8007ef8 <__lo0bits>
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	6163      	str	r3, [r4, #20]
 8008434:	2201      	movs	r2, #1
 8008436:	6122      	str	r2, [r4, #16]
 8008438:	3020      	adds	r0, #32
 800843a:	e7e3      	b.n	8008404 <__d2b+0x60>
 800843c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008440:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008444:	f8c9 0000 	str.w	r0, [r9]
 8008448:	6918      	ldr	r0, [r3, #16]
 800844a:	f7ff fd35 	bl	8007eb8 <__hi0bits>
 800844e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008452:	e7df      	b.n	8008414 <__d2b+0x70>
 8008454:	08009263 	.word	0x08009263
 8008458:	08009274 	.word	0x08009274

0800845c <_calloc_r>:
 800845c:	b513      	push	{r0, r1, r4, lr}
 800845e:	434a      	muls	r2, r1
 8008460:	4611      	mov	r1, r2
 8008462:	9201      	str	r2, [sp, #4]
 8008464:	f000 f85a 	bl	800851c <_malloc_r>
 8008468:	4604      	mov	r4, r0
 800846a:	b118      	cbz	r0, 8008474 <_calloc_r+0x18>
 800846c:	9a01      	ldr	r2, [sp, #4]
 800846e:	2100      	movs	r1, #0
 8008470:	f7fe f980 	bl	8006774 <memset>
 8008474:	4620      	mov	r0, r4
 8008476:	b002      	add	sp, #8
 8008478:	bd10      	pop	{r4, pc}
	...

0800847c <_free_r>:
 800847c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800847e:	2900      	cmp	r1, #0
 8008480:	d048      	beq.n	8008514 <_free_r+0x98>
 8008482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008486:	9001      	str	r0, [sp, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	f1a1 0404 	sub.w	r4, r1, #4
 800848e:	bfb8      	it	lt
 8008490:	18e4      	addlt	r4, r4, r3
 8008492:	f000 f8ef 	bl	8008674 <__malloc_lock>
 8008496:	4a20      	ldr	r2, [pc, #128]	; (8008518 <_free_r+0x9c>)
 8008498:	9801      	ldr	r0, [sp, #4]
 800849a:	6813      	ldr	r3, [r2, #0]
 800849c:	4615      	mov	r5, r2
 800849e:	b933      	cbnz	r3, 80084ae <_free_r+0x32>
 80084a0:	6063      	str	r3, [r4, #4]
 80084a2:	6014      	str	r4, [r2, #0]
 80084a4:	b003      	add	sp, #12
 80084a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084aa:	f000 b8e9 	b.w	8008680 <__malloc_unlock>
 80084ae:	42a3      	cmp	r3, r4
 80084b0:	d90b      	bls.n	80084ca <_free_r+0x4e>
 80084b2:	6821      	ldr	r1, [r4, #0]
 80084b4:	1862      	adds	r2, r4, r1
 80084b6:	4293      	cmp	r3, r2
 80084b8:	bf04      	itt	eq
 80084ba:	681a      	ldreq	r2, [r3, #0]
 80084bc:	685b      	ldreq	r3, [r3, #4]
 80084be:	6063      	str	r3, [r4, #4]
 80084c0:	bf04      	itt	eq
 80084c2:	1852      	addeq	r2, r2, r1
 80084c4:	6022      	streq	r2, [r4, #0]
 80084c6:	602c      	str	r4, [r5, #0]
 80084c8:	e7ec      	b.n	80084a4 <_free_r+0x28>
 80084ca:	461a      	mov	r2, r3
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	b10b      	cbz	r3, 80084d4 <_free_r+0x58>
 80084d0:	42a3      	cmp	r3, r4
 80084d2:	d9fa      	bls.n	80084ca <_free_r+0x4e>
 80084d4:	6811      	ldr	r1, [r2, #0]
 80084d6:	1855      	adds	r5, r2, r1
 80084d8:	42a5      	cmp	r5, r4
 80084da:	d10b      	bne.n	80084f4 <_free_r+0x78>
 80084dc:	6824      	ldr	r4, [r4, #0]
 80084de:	4421      	add	r1, r4
 80084e0:	1854      	adds	r4, r2, r1
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	6011      	str	r1, [r2, #0]
 80084e6:	d1dd      	bne.n	80084a4 <_free_r+0x28>
 80084e8:	681c      	ldr	r4, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	6053      	str	r3, [r2, #4]
 80084ee:	4421      	add	r1, r4
 80084f0:	6011      	str	r1, [r2, #0]
 80084f2:	e7d7      	b.n	80084a4 <_free_r+0x28>
 80084f4:	d902      	bls.n	80084fc <_free_r+0x80>
 80084f6:	230c      	movs	r3, #12
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	e7d3      	b.n	80084a4 <_free_r+0x28>
 80084fc:	6825      	ldr	r5, [r4, #0]
 80084fe:	1961      	adds	r1, r4, r5
 8008500:	428b      	cmp	r3, r1
 8008502:	bf04      	itt	eq
 8008504:	6819      	ldreq	r1, [r3, #0]
 8008506:	685b      	ldreq	r3, [r3, #4]
 8008508:	6063      	str	r3, [r4, #4]
 800850a:	bf04      	itt	eq
 800850c:	1949      	addeq	r1, r1, r5
 800850e:	6021      	streq	r1, [r4, #0]
 8008510:	6054      	str	r4, [r2, #4]
 8008512:	e7c7      	b.n	80084a4 <_free_r+0x28>
 8008514:	b003      	add	sp, #12
 8008516:	bd30      	pop	{r4, r5, pc}
 8008518:	20000668 	.word	0x20000668

0800851c <_malloc_r>:
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	1ccd      	adds	r5, r1, #3
 8008520:	f025 0503 	bic.w	r5, r5, #3
 8008524:	3508      	adds	r5, #8
 8008526:	2d0c      	cmp	r5, #12
 8008528:	bf38      	it	cc
 800852a:	250c      	movcc	r5, #12
 800852c:	2d00      	cmp	r5, #0
 800852e:	4606      	mov	r6, r0
 8008530:	db01      	blt.n	8008536 <_malloc_r+0x1a>
 8008532:	42a9      	cmp	r1, r5
 8008534:	d903      	bls.n	800853e <_malloc_r+0x22>
 8008536:	230c      	movs	r3, #12
 8008538:	6033      	str	r3, [r6, #0]
 800853a:	2000      	movs	r0, #0
 800853c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800853e:	f000 f899 	bl	8008674 <__malloc_lock>
 8008542:	4921      	ldr	r1, [pc, #132]	; (80085c8 <_malloc_r+0xac>)
 8008544:	680a      	ldr	r2, [r1, #0]
 8008546:	4614      	mov	r4, r2
 8008548:	b99c      	cbnz	r4, 8008572 <_malloc_r+0x56>
 800854a:	4f20      	ldr	r7, [pc, #128]	; (80085cc <_malloc_r+0xb0>)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	b923      	cbnz	r3, 800855a <_malloc_r+0x3e>
 8008550:	4621      	mov	r1, r4
 8008552:	4630      	mov	r0, r6
 8008554:	f000 f83c 	bl	80085d0 <_sbrk_r>
 8008558:	6038      	str	r0, [r7, #0]
 800855a:	4629      	mov	r1, r5
 800855c:	4630      	mov	r0, r6
 800855e:	f000 f837 	bl	80085d0 <_sbrk_r>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	d123      	bne.n	80085ae <_malloc_r+0x92>
 8008566:	230c      	movs	r3, #12
 8008568:	6033      	str	r3, [r6, #0]
 800856a:	4630      	mov	r0, r6
 800856c:	f000 f888 	bl	8008680 <__malloc_unlock>
 8008570:	e7e3      	b.n	800853a <_malloc_r+0x1e>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	1b5b      	subs	r3, r3, r5
 8008576:	d417      	bmi.n	80085a8 <_malloc_r+0x8c>
 8008578:	2b0b      	cmp	r3, #11
 800857a:	d903      	bls.n	8008584 <_malloc_r+0x68>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	441c      	add	r4, r3
 8008580:	6025      	str	r5, [r4, #0]
 8008582:	e004      	b.n	800858e <_malloc_r+0x72>
 8008584:	6863      	ldr	r3, [r4, #4]
 8008586:	42a2      	cmp	r2, r4
 8008588:	bf0c      	ite	eq
 800858a:	600b      	streq	r3, [r1, #0]
 800858c:	6053      	strne	r3, [r2, #4]
 800858e:	4630      	mov	r0, r6
 8008590:	f000 f876 	bl	8008680 <__malloc_unlock>
 8008594:	f104 000b 	add.w	r0, r4, #11
 8008598:	1d23      	adds	r3, r4, #4
 800859a:	f020 0007 	bic.w	r0, r0, #7
 800859e:	1ac2      	subs	r2, r0, r3
 80085a0:	d0cc      	beq.n	800853c <_malloc_r+0x20>
 80085a2:	1a1b      	subs	r3, r3, r0
 80085a4:	50a3      	str	r3, [r4, r2]
 80085a6:	e7c9      	b.n	800853c <_malloc_r+0x20>
 80085a8:	4622      	mov	r2, r4
 80085aa:	6864      	ldr	r4, [r4, #4]
 80085ac:	e7cc      	b.n	8008548 <_malloc_r+0x2c>
 80085ae:	1cc4      	adds	r4, r0, #3
 80085b0:	f024 0403 	bic.w	r4, r4, #3
 80085b4:	42a0      	cmp	r0, r4
 80085b6:	d0e3      	beq.n	8008580 <_malloc_r+0x64>
 80085b8:	1a21      	subs	r1, r4, r0
 80085ba:	4630      	mov	r0, r6
 80085bc:	f000 f808 	bl	80085d0 <_sbrk_r>
 80085c0:	3001      	adds	r0, #1
 80085c2:	d1dd      	bne.n	8008580 <_malloc_r+0x64>
 80085c4:	e7cf      	b.n	8008566 <_malloc_r+0x4a>
 80085c6:	bf00      	nop
 80085c8:	20000668 	.word	0x20000668
 80085cc:	2000066c 	.word	0x2000066c

080085d0 <_sbrk_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d06      	ldr	r5, [pc, #24]	; (80085ec <_sbrk_r+0x1c>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	f7f9 fa04 	bl	80019e8 <_sbrk>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_sbrk_r+0x1a>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_sbrk_r+0x1a>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	2000f04c 	.word	0x2000f04c

080085f0 <__assert_func>:
 80085f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085f2:	4614      	mov	r4, r2
 80085f4:	461a      	mov	r2, r3
 80085f6:	4b09      	ldr	r3, [pc, #36]	; (800861c <__assert_func+0x2c>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4605      	mov	r5, r0
 80085fc:	68d8      	ldr	r0, [r3, #12]
 80085fe:	b14c      	cbz	r4, 8008614 <__assert_func+0x24>
 8008600:	4b07      	ldr	r3, [pc, #28]	; (8008620 <__assert_func+0x30>)
 8008602:	9100      	str	r1, [sp, #0]
 8008604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008608:	4906      	ldr	r1, [pc, #24]	; (8008624 <__assert_func+0x34>)
 800860a:	462b      	mov	r3, r5
 800860c:	f000 f80e 	bl	800862c <fiprintf>
 8008610:	f000 fa64 	bl	8008adc <abort>
 8008614:	4b04      	ldr	r3, [pc, #16]	; (8008628 <__assert_func+0x38>)
 8008616:	461c      	mov	r4, r3
 8008618:	e7f3      	b.n	8008602 <__assert_func+0x12>
 800861a:	bf00      	nop
 800861c:	20000070 	.word	0x20000070
 8008620:	080093d4 	.word	0x080093d4
 8008624:	080093e1 	.word	0x080093e1
 8008628:	0800940f 	.word	0x0800940f

0800862c <fiprintf>:
 800862c:	b40e      	push	{r1, r2, r3}
 800862e:	b503      	push	{r0, r1, lr}
 8008630:	4601      	mov	r1, r0
 8008632:	ab03      	add	r3, sp, #12
 8008634:	4805      	ldr	r0, [pc, #20]	; (800864c <fiprintf+0x20>)
 8008636:	f853 2b04 	ldr.w	r2, [r3], #4
 800863a:	6800      	ldr	r0, [r0, #0]
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	f000 f84f 	bl	80086e0 <_vfiprintf_r>
 8008642:	b002      	add	sp, #8
 8008644:	f85d eb04 	ldr.w	lr, [sp], #4
 8008648:	b003      	add	sp, #12
 800864a:	4770      	bx	lr
 800864c:	20000070 	.word	0x20000070

08008650 <__ascii_mbtowc>:
 8008650:	b082      	sub	sp, #8
 8008652:	b901      	cbnz	r1, 8008656 <__ascii_mbtowc+0x6>
 8008654:	a901      	add	r1, sp, #4
 8008656:	b142      	cbz	r2, 800866a <__ascii_mbtowc+0x1a>
 8008658:	b14b      	cbz	r3, 800866e <__ascii_mbtowc+0x1e>
 800865a:	7813      	ldrb	r3, [r2, #0]
 800865c:	600b      	str	r3, [r1, #0]
 800865e:	7812      	ldrb	r2, [r2, #0]
 8008660:	1e10      	subs	r0, r2, #0
 8008662:	bf18      	it	ne
 8008664:	2001      	movne	r0, #1
 8008666:	b002      	add	sp, #8
 8008668:	4770      	bx	lr
 800866a:	4610      	mov	r0, r2
 800866c:	e7fb      	b.n	8008666 <__ascii_mbtowc+0x16>
 800866e:	f06f 0001 	mvn.w	r0, #1
 8008672:	e7f8      	b.n	8008666 <__ascii_mbtowc+0x16>

08008674 <__malloc_lock>:
 8008674:	4801      	ldr	r0, [pc, #4]	; (800867c <__malloc_lock+0x8>)
 8008676:	f000 bbf1 	b.w	8008e5c <__retarget_lock_acquire_recursive>
 800867a:	bf00      	nop
 800867c:	2000f054 	.word	0x2000f054

08008680 <__malloc_unlock>:
 8008680:	4801      	ldr	r0, [pc, #4]	; (8008688 <__malloc_unlock+0x8>)
 8008682:	f000 bbec 	b.w	8008e5e <__retarget_lock_release_recursive>
 8008686:	bf00      	nop
 8008688:	2000f054 	.word	0x2000f054

0800868c <__sfputc_r>:
 800868c:	6893      	ldr	r3, [r2, #8]
 800868e:	3b01      	subs	r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	b410      	push	{r4}
 8008694:	6093      	str	r3, [r2, #8]
 8008696:	da08      	bge.n	80086aa <__sfputc_r+0x1e>
 8008698:	6994      	ldr	r4, [r2, #24]
 800869a:	42a3      	cmp	r3, r4
 800869c:	db01      	blt.n	80086a2 <__sfputc_r+0x16>
 800869e:	290a      	cmp	r1, #10
 80086a0:	d103      	bne.n	80086aa <__sfputc_r+0x1e>
 80086a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086a6:	f000 b94b 	b.w	8008940 <__swbuf_r>
 80086aa:	6813      	ldr	r3, [r2, #0]
 80086ac:	1c58      	adds	r0, r3, #1
 80086ae:	6010      	str	r0, [r2, #0]
 80086b0:	7019      	strb	r1, [r3, #0]
 80086b2:	4608      	mov	r0, r1
 80086b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <__sfputs_r>:
 80086ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086bc:	4606      	mov	r6, r0
 80086be:	460f      	mov	r7, r1
 80086c0:	4614      	mov	r4, r2
 80086c2:	18d5      	adds	r5, r2, r3
 80086c4:	42ac      	cmp	r4, r5
 80086c6:	d101      	bne.n	80086cc <__sfputs_r+0x12>
 80086c8:	2000      	movs	r0, #0
 80086ca:	e007      	b.n	80086dc <__sfputs_r+0x22>
 80086cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d0:	463a      	mov	r2, r7
 80086d2:	4630      	mov	r0, r6
 80086d4:	f7ff ffda 	bl	800868c <__sfputc_r>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d1f3      	bne.n	80086c4 <__sfputs_r+0xa>
 80086dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086e0 <_vfiprintf_r>:
 80086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	460d      	mov	r5, r1
 80086e6:	b09d      	sub	sp, #116	; 0x74
 80086e8:	4614      	mov	r4, r2
 80086ea:	4698      	mov	r8, r3
 80086ec:	4606      	mov	r6, r0
 80086ee:	b118      	cbz	r0, 80086f8 <_vfiprintf_r+0x18>
 80086f0:	6983      	ldr	r3, [r0, #24]
 80086f2:	b90b      	cbnz	r3, 80086f8 <_vfiprintf_r+0x18>
 80086f4:	f000 fb14 	bl	8008d20 <__sinit>
 80086f8:	4b89      	ldr	r3, [pc, #548]	; (8008920 <_vfiprintf_r+0x240>)
 80086fa:	429d      	cmp	r5, r3
 80086fc:	d11b      	bne.n	8008736 <_vfiprintf_r+0x56>
 80086fe:	6875      	ldr	r5, [r6, #4]
 8008700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008702:	07d9      	lsls	r1, r3, #31
 8008704:	d405      	bmi.n	8008712 <_vfiprintf_r+0x32>
 8008706:	89ab      	ldrh	r3, [r5, #12]
 8008708:	059a      	lsls	r2, r3, #22
 800870a:	d402      	bmi.n	8008712 <_vfiprintf_r+0x32>
 800870c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800870e:	f000 fba5 	bl	8008e5c <__retarget_lock_acquire_recursive>
 8008712:	89ab      	ldrh	r3, [r5, #12]
 8008714:	071b      	lsls	r3, r3, #28
 8008716:	d501      	bpl.n	800871c <_vfiprintf_r+0x3c>
 8008718:	692b      	ldr	r3, [r5, #16]
 800871a:	b9eb      	cbnz	r3, 8008758 <_vfiprintf_r+0x78>
 800871c:	4629      	mov	r1, r5
 800871e:	4630      	mov	r0, r6
 8008720:	f000 f96e 	bl	8008a00 <__swsetup_r>
 8008724:	b1c0      	cbz	r0, 8008758 <_vfiprintf_r+0x78>
 8008726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008728:	07dc      	lsls	r4, r3, #31
 800872a:	d50e      	bpl.n	800874a <_vfiprintf_r+0x6a>
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	b01d      	add	sp, #116	; 0x74
 8008732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008736:	4b7b      	ldr	r3, [pc, #492]	; (8008924 <_vfiprintf_r+0x244>)
 8008738:	429d      	cmp	r5, r3
 800873a:	d101      	bne.n	8008740 <_vfiprintf_r+0x60>
 800873c:	68b5      	ldr	r5, [r6, #8]
 800873e:	e7df      	b.n	8008700 <_vfiprintf_r+0x20>
 8008740:	4b79      	ldr	r3, [pc, #484]	; (8008928 <_vfiprintf_r+0x248>)
 8008742:	429d      	cmp	r5, r3
 8008744:	bf08      	it	eq
 8008746:	68f5      	ldreq	r5, [r6, #12]
 8008748:	e7da      	b.n	8008700 <_vfiprintf_r+0x20>
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	0598      	lsls	r0, r3, #22
 800874e:	d4ed      	bmi.n	800872c <_vfiprintf_r+0x4c>
 8008750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008752:	f000 fb84 	bl	8008e5e <__retarget_lock_release_recursive>
 8008756:	e7e9      	b.n	800872c <_vfiprintf_r+0x4c>
 8008758:	2300      	movs	r3, #0
 800875a:	9309      	str	r3, [sp, #36]	; 0x24
 800875c:	2320      	movs	r3, #32
 800875e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008762:	f8cd 800c 	str.w	r8, [sp, #12]
 8008766:	2330      	movs	r3, #48	; 0x30
 8008768:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800892c <_vfiprintf_r+0x24c>
 800876c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008770:	f04f 0901 	mov.w	r9, #1
 8008774:	4623      	mov	r3, r4
 8008776:	469a      	mov	sl, r3
 8008778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800877c:	b10a      	cbz	r2, 8008782 <_vfiprintf_r+0xa2>
 800877e:	2a25      	cmp	r2, #37	; 0x25
 8008780:	d1f9      	bne.n	8008776 <_vfiprintf_r+0x96>
 8008782:	ebba 0b04 	subs.w	fp, sl, r4
 8008786:	d00b      	beq.n	80087a0 <_vfiprintf_r+0xc0>
 8008788:	465b      	mov	r3, fp
 800878a:	4622      	mov	r2, r4
 800878c:	4629      	mov	r1, r5
 800878e:	4630      	mov	r0, r6
 8008790:	f7ff ff93 	bl	80086ba <__sfputs_r>
 8008794:	3001      	adds	r0, #1
 8008796:	f000 80aa 	beq.w	80088ee <_vfiprintf_r+0x20e>
 800879a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800879c:	445a      	add	r2, fp
 800879e:	9209      	str	r2, [sp, #36]	; 0x24
 80087a0:	f89a 3000 	ldrb.w	r3, [sl]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f000 80a2 	beq.w	80088ee <_vfiprintf_r+0x20e>
 80087aa:	2300      	movs	r3, #0
 80087ac:	f04f 32ff 	mov.w	r2, #4294967295
 80087b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b4:	f10a 0a01 	add.w	sl, sl, #1
 80087b8:	9304      	str	r3, [sp, #16]
 80087ba:	9307      	str	r3, [sp, #28]
 80087bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087c0:	931a      	str	r3, [sp, #104]	; 0x68
 80087c2:	4654      	mov	r4, sl
 80087c4:	2205      	movs	r2, #5
 80087c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ca:	4858      	ldr	r0, [pc, #352]	; (800892c <_vfiprintf_r+0x24c>)
 80087cc:	f7f7 fd10 	bl	80001f0 <memchr>
 80087d0:	9a04      	ldr	r2, [sp, #16]
 80087d2:	b9d8      	cbnz	r0, 800880c <_vfiprintf_r+0x12c>
 80087d4:	06d1      	lsls	r1, r2, #27
 80087d6:	bf44      	itt	mi
 80087d8:	2320      	movmi	r3, #32
 80087da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087de:	0713      	lsls	r3, r2, #28
 80087e0:	bf44      	itt	mi
 80087e2:	232b      	movmi	r3, #43	; 0x2b
 80087e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087e8:	f89a 3000 	ldrb.w	r3, [sl]
 80087ec:	2b2a      	cmp	r3, #42	; 0x2a
 80087ee:	d015      	beq.n	800881c <_vfiprintf_r+0x13c>
 80087f0:	9a07      	ldr	r2, [sp, #28]
 80087f2:	4654      	mov	r4, sl
 80087f4:	2000      	movs	r0, #0
 80087f6:	f04f 0c0a 	mov.w	ip, #10
 80087fa:	4621      	mov	r1, r4
 80087fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008800:	3b30      	subs	r3, #48	; 0x30
 8008802:	2b09      	cmp	r3, #9
 8008804:	d94e      	bls.n	80088a4 <_vfiprintf_r+0x1c4>
 8008806:	b1b0      	cbz	r0, 8008836 <_vfiprintf_r+0x156>
 8008808:	9207      	str	r2, [sp, #28]
 800880a:	e014      	b.n	8008836 <_vfiprintf_r+0x156>
 800880c:	eba0 0308 	sub.w	r3, r0, r8
 8008810:	fa09 f303 	lsl.w	r3, r9, r3
 8008814:	4313      	orrs	r3, r2
 8008816:	9304      	str	r3, [sp, #16]
 8008818:	46a2      	mov	sl, r4
 800881a:	e7d2      	b.n	80087c2 <_vfiprintf_r+0xe2>
 800881c:	9b03      	ldr	r3, [sp, #12]
 800881e:	1d19      	adds	r1, r3, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	9103      	str	r1, [sp, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	bfbb      	ittet	lt
 8008828:	425b      	neglt	r3, r3
 800882a:	f042 0202 	orrlt.w	r2, r2, #2
 800882e:	9307      	strge	r3, [sp, #28]
 8008830:	9307      	strlt	r3, [sp, #28]
 8008832:	bfb8      	it	lt
 8008834:	9204      	strlt	r2, [sp, #16]
 8008836:	7823      	ldrb	r3, [r4, #0]
 8008838:	2b2e      	cmp	r3, #46	; 0x2e
 800883a:	d10c      	bne.n	8008856 <_vfiprintf_r+0x176>
 800883c:	7863      	ldrb	r3, [r4, #1]
 800883e:	2b2a      	cmp	r3, #42	; 0x2a
 8008840:	d135      	bne.n	80088ae <_vfiprintf_r+0x1ce>
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	1d1a      	adds	r2, r3, #4
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	9203      	str	r2, [sp, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	bfb8      	it	lt
 800884e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008852:	3402      	adds	r4, #2
 8008854:	9305      	str	r3, [sp, #20]
 8008856:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800893c <_vfiprintf_r+0x25c>
 800885a:	7821      	ldrb	r1, [r4, #0]
 800885c:	2203      	movs	r2, #3
 800885e:	4650      	mov	r0, sl
 8008860:	f7f7 fcc6 	bl	80001f0 <memchr>
 8008864:	b140      	cbz	r0, 8008878 <_vfiprintf_r+0x198>
 8008866:	2340      	movs	r3, #64	; 0x40
 8008868:	eba0 000a 	sub.w	r0, r0, sl
 800886c:	fa03 f000 	lsl.w	r0, r3, r0
 8008870:	9b04      	ldr	r3, [sp, #16]
 8008872:	4303      	orrs	r3, r0
 8008874:	3401      	adds	r4, #1
 8008876:	9304      	str	r3, [sp, #16]
 8008878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887c:	482c      	ldr	r0, [pc, #176]	; (8008930 <_vfiprintf_r+0x250>)
 800887e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008882:	2206      	movs	r2, #6
 8008884:	f7f7 fcb4 	bl	80001f0 <memchr>
 8008888:	2800      	cmp	r0, #0
 800888a:	d03f      	beq.n	800890c <_vfiprintf_r+0x22c>
 800888c:	4b29      	ldr	r3, [pc, #164]	; (8008934 <_vfiprintf_r+0x254>)
 800888e:	bb1b      	cbnz	r3, 80088d8 <_vfiprintf_r+0x1f8>
 8008890:	9b03      	ldr	r3, [sp, #12]
 8008892:	3307      	adds	r3, #7
 8008894:	f023 0307 	bic.w	r3, r3, #7
 8008898:	3308      	adds	r3, #8
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800889e:	443b      	add	r3, r7
 80088a0:	9309      	str	r3, [sp, #36]	; 0x24
 80088a2:	e767      	b.n	8008774 <_vfiprintf_r+0x94>
 80088a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80088a8:	460c      	mov	r4, r1
 80088aa:	2001      	movs	r0, #1
 80088ac:	e7a5      	b.n	80087fa <_vfiprintf_r+0x11a>
 80088ae:	2300      	movs	r3, #0
 80088b0:	3401      	adds	r4, #1
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	4619      	mov	r1, r3
 80088b6:	f04f 0c0a 	mov.w	ip, #10
 80088ba:	4620      	mov	r0, r4
 80088bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088c0:	3a30      	subs	r2, #48	; 0x30
 80088c2:	2a09      	cmp	r2, #9
 80088c4:	d903      	bls.n	80088ce <_vfiprintf_r+0x1ee>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0c5      	beq.n	8008856 <_vfiprintf_r+0x176>
 80088ca:	9105      	str	r1, [sp, #20]
 80088cc:	e7c3      	b.n	8008856 <_vfiprintf_r+0x176>
 80088ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80088d2:	4604      	mov	r4, r0
 80088d4:	2301      	movs	r3, #1
 80088d6:	e7f0      	b.n	80088ba <_vfiprintf_r+0x1da>
 80088d8:	ab03      	add	r3, sp, #12
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	462a      	mov	r2, r5
 80088de:	4b16      	ldr	r3, [pc, #88]	; (8008938 <_vfiprintf_r+0x258>)
 80088e0:	a904      	add	r1, sp, #16
 80088e2:	4630      	mov	r0, r6
 80088e4:	f7fd ffee 	bl	80068c4 <_printf_float>
 80088e8:	4607      	mov	r7, r0
 80088ea:	1c78      	adds	r0, r7, #1
 80088ec:	d1d6      	bne.n	800889c <_vfiprintf_r+0x1bc>
 80088ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088f0:	07d9      	lsls	r1, r3, #31
 80088f2:	d405      	bmi.n	8008900 <_vfiprintf_r+0x220>
 80088f4:	89ab      	ldrh	r3, [r5, #12]
 80088f6:	059a      	lsls	r2, r3, #22
 80088f8:	d402      	bmi.n	8008900 <_vfiprintf_r+0x220>
 80088fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088fc:	f000 faaf 	bl	8008e5e <__retarget_lock_release_recursive>
 8008900:	89ab      	ldrh	r3, [r5, #12]
 8008902:	065b      	lsls	r3, r3, #25
 8008904:	f53f af12 	bmi.w	800872c <_vfiprintf_r+0x4c>
 8008908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800890a:	e711      	b.n	8008730 <_vfiprintf_r+0x50>
 800890c:	ab03      	add	r3, sp, #12
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	462a      	mov	r2, r5
 8008912:	4b09      	ldr	r3, [pc, #36]	; (8008938 <_vfiprintf_r+0x258>)
 8008914:	a904      	add	r1, sp, #16
 8008916:	4630      	mov	r0, r6
 8008918:	f7fe fa78 	bl	8006e0c <_printf_i>
 800891c:	e7e4      	b.n	80088e8 <_vfiprintf_r+0x208>
 800891e:	bf00      	nop
 8008920:	0800954c 	.word	0x0800954c
 8008924:	0800956c 	.word	0x0800956c
 8008928:	0800952c 	.word	0x0800952c
 800892c:	0800941a 	.word	0x0800941a
 8008930:	08009424 	.word	0x08009424
 8008934:	080068c5 	.word	0x080068c5
 8008938:	080086bb 	.word	0x080086bb
 800893c:	08009420 	.word	0x08009420

08008940 <__swbuf_r>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	460e      	mov	r6, r1
 8008944:	4614      	mov	r4, r2
 8008946:	4605      	mov	r5, r0
 8008948:	b118      	cbz	r0, 8008952 <__swbuf_r+0x12>
 800894a:	6983      	ldr	r3, [r0, #24]
 800894c:	b90b      	cbnz	r3, 8008952 <__swbuf_r+0x12>
 800894e:	f000 f9e7 	bl	8008d20 <__sinit>
 8008952:	4b21      	ldr	r3, [pc, #132]	; (80089d8 <__swbuf_r+0x98>)
 8008954:	429c      	cmp	r4, r3
 8008956:	d12b      	bne.n	80089b0 <__swbuf_r+0x70>
 8008958:	686c      	ldr	r4, [r5, #4]
 800895a:	69a3      	ldr	r3, [r4, #24]
 800895c:	60a3      	str	r3, [r4, #8]
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	071a      	lsls	r2, r3, #28
 8008962:	d52f      	bpl.n	80089c4 <__swbuf_r+0x84>
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	b36b      	cbz	r3, 80089c4 <__swbuf_r+0x84>
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	6820      	ldr	r0, [r4, #0]
 800896c:	1ac0      	subs	r0, r0, r3
 800896e:	6963      	ldr	r3, [r4, #20]
 8008970:	b2f6      	uxtb	r6, r6
 8008972:	4283      	cmp	r3, r0
 8008974:	4637      	mov	r7, r6
 8008976:	dc04      	bgt.n	8008982 <__swbuf_r+0x42>
 8008978:	4621      	mov	r1, r4
 800897a:	4628      	mov	r0, r5
 800897c:	f000 f93c 	bl	8008bf8 <_fflush_r>
 8008980:	bb30      	cbnz	r0, 80089d0 <__swbuf_r+0x90>
 8008982:	68a3      	ldr	r3, [r4, #8]
 8008984:	3b01      	subs	r3, #1
 8008986:	60a3      	str	r3, [r4, #8]
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	6022      	str	r2, [r4, #0]
 800898e:	701e      	strb	r6, [r3, #0]
 8008990:	6963      	ldr	r3, [r4, #20]
 8008992:	3001      	adds	r0, #1
 8008994:	4283      	cmp	r3, r0
 8008996:	d004      	beq.n	80089a2 <__swbuf_r+0x62>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	07db      	lsls	r3, r3, #31
 800899c:	d506      	bpl.n	80089ac <__swbuf_r+0x6c>
 800899e:	2e0a      	cmp	r6, #10
 80089a0:	d104      	bne.n	80089ac <__swbuf_r+0x6c>
 80089a2:	4621      	mov	r1, r4
 80089a4:	4628      	mov	r0, r5
 80089a6:	f000 f927 	bl	8008bf8 <_fflush_r>
 80089aa:	b988      	cbnz	r0, 80089d0 <__swbuf_r+0x90>
 80089ac:	4638      	mov	r0, r7
 80089ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b0:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <__swbuf_r+0x9c>)
 80089b2:	429c      	cmp	r4, r3
 80089b4:	d101      	bne.n	80089ba <__swbuf_r+0x7a>
 80089b6:	68ac      	ldr	r4, [r5, #8]
 80089b8:	e7cf      	b.n	800895a <__swbuf_r+0x1a>
 80089ba:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <__swbuf_r+0xa0>)
 80089bc:	429c      	cmp	r4, r3
 80089be:	bf08      	it	eq
 80089c0:	68ec      	ldreq	r4, [r5, #12]
 80089c2:	e7ca      	b.n	800895a <__swbuf_r+0x1a>
 80089c4:	4621      	mov	r1, r4
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 f81a 	bl	8008a00 <__swsetup_r>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d0cb      	beq.n	8008968 <__swbuf_r+0x28>
 80089d0:	f04f 37ff 	mov.w	r7, #4294967295
 80089d4:	e7ea      	b.n	80089ac <__swbuf_r+0x6c>
 80089d6:	bf00      	nop
 80089d8:	0800954c 	.word	0x0800954c
 80089dc:	0800956c 	.word	0x0800956c
 80089e0:	0800952c 	.word	0x0800952c

080089e4 <__ascii_wctomb>:
 80089e4:	b149      	cbz	r1, 80089fa <__ascii_wctomb+0x16>
 80089e6:	2aff      	cmp	r2, #255	; 0xff
 80089e8:	bf85      	ittet	hi
 80089ea:	238a      	movhi	r3, #138	; 0x8a
 80089ec:	6003      	strhi	r3, [r0, #0]
 80089ee:	700a      	strbls	r2, [r1, #0]
 80089f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80089f4:	bf98      	it	ls
 80089f6:	2001      	movls	r0, #1
 80089f8:	4770      	bx	lr
 80089fa:	4608      	mov	r0, r1
 80089fc:	4770      	bx	lr
	...

08008a00 <__swsetup_r>:
 8008a00:	4b32      	ldr	r3, [pc, #200]	; (8008acc <__swsetup_r+0xcc>)
 8008a02:	b570      	push	{r4, r5, r6, lr}
 8008a04:	681d      	ldr	r5, [r3, #0]
 8008a06:	4606      	mov	r6, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	b125      	cbz	r5, 8008a16 <__swsetup_r+0x16>
 8008a0c:	69ab      	ldr	r3, [r5, #24]
 8008a0e:	b913      	cbnz	r3, 8008a16 <__swsetup_r+0x16>
 8008a10:	4628      	mov	r0, r5
 8008a12:	f000 f985 	bl	8008d20 <__sinit>
 8008a16:	4b2e      	ldr	r3, [pc, #184]	; (8008ad0 <__swsetup_r+0xd0>)
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	d10f      	bne.n	8008a3c <__swsetup_r+0x3c>
 8008a1c:	686c      	ldr	r4, [r5, #4]
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a24:	0719      	lsls	r1, r3, #28
 8008a26:	d42c      	bmi.n	8008a82 <__swsetup_r+0x82>
 8008a28:	06dd      	lsls	r5, r3, #27
 8008a2a:	d411      	bmi.n	8008a50 <__swsetup_r+0x50>
 8008a2c:	2309      	movs	r3, #9
 8008a2e:	6033      	str	r3, [r6, #0]
 8008a30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3a:	e03e      	b.n	8008aba <__swsetup_r+0xba>
 8008a3c:	4b25      	ldr	r3, [pc, #148]	; (8008ad4 <__swsetup_r+0xd4>)
 8008a3e:	429c      	cmp	r4, r3
 8008a40:	d101      	bne.n	8008a46 <__swsetup_r+0x46>
 8008a42:	68ac      	ldr	r4, [r5, #8]
 8008a44:	e7eb      	b.n	8008a1e <__swsetup_r+0x1e>
 8008a46:	4b24      	ldr	r3, [pc, #144]	; (8008ad8 <__swsetup_r+0xd8>)
 8008a48:	429c      	cmp	r4, r3
 8008a4a:	bf08      	it	eq
 8008a4c:	68ec      	ldreq	r4, [r5, #12]
 8008a4e:	e7e6      	b.n	8008a1e <__swsetup_r+0x1e>
 8008a50:	0758      	lsls	r0, r3, #29
 8008a52:	d512      	bpl.n	8008a7a <__swsetup_r+0x7a>
 8008a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a56:	b141      	cbz	r1, 8008a6a <__swsetup_r+0x6a>
 8008a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a5c:	4299      	cmp	r1, r3
 8008a5e:	d002      	beq.n	8008a66 <__swsetup_r+0x66>
 8008a60:	4630      	mov	r0, r6
 8008a62:	f7ff fd0b 	bl	800847c <_free_r>
 8008a66:	2300      	movs	r3, #0
 8008a68:	6363      	str	r3, [r4, #52]	; 0x34
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a70:	81a3      	strh	r3, [r4, #12]
 8008a72:	2300      	movs	r3, #0
 8008a74:	6063      	str	r3, [r4, #4]
 8008a76:	6923      	ldr	r3, [r4, #16]
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f043 0308 	orr.w	r3, r3, #8
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	b94b      	cbnz	r3, 8008a9a <__swsetup_r+0x9a>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a90:	d003      	beq.n	8008a9a <__swsetup_r+0x9a>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4630      	mov	r0, r6
 8008a96:	f000 fa07 	bl	8008ea8 <__smakebuf_r>
 8008a9a:	89a0      	ldrh	r0, [r4, #12]
 8008a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008aa0:	f010 0301 	ands.w	r3, r0, #1
 8008aa4:	d00a      	beq.n	8008abc <__swsetup_r+0xbc>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60a3      	str	r3, [r4, #8]
 8008aaa:	6963      	ldr	r3, [r4, #20]
 8008aac:	425b      	negs	r3, r3
 8008aae:	61a3      	str	r3, [r4, #24]
 8008ab0:	6923      	ldr	r3, [r4, #16]
 8008ab2:	b943      	cbnz	r3, 8008ac6 <__swsetup_r+0xc6>
 8008ab4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ab8:	d1ba      	bne.n	8008a30 <__swsetup_r+0x30>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	0781      	lsls	r1, r0, #30
 8008abe:	bf58      	it	pl
 8008ac0:	6963      	ldrpl	r3, [r4, #20]
 8008ac2:	60a3      	str	r3, [r4, #8]
 8008ac4:	e7f4      	b.n	8008ab0 <__swsetup_r+0xb0>
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	e7f7      	b.n	8008aba <__swsetup_r+0xba>
 8008aca:	bf00      	nop
 8008acc:	20000070 	.word	0x20000070
 8008ad0:	0800954c 	.word	0x0800954c
 8008ad4:	0800956c 	.word	0x0800956c
 8008ad8:	0800952c 	.word	0x0800952c

08008adc <abort>:
 8008adc:	b508      	push	{r3, lr}
 8008ade:	2006      	movs	r0, #6
 8008ae0:	f000 fa4a 	bl	8008f78 <raise>
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	f7f8 ff23 	bl	8001930 <_exit>
	...

08008aec <__sflush_r>:
 8008aec:	898a      	ldrh	r2, [r1, #12]
 8008aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af2:	4605      	mov	r5, r0
 8008af4:	0710      	lsls	r0, r2, #28
 8008af6:	460c      	mov	r4, r1
 8008af8:	d458      	bmi.n	8008bac <__sflush_r+0xc0>
 8008afa:	684b      	ldr	r3, [r1, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	dc05      	bgt.n	8008b0c <__sflush_r+0x20>
 8008b00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	dc02      	bgt.n	8008b0c <__sflush_r+0x20>
 8008b06:	2000      	movs	r0, #0
 8008b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b0e:	2e00      	cmp	r6, #0
 8008b10:	d0f9      	beq.n	8008b06 <__sflush_r+0x1a>
 8008b12:	2300      	movs	r3, #0
 8008b14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b18:	682f      	ldr	r7, [r5, #0]
 8008b1a:	602b      	str	r3, [r5, #0]
 8008b1c:	d032      	beq.n	8008b84 <__sflush_r+0x98>
 8008b1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	075a      	lsls	r2, r3, #29
 8008b24:	d505      	bpl.n	8008b32 <__sflush_r+0x46>
 8008b26:	6863      	ldr	r3, [r4, #4]
 8008b28:	1ac0      	subs	r0, r0, r3
 8008b2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b2c:	b10b      	cbz	r3, 8008b32 <__sflush_r+0x46>
 8008b2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b30:	1ac0      	subs	r0, r0, r3
 8008b32:	2300      	movs	r3, #0
 8008b34:	4602      	mov	r2, r0
 8008b36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b38:	6a21      	ldr	r1, [r4, #32]
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b0      	blx	r6
 8008b3e:	1c43      	adds	r3, r0, #1
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	d106      	bne.n	8008b52 <__sflush_r+0x66>
 8008b44:	6829      	ldr	r1, [r5, #0]
 8008b46:	291d      	cmp	r1, #29
 8008b48:	d82c      	bhi.n	8008ba4 <__sflush_r+0xb8>
 8008b4a:	4a2a      	ldr	r2, [pc, #168]	; (8008bf4 <__sflush_r+0x108>)
 8008b4c:	40ca      	lsrs	r2, r1
 8008b4e:	07d6      	lsls	r6, r2, #31
 8008b50:	d528      	bpl.n	8008ba4 <__sflush_r+0xb8>
 8008b52:	2200      	movs	r2, #0
 8008b54:	6062      	str	r2, [r4, #4]
 8008b56:	04d9      	lsls	r1, r3, #19
 8008b58:	6922      	ldr	r2, [r4, #16]
 8008b5a:	6022      	str	r2, [r4, #0]
 8008b5c:	d504      	bpl.n	8008b68 <__sflush_r+0x7c>
 8008b5e:	1c42      	adds	r2, r0, #1
 8008b60:	d101      	bne.n	8008b66 <__sflush_r+0x7a>
 8008b62:	682b      	ldr	r3, [r5, #0]
 8008b64:	b903      	cbnz	r3, 8008b68 <__sflush_r+0x7c>
 8008b66:	6560      	str	r0, [r4, #84]	; 0x54
 8008b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b6a:	602f      	str	r7, [r5, #0]
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	d0ca      	beq.n	8008b06 <__sflush_r+0x1a>
 8008b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b74:	4299      	cmp	r1, r3
 8008b76:	d002      	beq.n	8008b7e <__sflush_r+0x92>
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f7ff fc7f 	bl	800847c <_free_r>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	6360      	str	r0, [r4, #52]	; 0x34
 8008b82:	e7c1      	b.n	8008b08 <__sflush_r+0x1c>
 8008b84:	6a21      	ldr	r1, [r4, #32]
 8008b86:	2301      	movs	r3, #1
 8008b88:	4628      	mov	r0, r5
 8008b8a:	47b0      	blx	r6
 8008b8c:	1c41      	adds	r1, r0, #1
 8008b8e:	d1c7      	bne.n	8008b20 <__sflush_r+0x34>
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0c4      	beq.n	8008b20 <__sflush_r+0x34>
 8008b96:	2b1d      	cmp	r3, #29
 8008b98:	d001      	beq.n	8008b9e <__sflush_r+0xb2>
 8008b9a:	2b16      	cmp	r3, #22
 8008b9c:	d101      	bne.n	8008ba2 <__sflush_r+0xb6>
 8008b9e:	602f      	str	r7, [r5, #0]
 8008ba0:	e7b1      	b.n	8008b06 <__sflush_r+0x1a>
 8008ba2:	89a3      	ldrh	r3, [r4, #12]
 8008ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ba8:	81a3      	strh	r3, [r4, #12]
 8008baa:	e7ad      	b.n	8008b08 <__sflush_r+0x1c>
 8008bac:	690f      	ldr	r7, [r1, #16]
 8008bae:	2f00      	cmp	r7, #0
 8008bb0:	d0a9      	beq.n	8008b06 <__sflush_r+0x1a>
 8008bb2:	0793      	lsls	r3, r2, #30
 8008bb4:	680e      	ldr	r6, [r1, #0]
 8008bb6:	bf08      	it	eq
 8008bb8:	694b      	ldreq	r3, [r1, #20]
 8008bba:	600f      	str	r7, [r1, #0]
 8008bbc:	bf18      	it	ne
 8008bbe:	2300      	movne	r3, #0
 8008bc0:	eba6 0807 	sub.w	r8, r6, r7
 8008bc4:	608b      	str	r3, [r1, #8]
 8008bc6:	f1b8 0f00 	cmp.w	r8, #0
 8008bca:	dd9c      	ble.n	8008b06 <__sflush_r+0x1a>
 8008bcc:	6a21      	ldr	r1, [r4, #32]
 8008bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bd0:	4643      	mov	r3, r8
 8008bd2:	463a      	mov	r2, r7
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	47b0      	blx	r6
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	dc06      	bgt.n	8008bea <__sflush_r+0xfe>
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be2:	81a3      	strh	r3, [r4, #12]
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295
 8008be8:	e78e      	b.n	8008b08 <__sflush_r+0x1c>
 8008bea:	4407      	add	r7, r0
 8008bec:	eba8 0800 	sub.w	r8, r8, r0
 8008bf0:	e7e9      	b.n	8008bc6 <__sflush_r+0xda>
 8008bf2:	bf00      	nop
 8008bf4:	20400001 	.word	0x20400001

08008bf8 <_fflush_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	690b      	ldr	r3, [r1, #16]
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	b913      	cbnz	r3, 8008c08 <_fflush_r+0x10>
 8008c02:	2500      	movs	r5, #0
 8008c04:	4628      	mov	r0, r5
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	b118      	cbz	r0, 8008c12 <_fflush_r+0x1a>
 8008c0a:	6983      	ldr	r3, [r0, #24]
 8008c0c:	b90b      	cbnz	r3, 8008c12 <_fflush_r+0x1a>
 8008c0e:	f000 f887 	bl	8008d20 <__sinit>
 8008c12:	4b14      	ldr	r3, [pc, #80]	; (8008c64 <_fflush_r+0x6c>)
 8008c14:	429c      	cmp	r4, r3
 8008c16:	d11b      	bne.n	8008c50 <_fflush_r+0x58>
 8008c18:	686c      	ldr	r4, [r5, #4]
 8008c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0ef      	beq.n	8008c02 <_fflush_r+0xa>
 8008c22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c24:	07d0      	lsls	r0, r2, #31
 8008c26:	d404      	bmi.n	8008c32 <_fflush_r+0x3a>
 8008c28:	0599      	lsls	r1, r3, #22
 8008c2a:	d402      	bmi.n	8008c32 <_fflush_r+0x3a>
 8008c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c2e:	f000 f915 	bl	8008e5c <__retarget_lock_acquire_recursive>
 8008c32:	4628      	mov	r0, r5
 8008c34:	4621      	mov	r1, r4
 8008c36:	f7ff ff59 	bl	8008aec <__sflush_r>
 8008c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c3c:	07da      	lsls	r2, r3, #31
 8008c3e:	4605      	mov	r5, r0
 8008c40:	d4e0      	bmi.n	8008c04 <_fflush_r+0xc>
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	059b      	lsls	r3, r3, #22
 8008c46:	d4dd      	bmi.n	8008c04 <_fflush_r+0xc>
 8008c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c4a:	f000 f908 	bl	8008e5e <__retarget_lock_release_recursive>
 8008c4e:	e7d9      	b.n	8008c04 <_fflush_r+0xc>
 8008c50:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <_fflush_r+0x70>)
 8008c52:	429c      	cmp	r4, r3
 8008c54:	d101      	bne.n	8008c5a <_fflush_r+0x62>
 8008c56:	68ac      	ldr	r4, [r5, #8]
 8008c58:	e7df      	b.n	8008c1a <_fflush_r+0x22>
 8008c5a:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <_fflush_r+0x74>)
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	bf08      	it	eq
 8008c60:	68ec      	ldreq	r4, [r5, #12]
 8008c62:	e7da      	b.n	8008c1a <_fflush_r+0x22>
 8008c64:	0800954c 	.word	0x0800954c
 8008c68:	0800956c 	.word	0x0800956c
 8008c6c:	0800952c 	.word	0x0800952c

08008c70 <std>:
 8008c70:	2300      	movs	r3, #0
 8008c72:	b510      	push	{r4, lr}
 8008c74:	4604      	mov	r4, r0
 8008c76:	e9c0 3300 	strd	r3, r3, [r0]
 8008c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c7e:	6083      	str	r3, [r0, #8]
 8008c80:	8181      	strh	r1, [r0, #12]
 8008c82:	6643      	str	r3, [r0, #100]	; 0x64
 8008c84:	81c2      	strh	r2, [r0, #14]
 8008c86:	6183      	str	r3, [r0, #24]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	2208      	movs	r2, #8
 8008c8c:	305c      	adds	r0, #92	; 0x5c
 8008c8e:	f7fd fd71 	bl	8006774 <memset>
 8008c92:	4b05      	ldr	r3, [pc, #20]	; (8008ca8 <std+0x38>)
 8008c94:	6263      	str	r3, [r4, #36]	; 0x24
 8008c96:	4b05      	ldr	r3, [pc, #20]	; (8008cac <std+0x3c>)
 8008c98:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c9a:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <std+0x40>)
 8008c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c9e:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <std+0x44>)
 8008ca0:	6224      	str	r4, [r4, #32]
 8008ca2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ca4:	bd10      	pop	{r4, pc}
 8008ca6:	bf00      	nop
 8008ca8:	08008fb1 	.word	0x08008fb1
 8008cac:	08008fd3 	.word	0x08008fd3
 8008cb0:	0800900b 	.word	0x0800900b
 8008cb4:	0800902f 	.word	0x0800902f

08008cb8 <_cleanup_r>:
 8008cb8:	4901      	ldr	r1, [pc, #4]	; (8008cc0 <_cleanup_r+0x8>)
 8008cba:	f000 b8af 	b.w	8008e1c <_fwalk_reent>
 8008cbe:	bf00      	nop
 8008cc0:	08008bf9 	.word	0x08008bf9

08008cc4 <__sfmoreglue>:
 8008cc4:	b570      	push	{r4, r5, r6, lr}
 8008cc6:	1e4a      	subs	r2, r1, #1
 8008cc8:	2568      	movs	r5, #104	; 0x68
 8008cca:	4355      	muls	r5, r2
 8008ccc:	460e      	mov	r6, r1
 8008cce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cd2:	f7ff fc23 	bl	800851c <_malloc_r>
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	b140      	cbz	r0, 8008cec <__sfmoreglue+0x28>
 8008cda:	2100      	movs	r1, #0
 8008cdc:	e9c0 1600 	strd	r1, r6, [r0]
 8008ce0:	300c      	adds	r0, #12
 8008ce2:	60a0      	str	r0, [r4, #8]
 8008ce4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ce8:	f7fd fd44 	bl	8006774 <memset>
 8008cec:	4620      	mov	r0, r4
 8008cee:	bd70      	pop	{r4, r5, r6, pc}

08008cf0 <__sfp_lock_acquire>:
 8008cf0:	4801      	ldr	r0, [pc, #4]	; (8008cf8 <__sfp_lock_acquire+0x8>)
 8008cf2:	f000 b8b3 	b.w	8008e5c <__retarget_lock_acquire_recursive>
 8008cf6:	bf00      	nop
 8008cf8:	2000f058 	.word	0x2000f058

08008cfc <__sfp_lock_release>:
 8008cfc:	4801      	ldr	r0, [pc, #4]	; (8008d04 <__sfp_lock_release+0x8>)
 8008cfe:	f000 b8ae 	b.w	8008e5e <__retarget_lock_release_recursive>
 8008d02:	bf00      	nop
 8008d04:	2000f058 	.word	0x2000f058

08008d08 <__sinit_lock_acquire>:
 8008d08:	4801      	ldr	r0, [pc, #4]	; (8008d10 <__sinit_lock_acquire+0x8>)
 8008d0a:	f000 b8a7 	b.w	8008e5c <__retarget_lock_acquire_recursive>
 8008d0e:	bf00      	nop
 8008d10:	2000f053 	.word	0x2000f053

08008d14 <__sinit_lock_release>:
 8008d14:	4801      	ldr	r0, [pc, #4]	; (8008d1c <__sinit_lock_release+0x8>)
 8008d16:	f000 b8a2 	b.w	8008e5e <__retarget_lock_release_recursive>
 8008d1a:	bf00      	nop
 8008d1c:	2000f053 	.word	0x2000f053

08008d20 <__sinit>:
 8008d20:	b510      	push	{r4, lr}
 8008d22:	4604      	mov	r4, r0
 8008d24:	f7ff fff0 	bl	8008d08 <__sinit_lock_acquire>
 8008d28:	69a3      	ldr	r3, [r4, #24]
 8008d2a:	b11b      	cbz	r3, 8008d34 <__sinit+0x14>
 8008d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d30:	f7ff bff0 	b.w	8008d14 <__sinit_lock_release>
 8008d34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d38:	6523      	str	r3, [r4, #80]	; 0x50
 8008d3a:	4b13      	ldr	r3, [pc, #76]	; (8008d88 <__sinit+0x68>)
 8008d3c:	4a13      	ldr	r2, [pc, #76]	; (8008d8c <__sinit+0x6c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d42:	42a3      	cmp	r3, r4
 8008d44:	bf04      	itt	eq
 8008d46:	2301      	moveq	r3, #1
 8008d48:	61a3      	streq	r3, [r4, #24]
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 f820 	bl	8008d90 <__sfp>
 8008d50:	6060      	str	r0, [r4, #4]
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 f81c 	bl	8008d90 <__sfp>
 8008d58:	60a0      	str	r0, [r4, #8]
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 f818 	bl	8008d90 <__sfp>
 8008d60:	2200      	movs	r2, #0
 8008d62:	60e0      	str	r0, [r4, #12]
 8008d64:	2104      	movs	r1, #4
 8008d66:	6860      	ldr	r0, [r4, #4]
 8008d68:	f7ff ff82 	bl	8008c70 <std>
 8008d6c:	68a0      	ldr	r0, [r4, #8]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	2109      	movs	r1, #9
 8008d72:	f7ff ff7d 	bl	8008c70 <std>
 8008d76:	68e0      	ldr	r0, [r4, #12]
 8008d78:	2202      	movs	r2, #2
 8008d7a:	2112      	movs	r1, #18
 8008d7c:	f7ff ff78 	bl	8008c70 <std>
 8008d80:	2301      	movs	r3, #1
 8008d82:	61a3      	str	r3, [r4, #24]
 8008d84:	e7d2      	b.n	8008d2c <__sinit+0xc>
 8008d86:	bf00      	nop
 8008d88:	080091a8 	.word	0x080091a8
 8008d8c:	08008cb9 	.word	0x08008cb9

08008d90 <__sfp>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	4607      	mov	r7, r0
 8008d94:	f7ff ffac 	bl	8008cf0 <__sfp_lock_acquire>
 8008d98:	4b1e      	ldr	r3, [pc, #120]	; (8008e14 <__sfp+0x84>)
 8008d9a:	681e      	ldr	r6, [r3, #0]
 8008d9c:	69b3      	ldr	r3, [r6, #24]
 8008d9e:	b913      	cbnz	r3, 8008da6 <__sfp+0x16>
 8008da0:	4630      	mov	r0, r6
 8008da2:	f7ff ffbd 	bl	8008d20 <__sinit>
 8008da6:	3648      	adds	r6, #72	; 0x48
 8008da8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	d503      	bpl.n	8008db8 <__sfp+0x28>
 8008db0:	6833      	ldr	r3, [r6, #0]
 8008db2:	b30b      	cbz	r3, 8008df8 <__sfp+0x68>
 8008db4:	6836      	ldr	r6, [r6, #0]
 8008db6:	e7f7      	b.n	8008da8 <__sfp+0x18>
 8008db8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dbc:	b9d5      	cbnz	r5, 8008df4 <__sfp+0x64>
 8008dbe:	4b16      	ldr	r3, [pc, #88]	; (8008e18 <__sfp+0x88>)
 8008dc0:	60e3      	str	r3, [r4, #12]
 8008dc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008dc6:	6665      	str	r5, [r4, #100]	; 0x64
 8008dc8:	f000 f847 	bl	8008e5a <__retarget_lock_init_recursive>
 8008dcc:	f7ff ff96 	bl	8008cfc <__sfp_lock_release>
 8008dd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008dd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008dd8:	6025      	str	r5, [r4, #0]
 8008dda:	61a5      	str	r5, [r4, #24]
 8008ddc:	2208      	movs	r2, #8
 8008dde:	4629      	mov	r1, r5
 8008de0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008de4:	f7fd fcc6 	bl	8006774 <memset>
 8008de8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008df0:	4620      	mov	r0, r4
 8008df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df4:	3468      	adds	r4, #104	; 0x68
 8008df6:	e7d9      	b.n	8008dac <__sfp+0x1c>
 8008df8:	2104      	movs	r1, #4
 8008dfa:	4638      	mov	r0, r7
 8008dfc:	f7ff ff62 	bl	8008cc4 <__sfmoreglue>
 8008e00:	4604      	mov	r4, r0
 8008e02:	6030      	str	r0, [r6, #0]
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d1d5      	bne.n	8008db4 <__sfp+0x24>
 8008e08:	f7ff ff78 	bl	8008cfc <__sfp_lock_release>
 8008e0c:	230c      	movs	r3, #12
 8008e0e:	603b      	str	r3, [r7, #0]
 8008e10:	e7ee      	b.n	8008df0 <__sfp+0x60>
 8008e12:	bf00      	nop
 8008e14:	080091a8 	.word	0x080091a8
 8008e18:	ffff0001 	.word	0xffff0001

08008e1c <_fwalk_reent>:
 8008e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e20:	4606      	mov	r6, r0
 8008e22:	4688      	mov	r8, r1
 8008e24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e28:	2700      	movs	r7, #0
 8008e2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e2e:	f1b9 0901 	subs.w	r9, r9, #1
 8008e32:	d505      	bpl.n	8008e40 <_fwalk_reent+0x24>
 8008e34:	6824      	ldr	r4, [r4, #0]
 8008e36:	2c00      	cmp	r4, #0
 8008e38:	d1f7      	bne.n	8008e2a <_fwalk_reent+0xe>
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e40:	89ab      	ldrh	r3, [r5, #12]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d907      	bls.n	8008e56 <_fwalk_reent+0x3a>
 8008e46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	d003      	beq.n	8008e56 <_fwalk_reent+0x3a>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4630      	mov	r0, r6
 8008e52:	47c0      	blx	r8
 8008e54:	4307      	orrs	r7, r0
 8008e56:	3568      	adds	r5, #104	; 0x68
 8008e58:	e7e9      	b.n	8008e2e <_fwalk_reent+0x12>

08008e5a <__retarget_lock_init_recursive>:
 8008e5a:	4770      	bx	lr

08008e5c <__retarget_lock_acquire_recursive>:
 8008e5c:	4770      	bx	lr

08008e5e <__retarget_lock_release_recursive>:
 8008e5e:	4770      	bx	lr

08008e60 <__swhatbuf_r>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	460e      	mov	r6, r1
 8008e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	b096      	sub	sp, #88	; 0x58
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	461d      	mov	r5, r3
 8008e70:	da07      	bge.n	8008e82 <__swhatbuf_r+0x22>
 8008e72:	2300      	movs	r3, #0
 8008e74:	602b      	str	r3, [r5, #0]
 8008e76:	89b3      	ldrh	r3, [r6, #12]
 8008e78:	061a      	lsls	r2, r3, #24
 8008e7a:	d410      	bmi.n	8008e9e <__swhatbuf_r+0x3e>
 8008e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e80:	e00e      	b.n	8008ea0 <__swhatbuf_r+0x40>
 8008e82:	466a      	mov	r2, sp
 8008e84:	f000 f8fa 	bl	800907c <_fstat_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	dbf2      	blt.n	8008e72 <__swhatbuf_r+0x12>
 8008e8c:	9a01      	ldr	r2, [sp, #4]
 8008e8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e96:	425a      	negs	r2, r3
 8008e98:	415a      	adcs	r2, r3
 8008e9a:	602a      	str	r2, [r5, #0]
 8008e9c:	e7ee      	b.n	8008e7c <__swhatbuf_r+0x1c>
 8008e9e:	2340      	movs	r3, #64	; 0x40
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	6023      	str	r3, [r4, #0]
 8008ea4:	b016      	add	sp, #88	; 0x58
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}

08008ea8 <__smakebuf_r>:
 8008ea8:	898b      	ldrh	r3, [r1, #12]
 8008eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008eac:	079d      	lsls	r5, r3, #30
 8008eae:	4606      	mov	r6, r0
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	d507      	bpl.n	8008ec4 <__smakebuf_r+0x1c>
 8008eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	6123      	str	r3, [r4, #16]
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	6163      	str	r3, [r4, #20]
 8008ec0:	b002      	add	sp, #8
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
 8008ec4:	ab01      	add	r3, sp, #4
 8008ec6:	466a      	mov	r2, sp
 8008ec8:	f7ff ffca 	bl	8008e60 <__swhatbuf_r>
 8008ecc:	9900      	ldr	r1, [sp, #0]
 8008ece:	4605      	mov	r5, r0
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f7ff fb23 	bl	800851c <_malloc_r>
 8008ed6:	b948      	cbnz	r0, 8008eec <__smakebuf_r+0x44>
 8008ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008edc:	059a      	lsls	r2, r3, #22
 8008ede:	d4ef      	bmi.n	8008ec0 <__smakebuf_r+0x18>
 8008ee0:	f023 0303 	bic.w	r3, r3, #3
 8008ee4:	f043 0302 	orr.w	r3, r3, #2
 8008ee8:	81a3      	strh	r3, [r4, #12]
 8008eea:	e7e3      	b.n	8008eb4 <__smakebuf_r+0xc>
 8008eec:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <__smakebuf_r+0x7c>)
 8008eee:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	6020      	str	r0, [r4, #0]
 8008ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef8:	81a3      	strh	r3, [r4, #12]
 8008efa:	9b00      	ldr	r3, [sp, #0]
 8008efc:	6163      	str	r3, [r4, #20]
 8008efe:	9b01      	ldr	r3, [sp, #4]
 8008f00:	6120      	str	r0, [r4, #16]
 8008f02:	b15b      	cbz	r3, 8008f1c <__smakebuf_r+0x74>
 8008f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f000 f8c9 	bl	80090a0 <_isatty_r>
 8008f0e:	b128      	cbz	r0, 8008f1c <__smakebuf_r+0x74>
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	f023 0303 	bic.w	r3, r3, #3
 8008f16:	f043 0301 	orr.w	r3, r3, #1
 8008f1a:	81a3      	strh	r3, [r4, #12]
 8008f1c:	89a0      	ldrh	r0, [r4, #12]
 8008f1e:	4305      	orrs	r5, r0
 8008f20:	81a5      	strh	r5, [r4, #12]
 8008f22:	e7cd      	b.n	8008ec0 <__smakebuf_r+0x18>
 8008f24:	08008cb9 	.word	0x08008cb9

08008f28 <_raise_r>:
 8008f28:	291f      	cmp	r1, #31
 8008f2a:	b538      	push	{r3, r4, r5, lr}
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	460d      	mov	r5, r1
 8008f30:	d904      	bls.n	8008f3c <_raise_r+0x14>
 8008f32:	2316      	movs	r3, #22
 8008f34:	6003      	str	r3, [r0, #0]
 8008f36:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f3e:	b112      	cbz	r2, 8008f46 <_raise_r+0x1e>
 8008f40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f44:	b94b      	cbnz	r3, 8008f5a <_raise_r+0x32>
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 f830 	bl	8008fac <_getpid_r>
 8008f4c:	462a      	mov	r2, r5
 8008f4e:	4601      	mov	r1, r0
 8008f50:	4620      	mov	r0, r4
 8008f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f56:	f000 b817 	b.w	8008f88 <_kill_r>
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d00a      	beq.n	8008f74 <_raise_r+0x4c>
 8008f5e:	1c59      	adds	r1, r3, #1
 8008f60:	d103      	bne.n	8008f6a <_raise_r+0x42>
 8008f62:	2316      	movs	r3, #22
 8008f64:	6003      	str	r3, [r0, #0]
 8008f66:	2001      	movs	r0, #1
 8008f68:	e7e7      	b.n	8008f3a <_raise_r+0x12>
 8008f6a:	2400      	movs	r4, #0
 8008f6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f70:	4628      	mov	r0, r5
 8008f72:	4798      	blx	r3
 8008f74:	2000      	movs	r0, #0
 8008f76:	e7e0      	b.n	8008f3a <_raise_r+0x12>

08008f78 <raise>:
 8008f78:	4b02      	ldr	r3, [pc, #8]	; (8008f84 <raise+0xc>)
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	f7ff bfd3 	b.w	8008f28 <_raise_r>
 8008f82:	bf00      	nop
 8008f84:	20000070 	.word	0x20000070

08008f88 <_kill_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	4d07      	ldr	r5, [pc, #28]	; (8008fa8 <_kill_r+0x20>)
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4604      	mov	r4, r0
 8008f90:	4608      	mov	r0, r1
 8008f92:	4611      	mov	r1, r2
 8008f94:	602b      	str	r3, [r5, #0]
 8008f96:	f7f8 fcbb 	bl	8001910 <_kill>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	d102      	bne.n	8008fa4 <_kill_r+0x1c>
 8008f9e:	682b      	ldr	r3, [r5, #0]
 8008fa0:	b103      	cbz	r3, 8008fa4 <_kill_r+0x1c>
 8008fa2:	6023      	str	r3, [r4, #0]
 8008fa4:	bd38      	pop	{r3, r4, r5, pc}
 8008fa6:	bf00      	nop
 8008fa8:	2000f04c 	.word	0x2000f04c

08008fac <_getpid_r>:
 8008fac:	f7f8 bca8 	b.w	8001900 <_getpid>

08008fb0 <__sread>:
 8008fb0:	b510      	push	{r4, lr}
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb8:	f000 f894 	bl	80090e4 <_read_r>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	bfab      	itete	ge
 8008fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fc4:	181b      	addge	r3, r3, r0
 8008fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fca:	bfac      	ite	ge
 8008fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fce:	81a3      	strhlt	r3, [r4, #12]
 8008fd0:	bd10      	pop	{r4, pc}

08008fd2 <__swrite>:
 8008fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd6:	461f      	mov	r7, r3
 8008fd8:	898b      	ldrh	r3, [r1, #12]
 8008fda:	05db      	lsls	r3, r3, #23
 8008fdc:	4605      	mov	r5, r0
 8008fde:	460c      	mov	r4, r1
 8008fe0:	4616      	mov	r6, r2
 8008fe2:	d505      	bpl.n	8008ff0 <__swrite+0x1e>
 8008fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe8:	2302      	movs	r3, #2
 8008fea:	2200      	movs	r2, #0
 8008fec:	f000 f868 	bl	80090c0 <_lseek_r>
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	4632      	mov	r2, r6
 8008ffe:	463b      	mov	r3, r7
 8009000:	4628      	mov	r0, r5
 8009002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009006:	f000 b817 	b.w	8009038 <_write_r>

0800900a <__sseek>:
 800900a:	b510      	push	{r4, lr}
 800900c:	460c      	mov	r4, r1
 800900e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009012:	f000 f855 	bl	80090c0 <_lseek_r>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	bf15      	itete	ne
 800901c:	6560      	strne	r0, [r4, #84]	; 0x54
 800901e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009026:	81a3      	strheq	r3, [r4, #12]
 8009028:	bf18      	it	ne
 800902a:	81a3      	strhne	r3, [r4, #12]
 800902c:	bd10      	pop	{r4, pc}

0800902e <__sclose>:
 800902e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009032:	f000 b813 	b.w	800905c <_close_r>
	...

08009038 <_write_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4d07      	ldr	r5, [pc, #28]	; (8009058 <_write_r+0x20>)
 800903c:	4604      	mov	r4, r0
 800903e:	4608      	mov	r0, r1
 8009040:	4611      	mov	r1, r2
 8009042:	2200      	movs	r2, #0
 8009044:	602a      	str	r2, [r5, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	f7f8 f956 	bl	80012f8 <_write>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_write_r+0x1e>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	b103      	cbz	r3, 8009056 <_write_r+0x1e>
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	2000f04c 	.word	0x2000f04c

0800905c <_close_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4d06      	ldr	r5, [pc, #24]	; (8009078 <_close_r+0x1c>)
 8009060:	2300      	movs	r3, #0
 8009062:	4604      	mov	r4, r0
 8009064:	4608      	mov	r0, r1
 8009066:	602b      	str	r3, [r5, #0]
 8009068:	f7f8 fc89 	bl	800197e <_close>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d102      	bne.n	8009076 <_close_r+0x1a>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	b103      	cbz	r3, 8009076 <_close_r+0x1a>
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	2000f04c 	.word	0x2000f04c

0800907c <_fstat_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d07      	ldr	r5, [pc, #28]	; (800909c <_fstat_r+0x20>)
 8009080:	2300      	movs	r3, #0
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	4611      	mov	r1, r2
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	f7f8 fc84 	bl	8001996 <_fstat>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d102      	bne.n	8009098 <_fstat_r+0x1c>
 8009092:	682b      	ldr	r3, [r5, #0]
 8009094:	b103      	cbz	r3, 8009098 <_fstat_r+0x1c>
 8009096:	6023      	str	r3, [r4, #0]
 8009098:	bd38      	pop	{r3, r4, r5, pc}
 800909a:	bf00      	nop
 800909c:	2000f04c 	.word	0x2000f04c

080090a0 <_isatty_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d06      	ldr	r5, [pc, #24]	; (80090bc <_isatty_r+0x1c>)
 80090a4:	2300      	movs	r3, #0
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	f7f8 fc83 	bl	80019b6 <_isatty>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_isatty_r+0x1a>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_isatty_r+0x1a>
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	2000f04c 	.word	0x2000f04c

080090c0 <_lseek_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d07      	ldr	r5, [pc, #28]	; (80090e0 <_lseek_r+0x20>)
 80090c4:	4604      	mov	r4, r0
 80090c6:	4608      	mov	r0, r1
 80090c8:	4611      	mov	r1, r2
 80090ca:	2200      	movs	r2, #0
 80090cc:	602a      	str	r2, [r5, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	f7f8 fc7c 	bl	80019cc <_lseek>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_lseek_r+0x1e>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_lseek_r+0x1e>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	2000f04c 	.word	0x2000f04c

080090e4 <_read_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	4d07      	ldr	r5, [pc, #28]	; (8009104 <_read_r+0x20>)
 80090e8:	4604      	mov	r4, r0
 80090ea:	4608      	mov	r0, r1
 80090ec:	4611      	mov	r1, r2
 80090ee:	2200      	movs	r2, #0
 80090f0:	602a      	str	r2, [r5, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	f7f8 fc26 	bl	8001944 <_read>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d102      	bne.n	8009102 <_read_r+0x1e>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	b103      	cbz	r3, 8009102 <_read_r+0x1e>
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	2000f04c 	.word	0x2000f04c

08009108 <_init>:
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910a:	bf00      	nop
 800910c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910e:	bc08      	pop	{r3}
 8009110:	469e      	mov	lr, r3
 8009112:	4770      	bx	lr

08009114 <_fini>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	bf00      	nop
 8009118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911a:	bc08      	pop	{r3}
 800911c:	469e      	mov	lr, r3
 800911e:	4770      	bx	lr
